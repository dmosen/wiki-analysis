/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema;

public interface CategoryGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = schemas.categoryschema.CategorySchema.instance().gc_CategoryGraph;

	// ------------------------ Code for Category ------------------------

	/**
	 * @return the first Category vertex in this graph
	 */
	public schemas.categoryschema.Category getFirstCategory();

	/**
	 * Creates a new Category vertex in this graph.
	 *
	*/
	public schemas.categoryschema.Category createCategory();

	// ------------------------ Code for ContainsPage ------------------------

	/**
	 * @return the first ContainsPage edge in this graph
	 */
	public schemas.categoryschema.ContainsPage getFirstContainsPage();

	/**
	 * Creates a new ContainsPage edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public schemas.categoryschema.ContainsPage createContainsPage(schemas.categoryschema.Category alpha, schemas.categoryschema.Page omega);

	// ------------------------ Code for HasSubcategory ------------------------

	/**
	 * @return the first HasSubcategory edge in this graph
	 */
	public schemas.categoryschema.HasSubcategory getFirstHasSubcategory();

	/**
	 * Creates a new HasSubcategory edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public schemas.categoryschema.HasSubcategory createHasSubcategory(schemas.categoryschema.Category alpha, schemas.categoryschema.Category omega);

	// ------------------------ Code for Page ------------------------

	/**
	 * @return the first Page vertex in this graph
	 */
	public schemas.categoryschema.Page getFirstPage();

	/**
	 * Creates a new Page vertex in this graph.
	 *
	*/
	public schemas.categoryschema.Page createPage();

	/**
	 * @return an Iterable for all edges of this graph that are of type HasSubcategory or subtypes.
	 */
	public Iterable<schemas.categoryschema.HasSubcategory> getHasSubcategoryEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ContainsPage or subtypes.
	 */
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Category or subtypes.
	 */
	public Iterable<schemas.categoryschema.Category> getCategoryVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Page or subtypes.
	 */
	public Iterable<schemas.categoryschema.Page> getPageVertices();
	
}
