/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema.impl.std;

import de.uni_koblenz.jgralab.impl.std.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import schemas.categoryschema.impl.std.ReversedContainsPageImpl;

import java.io.IOException;

import schemas.categoryschema.Category;
import schemas.categoryschema.Page;
/**
 * FromVertexClass: Category
 * FromRoleName : category
 * ToVertexClass: Page
 * ToRoleName : containedPage
 */

public class ContainsPageImpl extends EdgeImpl implements schemas.categoryschema.ContainsPage, de.uni_koblenz.jgralab.Edge {

	public ContainsPageImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
		((de.uni_koblenz.jgralab.impl.InternalGraph) graph).addEdge(this, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return schemas.categoryschema.ContainsPage.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return schemas.categoryschema.ContainsPage.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("ContainsPage doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("ContainsPage doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("ContainsPage doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("ContainsPage doesn't contain an attribute " + attributeName);
	}

	public schemas.categoryschema.ContainsPage getNextContainsPageInGraph() {
		return (schemas.categoryschema.ContainsPage)getNextEdge(schemas.categoryschema.ContainsPage.class);
	}

	public schemas.categoryschema.ContainsPage getNextContainsPageIncidence() {
		return (schemas.categoryschema.ContainsPage)getNextIncidence(schemas.categoryschema.ContainsPage.class);
	}

	public schemas.categoryschema.ContainsPage getNextContainsPageIncidence(EdgeDirection orientation) {
		return (schemas.categoryschema.ContainsPage)getNextIncidence(schemas.categoryschema.ContainsPage.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedContainsPageImpl(this, graph);
	}
	public Category getAlpha() {
		return (Category) super.getAlpha();
	}
	public Page getOmega() {
		return (Page) super.getOmega();
	}
}
