/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class CategoryImpl extends VertexImpl implements schemas.categoryschema.Category, de.uni_koblenz.jgralab.Vertex {

	protected int _level;

	protected int _pages;

	protected int _parentCategories;

	protected int _subcategories;

	protected java.lang.String _title;

	protected int _transitivePages;

	protected int _transitiveSubcategories;

	public CategoryImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return schemas.categoryschema.Category.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return schemas.categoryschema.Category.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("level")) return (T) (java.lang.Integer) get_level();
		if (attributeName.equals("pages")) return (T) (java.lang.Integer) get_pages();
		if (attributeName.equals("parentCategories")) return (T) (java.lang.Integer) get_parentCategories();
		if (attributeName.equals("subcategories")) return (T) (java.lang.Integer) get_subcategories();
		if (attributeName.equals("title")) return (T) get_title();
		if (attributeName.equals("transitivePages")) return (T) (java.lang.Integer) get_transitivePages();
		if (attributeName.equals("transitiveSubcategories")) return (T) (java.lang.Integer) get_transitiveSubcategories();
		throw new NoSuchAttributeException("Category doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("level")) {
			set_level((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("pages")) {
			set_pages((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("parentCategories")) {
			set_parentCategories((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("subcategories")) {
			set_subcategories((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("title")) {
			set_title((java.lang.String) data);
			return;
		}
		if (attributeName.equals("transitivePages")) {
			set_transitivePages((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("transitiveSubcategories")) {
			set_transitiveSubcategories((java.lang.Integer) data);
			return;
		}
		throw new NoSuchAttributeException("Category doesn't contain an attribute " + attributeName);
	}

	public int get_level() {
		return _level;
	}

	public void set_level(int _level) {
		ecaAttributeChanging("level", this._level, _level);
		Object oldValue = this._level;
		this._level = _level;
		graphModified();
	ecaAttributeChanged("level", oldValue, _level);
	}

	public int get_pages() {
		return _pages;
	}

	public void set_pages(int _pages) {
		ecaAttributeChanging("pages", this._pages, _pages);
		Object oldValue = this._pages;
		this._pages = _pages;
		graphModified();
	ecaAttributeChanged("pages", oldValue, _pages);
	}

	public int get_parentCategories() {
		return _parentCategories;
	}

	public void set_parentCategories(int _parentCategories) {
		ecaAttributeChanging("parentCategories", this._parentCategories, _parentCategories);
		Object oldValue = this._parentCategories;
		this._parentCategories = _parentCategories;
		graphModified();
	ecaAttributeChanged("parentCategories", oldValue, _parentCategories);
	}

	public int get_subcategories() {
		return _subcategories;
	}

	public void set_subcategories(int _subcategories) {
		ecaAttributeChanging("subcategories", this._subcategories, _subcategories);
		Object oldValue = this._subcategories;
		this._subcategories = _subcategories;
		graphModified();
	ecaAttributeChanged("subcategories", oldValue, _subcategories);
	}

	public java.lang.String get_title() {
		return _title;
	}

	public void set_title(java.lang.String _title) {
		ecaAttributeChanging("title", this._title, _title);
		Object oldValue = this._title;
		this._title = _title;
		graphModified();
	ecaAttributeChanged("title", oldValue, _title);
	}

	public int get_transitivePages() {
		return _transitivePages;
	}

	public void set_transitivePages(int _transitivePages) {
		ecaAttributeChanging("transitivePages", this._transitivePages, _transitivePages);
		Object oldValue = this._transitivePages;
		this._transitivePages = _transitivePages;
		graphModified();
	ecaAttributeChanged("transitivePages", oldValue, _transitivePages);
	}

	public int get_transitiveSubcategories() {
		return _transitiveSubcategories;
	}

	public void set_transitiveSubcategories(int _transitiveSubcategories) {
		ecaAttributeChanging("transitiveSubcategories", this._transitiveSubcategories, _transitiveSubcategories);
		Object oldValue = this._transitiveSubcategories;
		this._transitiveSubcategories = _transitiveSubcategories;
		graphModified();
	ecaAttributeChanged("transitiveSubcategories", oldValue, _transitiveSubcategories);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_level = io.matchInteger();
		set_level(_level);
		_pages = io.matchInteger();
		set_pages(_pages);
		_parentCategories = io.matchInteger();
		set_parentCategories(_parentCategories);
		_subcategories = io.matchInteger();
		set_subcategories(_subcategories);
		_title = io.matchUtfString();
		set_title(_title);
		_transitivePages = io.matchInteger();
		set_transitivePages(_transitivePages);
		_transitiveSubcategories = io.matchInteger();
		set_transitiveSubcategories(_transitiveSubcategories);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("level")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_level = io.matchInteger();
			set_level(_level);
			return;
		}
		if (attributeName.equals("pages")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_pages = io.matchInteger();
			set_pages(_pages);
			return;
		}
		if (attributeName.equals("parentCategories")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_parentCategories = io.matchInteger();
			set_parentCategories(_parentCategories);
			return;
		}
		if (attributeName.equals("subcategories")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_subcategories = io.matchInteger();
			set_subcategories(_subcategories);
			return;
		}
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_title = io.matchUtfString();
			set_title(_title);
			return;
		}
		if (attributeName.equals("transitivePages")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_transitivePages = io.matchInteger();
			set_transitivePages(_transitivePages);
			return;
		}
		if (attributeName.equals("transitiveSubcategories")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_transitiveSubcategories = io.matchInteger();
			set_transitiveSubcategories(_transitiveSubcategories);
			return;
		}
		throw new NoSuchAttributeException("Category doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeInteger(_level);
		io.writeInteger(_pages);
		io.writeInteger(_parentCategories);
		io.writeInteger(_subcategories);
		io.writeUtfString(_title);
		io.writeInteger(_transitivePages);
		io.writeInteger(_transitiveSubcategories);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("level")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_level);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("pages")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_pages);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("parentCategories")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_parentCategories);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("subcategories")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_subcategories);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_title);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("transitivePages")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_transitivePages);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("transitiveSubcategories")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_transitiveSubcategories);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Category doesn't contain an attribute " + attributeName);
	}

	@Override
	public schemas.categoryschema.Category getNextCategory() {
		return (schemas.categoryschema.Category)getNextVertex(schemas.categoryschema.Category.class);
	}

	@Override
	public schemas.categoryschema.Subcategory getFirstSubcategoryIncidence() {
		return (schemas.categoryschema.Subcategory)getFirstIncidence(schemas.categoryschema.Subcategory.class);
	}

	@Override
	public schemas.categoryschema.Subcategory getFirstSubcategoryIncidence(EdgeDirection orientation) {
		return (schemas.categoryschema.Subcategory)getFirstIncidence(schemas.categoryschema.Subcategory.class, orientation);
	}

	@Override
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence() {
		return (schemas.categoryschema.ContainsPage)getFirstIncidence(schemas.categoryschema.ContainsPage.class);
	}

	@Override
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence(EdgeDirection orientation) {
		return (schemas.categoryschema.ContainsPage)getFirstIncidence(schemas.categoryschema.ContainsPage.class, orientation);
	}
		@Override
		public schemas.categoryschema.Subcategory add_category(schemas.categoryschema.Category vertex) {
			return ((schemas.categoryschema.CategoryGraph)getGraph()).createEdge(schemas.categoryschema.Subcategory.EC, (schemas.categoryschema.Category) vertex, (schemas.categoryschema.Category) this);
		}
		@Override
		public java.util.List<? extends schemas.categoryschema.Category> remove_category() {
			java.util.List<schemas.categoryschema.Category> adjacences = new java.util.ArrayList<schemas.categoryschema.Category>();
			schemas.categoryschema.Subcategory edge = (schemas.categoryschema.Subcategory) getFirstIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.IN);
			while (edge != null) {
				schemas.categoryschema.Subcategory next = (schemas.categoryschema.Subcategory) edge.getNextIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.IN);
				adjacences.add((schemas.categoryschema.Category) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_category(schemas.categoryschema.Category vertex) {
			boolean elementRemoved = false;
			schemas.categoryschema.Subcategory edge = (schemas.categoryschema.Subcategory) getFirstIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.IN);
			while (edge != null) {
				schemas.categoryschema.Subcategory next = (schemas.categoryschema.Subcategory) edge.getNextIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends schemas.categoryschema.Category> get_category() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<schemas.categoryschema.Subcategory, schemas.categoryschema.Category>(this, schemas.categoryschema.Subcategory.class, EdgeDirection.IN);
		}
		@Override
		public schemas.categoryschema.ContainsPage add_containedPage(schemas.categoryschema.Page vertex) {
			return ((schemas.categoryschema.CategoryGraph)getGraph()).createEdge(schemas.categoryschema.ContainsPage.EC, (schemas.categoryschema.Category) this, (schemas.categoryschema.Page) vertex);
		}
		@Override
		public java.util.List<? extends schemas.categoryschema.Page> remove_containedPage() {
			java.util.List<schemas.categoryschema.Page> adjacences = new java.util.ArrayList<schemas.categoryschema.Page>();
			schemas.categoryschema.ContainsPage edge = (schemas.categoryschema.ContainsPage) getFirstIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.OUT);
			while (edge != null) {
				schemas.categoryschema.ContainsPage next = (schemas.categoryschema.ContainsPage) edge.getNextIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.OUT);
				adjacences.add((schemas.categoryschema.Page) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_containedPage(schemas.categoryschema.Page vertex) {
			boolean elementRemoved = false;
			schemas.categoryschema.ContainsPage edge = (schemas.categoryschema.ContainsPage) getFirstIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.OUT);
			while (edge != null) {
				schemas.categoryschema.ContainsPage next = (schemas.categoryschema.ContainsPage) edge.getNextIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends schemas.categoryschema.Page> get_containedPage() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<schemas.categoryschema.ContainsPage, schemas.categoryschema.Page>(this, schemas.categoryschema.ContainsPage.class, EdgeDirection.OUT);
		}
		@Override
		public schemas.categoryschema.Subcategory add_subcategory(schemas.categoryschema.Category vertex) {
			return ((schemas.categoryschema.CategoryGraph)getGraph()).createEdge(schemas.categoryschema.Subcategory.EC, (schemas.categoryschema.Category) this, (schemas.categoryschema.Category) vertex);
		}
		@Override
		public java.util.List<? extends schemas.categoryschema.Category> remove_subcategory() {
			java.util.List<schemas.categoryschema.Category> adjacences = new java.util.ArrayList<schemas.categoryschema.Category>();
			schemas.categoryschema.Subcategory edge = (schemas.categoryschema.Subcategory) getFirstIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.OUT);
			while (edge != null) {
				schemas.categoryschema.Subcategory next = (schemas.categoryschema.Subcategory) edge.getNextIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.OUT);
				adjacences.add((schemas.categoryschema.Category) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_subcategory(schemas.categoryschema.Category vertex) {
			boolean elementRemoved = false;
			schemas.categoryschema.Subcategory edge = (schemas.categoryschema.Subcategory) getFirstIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.OUT);
			while (edge != null) {
				schemas.categoryschema.Subcategory next = (schemas.categoryschema.Subcategory) edge.getNextIncidence(schemas.categoryschema.Subcategory.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends schemas.categoryschema.Category> get_subcategory() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<schemas.categoryschema.Subcategory, schemas.categoryschema.Category>(this, schemas.categoryschema.Subcategory.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<schemas.categoryschema.Subcategory> getSubcategoryIncidences() {
		return new IncidenceIterable<schemas.categoryschema.Subcategory>(this, schemas.categoryschema.Subcategory.class);
	}
	
	@Override
	public Iterable<schemas.categoryschema.Subcategory> getSubcategoryIncidences(EdgeDirection direction) {
		return new IncidenceIterable<schemas.categoryschema.Subcategory>(this, schemas.categoryschema.Subcategory.class, direction);
	}

	@Override
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences() {
		return new IncidenceIterable<schemas.categoryschema.ContainsPage>(this, schemas.categoryschema.ContainsPage.class);
	}
	
	@Override
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences(EdgeDirection direction) {
		return new IncidenceIterable<schemas.categoryschema.ContainsPage>(this, schemas.categoryschema.ContainsPage.class, direction);
	}
}
