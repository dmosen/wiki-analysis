/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class PageImpl extends VertexImpl implements schemas.categoryschema.Page, de.uni_koblenz.jgralab.Vertex {

	protected java.lang.String _title;

	public PageImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return schemas.categoryschema.Page.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return schemas.categoryschema.Page.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("title")) return (T) get_title();
		throw new NoSuchAttributeException("Page doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("title")) {
			set_title((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Page doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_title() {
		return _title;
	}

	public void set_title(java.lang.String _title) {
		ecaAttributeChanging("title", this._title, _title);
		Object oldValue = this._title;
		this._title = _title;
		graphModified();
	ecaAttributeChanged("title", oldValue, _title);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_title = io.matchUtfString();
		set_title(_title);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_title = io.matchUtfString();
			set_title(_title);
			return;
		}
		throw new NoSuchAttributeException("Page doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_title);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_title);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Page doesn't contain an attribute " + attributeName);
	}

	@Override
	public schemas.categoryschema.Page getNextPage() {
		return (schemas.categoryschema.Page)getNextVertex(schemas.categoryschema.Page.class);
	}

	@Override
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence() {
		return (schemas.categoryschema.ContainsPage)getFirstIncidence(schemas.categoryschema.ContainsPage.class);
	}

	@Override
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence(EdgeDirection orientation) {
		return (schemas.categoryschema.ContainsPage)getFirstIncidence(schemas.categoryschema.ContainsPage.class, orientation);
	}
		@Override
		public schemas.categoryschema.ContainsPage add_category(schemas.categoryschema.Category vertex) {
			return ((schemas.categoryschema.CategoryGraph)getGraph()).createEdge(schemas.categoryschema.ContainsPage.EC, (schemas.categoryschema.Category) vertex, (schemas.categoryschema.Page) this);
		}
		@Override
		public java.util.List<? extends schemas.categoryschema.Category> remove_category() {
			java.util.List<schemas.categoryschema.Category> adjacences = new java.util.ArrayList<schemas.categoryschema.Category>();
			schemas.categoryschema.ContainsPage edge = (schemas.categoryschema.ContainsPage) getFirstIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.IN);
			while (edge != null) {
				schemas.categoryschema.ContainsPage next = (schemas.categoryschema.ContainsPage) edge.getNextIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.IN);
				adjacences.add((schemas.categoryschema.Category) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_category(schemas.categoryschema.Category vertex) {
			boolean elementRemoved = false;
			schemas.categoryschema.ContainsPage edge = (schemas.categoryschema.ContainsPage) getFirstIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.IN);
			while (edge != null) {
				schemas.categoryschema.ContainsPage next = (schemas.categoryschema.ContainsPage) edge.getNextIncidence(schemas.categoryschema.ContainsPage.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends schemas.categoryschema.Category> get_category() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<schemas.categoryschema.ContainsPage, schemas.categoryschema.Category>(this, schemas.categoryschema.ContainsPage.class, EdgeDirection.IN);
		}

	@Override
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences() {
		return new IncidenceIterable<schemas.categoryschema.ContainsPage>(this, schemas.categoryschema.ContainsPage.class);
	}
	
	@Override
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences(EdgeDirection direction) {
		return new IncidenceIterable<schemas.categoryschema.ContainsPage>(this, schemas.categoryschema.ContainsPage.class, direction);
	}
}
