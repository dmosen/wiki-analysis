/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class CategoryGraphImpl extends GraphImpl implements schemas.categoryschema.CategoryGraph, de.uni_koblenz.jgralab.Graph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CategoryGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CategoryGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CategoryGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, schemas.categoryschema.CategoryGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CategoryGraphImpl(java.lang.String id) {
		super(id, schemas.categoryschema.CategoryGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return schemas.categoryschema.CategoryGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return schemas.categoryschema.CategoryGraph.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("CategoryGraph doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("CategoryGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("CategoryGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("CategoryGraph doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for Category ------------------------

	public schemas.categoryschema.Category getFirstCategory() {
		return (schemas.categoryschema.Category)getFirstVertex(schemas.categoryschema.Category.VC);
	}

	public schemas.categoryschema.Category createCategory() {
		return graphFactory.<schemas.categoryschema.Category> createVertex(schemas.categoryschema.Category.VC, 0, this);
	}

	public schemas.categoryschema.Category createCategory(int id) {
		return graphFactory.<schemas.categoryschema.Category> createVertex(schemas.categoryschema.Category.VC, id, this);
	}

	// ------------------------ Code for ContainsPage ------------------------

	public schemas.categoryschema.ContainsPage getFirstContainsPage() {
		return (schemas.categoryschema.ContainsPage)getFirstEdge(schemas.categoryschema.ContainsPage.EC);
	}

	public schemas.categoryschema.ContainsPage createContainsPage(schemas.categoryschema.Category alpha, schemas.categoryschema.Page omega) {
		return graphFactory.<schemas.categoryschema.ContainsPage> createEdge(schemas.categoryschema.ContainsPage.EC, 0, this, alpha, omega);
	}

	public schemas.categoryschema.ContainsPage createContainsPage(int id, schemas.categoryschema.Category alpha, schemas.categoryschema.Page omega) {
		return graphFactory.<schemas.categoryschema.ContainsPage> createEdge(schemas.categoryschema.ContainsPage.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Page ------------------------

	public schemas.categoryschema.Page getFirstPage() {
		return (schemas.categoryschema.Page)getFirstVertex(schemas.categoryschema.Page.VC);
	}

	public schemas.categoryschema.Page createPage() {
		return graphFactory.<schemas.categoryschema.Page> createVertex(schemas.categoryschema.Page.VC, 0, this);
	}

	public schemas.categoryschema.Page createPage(int id) {
		return graphFactory.<schemas.categoryschema.Page> createVertex(schemas.categoryschema.Page.VC, id, this);
	}

	// ------------------------ Code for Subcategory ------------------------

	public schemas.categoryschema.Subcategory getFirstSubcategory() {
		return (schemas.categoryschema.Subcategory)getFirstEdge(schemas.categoryschema.Subcategory.EC);
	}

	public schemas.categoryschema.Subcategory createSubcategory(schemas.categoryschema.Category alpha, schemas.categoryschema.Category omega) {
		return graphFactory.<schemas.categoryschema.Subcategory> createEdge(schemas.categoryschema.Subcategory.EC, 0, this, alpha, omega);
	}

	public schemas.categoryschema.Subcategory createSubcategory(int id, schemas.categoryschema.Category alpha, schemas.categoryschema.Category omega) {
		return graphFactory.<schemas.categoryschema.Subcategory> createEdge(schemas.categoryschema.Subcategory.EC, id, this, alpha, omega);
	}

	public Iterable<schemas.categoryschema.Subcategory> getSubcategoryEdges() {
		return new EdgeIterable<schemas.categoryschema.Subcategory>(this, schemas.categoryschema.Subcategory.class);
	}
	

	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageEdges() {
		return new EdgeIterable<schemas.categoryschema.ContainsPage>(this, schemas.categoryschema.ContainsPage.class);
	}
	

	public Iterable<schemas.categoryschema.Category> getCategoryVertices() {
		return new VertexIterable<schemas.categoryschema.Category>(this, schemas.categoryschema.Category.class);
	}
	

	public Iterable<schemas.categoryschema.Page> getPageVertices() {
		return new VertexIterable<schemas.categoryschema.Page>(this, schemas.categoryschema.Page.class);
	}
	
}
