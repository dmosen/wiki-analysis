/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package schemas.categoryschema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Page extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = schemas.categoryschema.CategorySchema.instance().vc_Page;

	public java.lang.String get_title();

	public void set_title(java.lang.String _title);

	/**
	 * @return the next schemas.categoryschema.Page vertex in the global vertex sequence
	 */
	public schemas.categoryschema.Page getNextPage();

	/**
	 * @return the first edge of class ContainsPage at this vertex
	 */
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence();

	/**
	 * @return the first edge of class ContainsPage at this vertex
	 * @param orientation the orientation of the edge
	 */
	public schemas.categoryschema.ContainsPage getFirstContainsPageIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>category</code> to this vertex, i.e. creates an
		 * <code>schemas.categoryschema.ContainsPage</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>schemas.categoryschema.ContainsPage</code>
		 *          between this vertex and the given one.
		 */
		public schemas.categoryschema.ContainsPage add_category(schemas.categoryschema.Category vertex);
		/**
		 * removes all category adjacences to all vertices by 
		 * deleting the <code>schemas.categoryschema.ContainsPage</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends schemas.categoryschema.Category> remove_category();
		/**
		 * removes the given vertex as <code>category</code> from this vertex, i.e. 
		 * deletes the <code>schemas.categoryschema.ContainsPage</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_category(schemas.categoryschema.Category vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'category'
		 *         (connected with a <code>schemas.categoryschema.ContainsPage</code> edge).
		 */
		public Iterable<? extends schemas.categoryschema.Category> get_category();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsPage or subtypes.
	 */
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsPage.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<schemas.categoryschema.ContainsPage> getContainsPageIncidences(EdgeDirection direction);
}
