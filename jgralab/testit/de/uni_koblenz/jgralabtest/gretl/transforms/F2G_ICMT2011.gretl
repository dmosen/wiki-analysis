transformation FamilyGraph2Genealogy;

// VERTEX CLASSES

CreateAbstractVertexClass Person;

CreateVertexClass Female
<== from m: V{Member}
    with degree{HasMother, HasDaughter}(m) > 0
    reportSet m end;

CreateVertexClass Male
<== difference(V{Member}, keySet(img_Female));

CreateVertexClass Address
<== from f: V{Family} reportSet f.street, f.town end;

// EDGE CLASSES

CreateAbstractEdgeClass HasRelative from Person to Person;

CreateEdgeClass HasSpouse from Male   (0,1) role husband
                          to   Female (0,1) role wife
<== from f: V{Family} reportSet f,
      theElement(f<>--{HasFather}),
      theElement(f<>--{HasMother}) end;

CreateEdgeClass HasChild from Person (0,2) role parents
                         to   Person (0,*) role children
<== from e: E{HasDaughter, HasSon},
         par: startVertex(e)<>--{HasFather, HasMother}
    reportSet tup(endVertex(e), par), par, endVertex(e) end;

getMainFamily() := using member:
  (degree{HasFather, HasMother}(member) > 0 ?
    theElement(member --<>{HasFather, HasMother}) :
    theElement(member --<>));

getAddressTuple() := using member:
  let f := getMainFamily(member) in tup(f.street, f.town);

CreateEdgeClass LivesAt from Person (0,*) to Address (1,1)
<== from m: keySet(img_Person)
    reportSet m, m, getAddressTuple(m) end;

// TYPE HIERARCHIES

AddSubClasses Person Male Female;
AddSubClasses HasRelative HasChild HasSpouse;

// ATTRIBUTES

CreateAttribute Person.fullName : String
<== from m: keySet(img_Person)
    reportMap m -> m.firstName ++ " " ++ getMainFamily(m).lastName end;

CreateEnumDomain AgeGroup(CHILD, ADULT);

// We set only the children vals, and use ADULT as default.
CreateAttribute Person.ageGroup : AgeGroup = "ADULT"
<== from m: keySet(img_Person)
    with m.age < 18
    reportMap m -> "CHILD" end;

CreateAttributes Address.street : String, Address.town : String
<== from t: keySet(img_Address) reportMap t -> t end;

// EXTENSIONS

// Geschwister
CreateEdgeClass HasSibling from Person to Person
<== from m1, m2: V{Member}
    with id(m1) < id(m2) and m1 <--{HasSon, HasDaughter} -->{HasSon, HasDaughter} m2
    reportSet set(m1, m2), m1, m2 end;
    
	// "horn" mathematics... replaced by id check above which only results in correct tuples ;)
    // We do not want to consider any order, so wrap it in sets.
    //reportSet set(set(m1, m2), m1, m2) end;

AddSuperClass HasSibling HasRelative;

// Schw√§gerschaft
CreateEdgeClass HasAffinity from Person to Person
<== #target# from p, a: V{Person}, s: p <->{HasSpouse}
    with s <--{HasChild}+ -->{HasChild}* a
      and not(s -->{HasChild}* a)
    reportSet tup(p, a), arch_Person[p], arch_Person[a] end;

CreateAttribute HasAffinity.degree : Integer
<== #target# from p, a: V{Person}, s: p <->{HasSpouse}
    with p -->{HasAffinity} a
    reportMap tup(p, a) ->
      distance(pathSystem(s, <--{HasChild}+ -->{HasChild}*), a) end;
