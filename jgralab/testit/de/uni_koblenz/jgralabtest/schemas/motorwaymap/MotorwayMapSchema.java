/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.motorwaymap;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.RecordDomain;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema MotorwayMapSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class MotorwayMapSchema extends SchemaImpl {
	public final GraphClass gc_MotorwayMap;
	public final VertexClass vc_Motorway;
	public final VertexClass vc_City;
	public final VertexClass vc_StoppingPlace;
	public final VertexClass vc_MotorwayStation;
	public final VertexClass vc_MotorwayRestaurant;
	public final EdgeClass ec_Offers;
	public final EdgeClass ec_Exit;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<MotorwayMapSchema> theInstance = new WeakReference<MotorwayMapSchema>(null);
	
	/**
	 * @return the singleton instance of MotorwayMapSchema
	 */
	public static MotorwayMapSchema instance() {
		MotorwayMapSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (MotorwayMapSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new MotorwayMapSchema();
			theInstance = new WeakReference<MotorwayMapSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a MotorwayMapSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private MotorwayMapSchema() {
		super("MotorwayMapSchema", "de.uni_koblenz.jgralabtest.schemas.motorwaymap");

		{
			EnumDomain dom = createEnumDomain("TestEnum");
			dom.addConst("Test1");
			dom.addConst("Test2");
			dom.addConst("Test3");
		}

		createMapDomain(getDomain("String"), getDomain("String"));

		createListDomain(getDomain("String"));

		createSetDomain(getDomain("String"));

		{
			RecordDomain dom = createRecordDomain("TestRecord");
			dom.addComponent("c1", getDomain("String"));
			dom.addComponent("c2", getDomain("List<String>"));
			dom.addComponent("c4", getDomain("Set<String>"));
			dom.addComponent("c6", getDomain("Integer"));
			dom.addComponent("c7", getDomain("Double"));
			dom.addComponent("c8", getDomain("Long"));
			dom.addComponent("c9", getDomain("Boolean"));
		}

		createListDomain(getDomain("TestRecord"));

		{
			GraphClass gc = gc_MotorwayMap = createGraphClass("MotorwayMap");
			gc.setAbstract(false);
			gc.addAttribute(createAttribute("test", getDomain("String"), getAttributedElementClass("MotorwayMap"), null));
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_Motorway = gc.createVertexClass("Motorway");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("length", getDomain("Double"), getAttributedElementClass("Motorway"), null));
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Motorway"), null));
			}

			{
				VertexClass vc = vc_City = gc.createVertexClass("City");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("City"), null));
				vc.addAttribute(createAttribute("testEnum", getDomain("TestEnum"), getAttributedElementClass("City"), null));
				vc.addAttribute(createAttribute("testList", getDomain("List<TestRecord>"), getAttributedElementClass("City"), null));
				vc.addAttribute(createAttribute("testMap", getDomain("Map<String, String>"), getAttributedElementClass("City"), null));
				vc.addAttribute(createAttribute("testRecord", getDomain("TestRecord"), getAttributedElementClass("City"), null));
				vc.addAttribute(createAttribute("testSet", getDomain("Set<String>"), getAttributedElementClass("City"), null));
			}

			{
				VertexClass vc = vc_StoppingPlace = gc.createVertexClass("StoppingPlace");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("StoppingPlace"), null));
			}

			{
				VertexClass vc = vc_MotorwayStation = gc.createVertexClass("MotorwayStation");
				vc.setAbstract(false);
				vc.addSuperClass(vc_StoppingPlace);
			}

			{
				VertexClass vc = vc_MotorwayRestaurant = gc.createVertexClass("MotorwayRestaurant");
				vc.setAbstract(false);
				vc.addSuperClass(vc_StoppingPlace);
			}

			{
				EdgeClass ec = ec_Offers = gc.createEdgeClass("Offers",
					vc_Motorway, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE,
					vc_StoppingPlace, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_Exit = gc.createEdgeClass("Exit",
					vc_City, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Motorway, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("number", getDomain("Integer"), getAttributedElementClass("Exit"), null));
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.std.MotorwayMapFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.trans.MotorwayMapFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.db.MotorwayMapFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new MotorwayMap graph.
	*/
	public MotorwayMap createMotorwayMap(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createMotorwayMap(implType, null, 100, 100);
	}

	/**
	 * Creates a new MotorwayMap graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public MotorwayMap createMotorwayMap(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_MotorwayMap, id, vMax, eMax);
	}

	/**
	 * Creates a new MotorwayMap graph.
	*/
	public MotorwayMap createMotorwayMap(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_MotorwayMap, null, 100, 100);
	}

	/**
	 * Creates a new MotorwayMap graph.
	*/
	public MotorwayMap createMotorwayMap(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_MotorwayMap, id, vMax, eMax);
	}

	/**
	 * Creates a new MotorwayMap graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public MotorwayMap createMotorwayMap(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createMotorwayMap(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new MotorwayMap graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public MotorwayMap createMotorwayMap(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		MotorwayMap graph = graphFactory.createGraph(gc_MotorwayMap, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public MotorwayMap loadMotorwayMap(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadMotorwayMap(filename, factory, null);
	}

	public MotorwayMap loadMotorwayMap(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadMotorwayMap(filename, factory, pf);
	}

	public MotorwayMap loadMotorwayMap(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadMotorwayMap(filename, factory, null);
	}

	
	public MotorwayMap loadMotorwayMap(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadMotorwayMap(filename, factory, pf);
	}

	public MotorwayMap loadMotorwayMap(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public MotorwayMap loadMotorwayMap(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
