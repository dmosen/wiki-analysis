/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.trans;

import de.uni_koblenz.jgralab.impl.trans.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.trans.ReversedExitImpl;

import de.uni_koblenz.jgralabtest.schemas.motorwaymap.City;
import de.uni_koblenz.jgralabtest.schemas.motorwaymap.Motorway;

import java.io.IOException;
/**
 * FromVertexClass: City
 * FromRoleName : 
 * ToVertexClass: Motorway
 * ToRoleName : 
 */

public class ExitImpl extends EdgeImpl implements de.uni_koblenz.jgralab.Edge, de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _number;

	public ExitImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("number")) return (T) (java.lang.Integer) get_number();
		throw new NoSuchAttributeException("Exit doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("number")) {
			set_number((java.lang.Integer) data);
			return;
		}
		throw new NoSuchAttributeException("Exit doesn't contain an attribute " + attributeName);
	}

	public int get_number() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'number', because " + this + " isn't valid in current transaction.");
		if (_number == null)
			return 0;
		java.lang.Integer value = _number.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_number(int _number) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'number', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._number = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _number, "number");
		}
		if (this._number == null) {
			this._number = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "number");
		}
		this._number.setValidValue((java.lang.Integer) _number, graph.getCurrentTransaction());
		attributeChanged(this._number);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		int _number = io.matchInteger();
		set_number(_number);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("number")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_number(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("Exit doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeInteger(get_number());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("number")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_number());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Exit doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_number);
		return attributes;
	}

	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit getNextExitInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit)getNextEdge(de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit getNextExitIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit getNextExitIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.motorwaymap.Exit.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.SHARED;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.SHARED;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedExitImpl(this, graph);
	}
	public City getAlpha() {
		return (City) super.getAlpha();
	}
	public Motorway getOmega() {
		return (Motorway) super.getOmega();
	}
}
