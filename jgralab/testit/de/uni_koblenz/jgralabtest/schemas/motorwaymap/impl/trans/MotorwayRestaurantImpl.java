/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.motorwaymap.impl.trans;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.trans.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class MotorwayRestaurantImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant, de.uni_koblenz.jgralabtest.schemas.motorwaymap.StoppingPlace {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _name;

	public MotorwayRestaurantImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		throw new NoSuchAttributeException("MotorwayRestaurant doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("MotorwayRestaurant doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (_name == null)
			return null;
		java.lang.String value = _name.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_name(java.lang.String _name) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _name, "name");
		}
		if (this._name == null) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "name");
		}
		this._name.setValidValue((java.lang.String) _name, graph.getCurrentTransaction());
		attributeChanged(this._name);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		java.lang.String _name = io.matchUtfString();
		set_name(_name);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_name(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("MotorwayRestaurant doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(get_name());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_name());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("MotorwayRestaurant doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_name);
		return attributes;
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant getNextMotorwayRestaurant() {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant)getNextVertex(de.uni_koblenz.jgralabtest.schemas.motorwaymap.MotorwayRestaurant.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.StoppingPlace getNextStoppingPlace() {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.StoppingPlace)getNextVertex(de.uni_koblenz.jgralabtest.schemas.motorwaymap.StoppingPlace.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers getFirstOffersIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers getFirstOffersIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers> getOffersIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers>(this, de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers> getOffersIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers>(this, de.uni_koblenz.jgralabtest.schemas.motorwaymap.Offers.class, direction);
	}
}
