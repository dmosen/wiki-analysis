/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.commenttest1.impl.db.p;

import de.uni_koblenz.jgralab.impl.db.VertexImpl;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class VImpl extends VertexImpl implements de.uni_koblenz.jgralab.Vertex, de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V {

	public VImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("p.V doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("p.V doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("p.V doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("p.V doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V getNextV() {
		return (de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V)getNextVertex(de.uni_koblenz.jgralabtest.schemas.commenttest1.p.V.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E getFirstEIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E getFirstEIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E> getEIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E>(this, de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E> getEIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E>(this, de.uni_koblenz.jgralabtest.schemas.commenttest1.p.E.class, direction);
	}
}
