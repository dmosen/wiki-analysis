/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.commenttest1;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Rd implements de.uni_koblenz.jgralab.Record {
	private static List<String> componentNames = new ArrayList<String>(2);

	static {
		componentNames.add("i");
		componentNames.add("s");
		componentNames = Collections.unmodifiableList(componentNames);
	}

	@Override
	public List<String> getComponentNames() {
		return componentNames;
	}

	@Override
	public boolean hasComponent(String name) {
		return componentNames.contains(name);
	}

	@Override
public int size() {
	return 2;
}

	private final org.pcollections.PVector<java.lang.Integer> _i;

	private final java.lang.String _s;

	public Rd(org.pcollections.PVector<java.lang.Integer> _i, java.lang.String _s) {
		this._i = _i;
		this._s = _s;
	}
	
	@SuppressWarnings("unchecked")
	public Rd(java.util.Map<String, Object> componentValues) {
		assert componentValues.size() == 2;
		assert componentValues.containsKey("i");
		_i = (org.pcollections.PVector<java.lang.Integer>)componentValues.get("i");
		assert componentValues.containsKey("s");
		_s = (java.lang.String)componentValues.get("s");
	}

	public Rd(GraphIO io) throws GraphIOException {
		io.match("(");
		
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Integer> $_i = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				int $_iElement;
				$_iElement = io.matchInteger();
				$_i = $_i.plus($_iElement);
			}
			io.match("]");
			_i = $_i;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_i = null;
		} else {
			_i = null;
		}
		_s = io.matchUtfString();
		io.match(")");
	}

	public org.pcollections.PVector<java.lang.Integer> get_i() {
		return _i;
	}

	public java.lang.String get_s() {
		return _s;
	}

	@Override
	public Object getComponent(String name) {
		if (name.equals("i")) {
			return _i;
		}
		if (name.equals("s")) {
			return _s;
		}
		throw new NoSuchAttributeException("Rd doesn't contain an attribute " + name);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		String iString;
		if (_i == null) iString = "null";
		else iString = _i.toString();
		sb.append("[").append("i").append("=").append(iString);
		String sString;
		if (_s == null) sString = "null";
		else sString = String.valueOf(_s);;
		sb.append(", ").append("s").append("=").append(sString);
		return sb.append("]").toString();
	}

	@Override
	public void writeComponentValues(GraphIO io) throws IOException, GraphIOException {
		io.writeSpace();
		io.write("(");
		io.noSpace();
		if (_i != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (int _iElement : _i) {
				io.writeInteger(_iElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(_s);
		io.write(")");
	}
	public org.pcollections.PMap<String, Object> toPMap() {
		org.pcollections.PMap<String, Object> m = de.uni_koblenz.jgralab.JGraLab.map();
		m = m.plus("i", _i);
		m = m.plus("s", _s);
		return m;
	}

	@Override
	public boolean equals(Object o) {
		if (o == null) {
			return false;
		}
		if (o instanceof Rd) {
			Rd rec = (Rd) o;
			if (!(_i.equals(rec._i))) {
				return false;
				}
			if (!(_s.equals(rec._s))) {
				return false;
				}
			return true;
		}
		if (o instanceof de.uni_koblenz.jgralab.Record) {
			de.uni_koblenz.jgralab.Record rec = (de.uni_koblenz.jgralab.Record) o;
			if (rec.size() != 2) {
				return false;
			}
			try {
				if (!rec.getComponent("i").equals(_i)) {
					return false;
				}
				if (!rec.getComponent("s").equals(_s)) {
					return false;
				}
				return true;
			} catch (NoSuchAttributeException e) {
				return false;
			}
		}
		return false;
	}

	@Override
	public int hashCode() {
		int h = 0;
		h += _i.hashCode();
		h += _s.hashCode();
		return h;
	}
}
