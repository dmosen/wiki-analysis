/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.commenttest;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.RecordDomain;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema CommentTestSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class CommentTestSchema extends SchemaImpl {
	public final GraphClass gc_CommentTestGraph;
	public final VertexClass vc_pa_V;
	public final VertexClass vc_pa_pc_W;
	public final EdgeClass ec_pa_E;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<CommentTestSchema> theInstance = new WeakReference<CommentTestSchema>(null);
	
	/**
	 * @return the singleton instance of CommentTestSchema
	 */
	public static CommentTestSchema instance() {
		CommentTestSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (CommentTestSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new CommentTestSchema();
			theInstance = new WeakReference<CommentTestSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a CommentTestSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private CommentTestSchema() {
		super("CommentTestSchema", "de.uni_koblenz.jgralabtest.schemas.commenttest");

		{
			EnumDomain dom = createEnumDomain("En");
			dom.addConst("A");
			dom.addConst("B");
			dom.addComment("A simple enumeration");
		}

		{
			RecordDomain dom = createRecordDomain("Rd");
			dom.addComponent("x", getDomain("Integer"));
			dom.addComponent("y", getDomain("Integer"));
			dom.addComment("A comment for Rd");
			dom.addComment("A second comment for Rd");
		}

		{
			GraphClass gc = gc_CommentTestGraph = createGraphClass("CommentTestGraph");
			gc.setAbstract(false);
			gc.addComment("Comment for graphclass");
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_pa_V = gc.createVertexClass("pa.V");
				vc.setAbstract(false);
				vc.addComment("VertexClass comment");
			}

			{
				VertexClass vc = vc_pa_pc_W = gc.createVertexClass("pa.pc.W");
				vc.setAbstract(false);
			}

			{
				EdgeClass ec = ec_pa_E = gc.createEdgeClass("pa.E",
					vc_pa_V, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_pa_V, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addComment("EdgeClass comment");
			}
		}

		{
			getPackage("pa").addComment("A comment for package 'pa'");
			getPackage("pa.pc").addComment("A comment for package 'pc'");
			getPackage("pa.pc").addComment("2nd comment for pc");
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.commenttest.impl.std.CommentTestGraphFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.commenttest.impl.trans.CommentTestGraphFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.commenttest.impl.db.CommentTestGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new CommentTestGraph graph.
	*/
	public CommentTestGraph createCommentTestGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createCommentTestGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new CommentTestGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public CommentTestGraph createCommentTestGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_CommentTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new CommentTestGraph graph.
	*/
	public CommentTestGraph createCommentTestGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_CommentTestGraph, null, 100, 100);
	}

	/**
	 * Creates a new CommentTestGraph graph.
	*/
	public CommentTestGraph createCommentTestGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_CommentTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new CommentTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public CommentTestGraph createCommentTestGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createCommentTestGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new CommentTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public CommentTestGraph createCommentTestGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		CommentTestGraph graph = graphFactory.createGraph(gc_CommentTestGraph, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public CommentTestGraph loadCommentTestGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadCommentTestGraph(filename, factory, null);
	}

	public CommentTestGraph loadCommentTestGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadCommentTestGraph(filename, factory, pf);
	}

	public CommentTestGraph loadCommentTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadCommentTestGraph(filename, factory, null);
	}

	
	public CommentTestGraph loadCommentTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadCommentTestGraph(filename, factory, pf);
	}

	public CommentTestGraph loadCommentTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public CommentTestGraph loadCommentTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
