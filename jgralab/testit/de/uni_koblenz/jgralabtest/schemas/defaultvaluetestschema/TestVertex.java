/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface TestVertex extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestSchema.instance().vc_TestVertex;

	public boolean is_boolVertex();

	public void set_boolVertex(boolean _boolVertex);

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListVertex();

	public void set_complexListVertex(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListVertex);

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapVertex();

	public void set_complexMapVertex(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapVertex);

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetVertex();

	public void set_complexSetVertex(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetVertex);

	public double get_doubleVertex();

	public void set_doubleVertex(double _doubleVertex);

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumVertex();

	public void set_enumVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumVertex);

	public int get_intVertex();

	public void set_intVertex(int _intVertex);

	public org.pcollections.PVector<java.lang.Boolean> get_listVertex();

	public void set_listVertex(org.pcollections.PVector<java.lang.Boolean> _listVertex);

	public long get_longVertex();

	public void set_longVertex(long _longVertex);

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapVertex();

	public void set_mapVertex(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapVertex);

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordVertex();

	public void set_recordVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordVertex);

	public org.pcollections.PSet<java.lang.Boolean> get_setVertex();

	public void set_setVertex(org.pcollections.PSet<java.lang.Boolean> _setVertex);

	public java.lang.String get_stringVertex();

	public void set_stringVertex(java.lang.String _stringVertex);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getNextTestVertex();

	/**
	 * @return the first edge of class TestEdge at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence();

	/**
	 * @return the first edge of class TestEdge at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>start</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * removes all start adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_start();
		/**
		 * removes the given vertex as <code>start</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'start'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_start();
		/**
		 * adds the given vertex as <code>end</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * removes all end adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_end();
		/**
		 * removes the given vertex as <code>end</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'end'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_end();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TestEdge or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TestEdge.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences(EdgeDirection direction);
}
