/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema;

public interface TestSubVertex extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestSchema.instance().vc_TestSubVertex;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex getNextTestSubVertex();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getNextTestVertex();
		/**
		 * adds the given vertex as <code>start</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * removes all start adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_start();
		/**
		 * removes the given vertex as <code>start</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'start'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_start();
		/**
		 * adds the given vertex as <code>end</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * removes all end adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_end();
		/**
		 * removes the given vertex as <code>end</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'end'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_end();
}
