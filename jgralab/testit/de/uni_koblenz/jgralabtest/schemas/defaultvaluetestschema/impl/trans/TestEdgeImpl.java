/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.trans;

import de.uni_koblenz.jgralab.impl.trans.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.trans.ReversedTestEdgeImpl;

import de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex;

import java.io.IOException;
/**
 * FromVertexClass: TestVertex
 * FromRoleName : start
 * ToVertexClass: TestVertex
 * ToRoleName : end
 */

public class TestEdgeImpl extends EdgeImpl implements de.uni_koblenz.jgralab.Edge, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean> _boolEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>> _complexListEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>> _complexMapEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>> _complexSetEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _doubleEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain> _enumEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _intEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>> _listEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long> _longEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>> _mapEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain> _recordEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>> _setEdge;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _stringEdge;

	public TestEdgeImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("boolEdge")) return (T) (java.lang.Boolean) is_boolEdge();
		if (attributeName.equals("complexListEdge")) return (T) get_complexListEdge();
		if (attributeName.equals("complexMapEdge")) return (T) get_complexMapEdge();
		if (attributeName.equals("complexSetEdge")) return (T) get_complexSetEdge();
		if (attributeName.equals("doubleEdge")) return (T) (java.lang.Double) get_doubleEdge();
		if (attributeName.equals("enumEdge")) return (T) get_enumEdge();
		if (attributeName.equals("intEdge")) return (T) (java.lang.Integer) get_intEdge();
		if (attributeName.equals("listEdge")) return (T) get_listEdge();
		if (attributeName.equals("longEdge")) return (T) (java.lang.Long) get_longEdge();
		if (attributeName.equals("mapEdge")) return (T) get_mapEdge();
		if (attributeName.equals("recordEdge")) return (T) get_recordEdge();
		if (attributeName.equals("setEdge")) return (T) get_setEdge();
		if (attributeName.equals("stringEdge")) return (T) get_stringEdge();
		throw new NoSuchAttributeException("TestEdge doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("boolEdge")) {
			set_boolEdge((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("complexListEdge")) {
			set_complexListEdge((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexMapEdge")) {
			set_complexMapEdge((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexSetEdge")) {
			set_complexSetEdge((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("doubleEdge")) {
			set_doubleEdge((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("enumEdge")) {
			if (data instanceof String) {
				set_enumEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull((String) data));
			} else {
				set_enumEdge((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) data);
			}
			return;
		}
		if (attributeName.equals("intEdge")) {
			set_intEdge((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("listEdge")) {
			set_listEdge((org.pcollections.PVector<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("longEdge")) {
			set_longEdge((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("mapEdge")) {
			set_mapEdge((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("recordEdge")) {
			set_recordEdge((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) data);
			return;
		}
		if (attributeName.equals("setEdge")) {
			set_setEdge((org.pcollections.PSet<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("stringEdge")) {
			set_stringEdge((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("TestEdge doesn't contain an attribute " + attributeName);
	}

	public boolean is_boolEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'boolEdge', because " + this + " isn't valid in current transaction.");
		if (_boolEdge == null)
			return false;
		java.lang.Boolean value = _boolEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? false : value;
	}

	public void set_boolEdge(boolean _boolEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'boolEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._boolEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, _boolEdge, "boolEdge");
		}
		if (this._boolEdge == null) {
			this._boolEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, null, "boolEdge");
		}
		this._boolEdge.setValidValue((java.lang.Boolean) _boolEdge, graph.getCurrentTransaction());
		attributeChanged(this._boolEdge);
		graphModified();
	}

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexListEdge', because " + this + " isn't valid in current transaction.");
		if (_complexListEdge == null)
			return null;
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> value = _complexListEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexListEdge(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexListEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexListEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, _complexListEdge, "complexListEdge");
		}
		if (this._complexListEdge == null) {
			this._complexListEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, null, "complexListEdge");
		}
		this._complexListEdge.setValidValue((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) _complexListEdge, graph.getCurrentTransaction());
		attributeChanged(this._complexListEdge);
		graphModified();
	}

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexMapEdge', because " + this + " isn't valid in current transaction.");
		if (_complexMapEdge == null)
			return null;
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> value = _complexMapEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexMapEdge(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexMapEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexMapEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, _complexMapEdge, "complexMapEdge");
		}
		if (this._complexMapEdge == null) {
			this._complexMapEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexMapEdge");
		}
		this._complexMapEdge.setValidValue((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) _complexMapEdge, graph.getCurrentTransaction());
		attributeChanged(this._complexMapEdge);
		graphModified();
	}

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexSetEdge', because " + this + " isn't valid in current transaction.");
		if (_complexSetEdge == null)
			return null;
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> value = _complexSetEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexSetEdge(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexSetEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexSetEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, _complexSetEdge, "complexSetEdge");
		}
		if (this._complexSetEdge == null) {
			this._complexSetEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexSetEdge");
		}
		this._complexSetEdge.setValidValue((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) _complexSetEdge, graph.getCurrentTransaction());
		attributeChanged(this._complexSetEdge);
		graphModified();
	}

	public double get_doubleEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'doubleEdge', because " + this + " isn't valid in current transaction.");
		if (_doubleEdge == null)
			return 0.0;
		java.lang.Double value = _doubleEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_doubleEdge(double _doubleEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'doubleEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._doubleEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _doubleEdge, "doubleEdge");
		}
		if (this._doubleEdge == null) {
			this._doubleEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "doubleEdge");
		}
		this._doubleEdge.setValidValue((java.lang.Double) _doubleEdge, graph.getCurrentTransaction());
		attributeChanged(this._doubleEdge);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'enumEdge', because " + this + " isn't valid in current transaction.");
		if (_enumEdge == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain value = _enumEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_enumEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'enumEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._enumEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, _enumEdge, "enumEdge");
		}
		if (this._enumEdge == null) {
			this._enumEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, null, "enumEdge");
		}
		this._enumEdge.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) _enumEdge, graph.getCurrentTransaction());
		attributeChanged(this._enumEdge);
		graphModified();
	}

	public int get_intEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'intEdge', because " + this + " isn't valid in current transaction.");
		if (_intEdge == null)
			return 0;
		java.lang.Integer value = _intEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_intEdge(int _intEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'intEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._intEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _intEdge, "intEdge");
		}
		if (this._intEdge == null) {
			this._intEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "intEdge");
		}
		this._intEdge.setValidValue((java.lang.Integer) _intEdge, graph.getCurrentTransaction());
		attributeChanged(this._intEdge);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Boolean> get_listEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'listEdge', because " + this + " isn't valid in current transaction.");
		if (_listEdge == null)
			return null;
		org.pcollections.PVector<java.lang.Boolean> value = _listEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_listEdge(org.pcollections.PVector<java.lang.Boolean> _listEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'listEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._listEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, _listEdge, "listEdge");
		}
		if (this._listEdge == null) {
			this._listEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, null, "listEdge");
		}
		this._listEdge.setValidValue((org.pcollections.PVector<java.lang.Boolean>) _listEdge, graph.getCurrentTransaction());
		attributeChanged(this._listEdge);
		graphModified();
	}

	public long get_longEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'longEdge', because " + this + " isn't valid in current transaction.");
		if (_longEdge == null)
			return 0L;
		java.lang.Long value = _longEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0L : value;
	}

	public void set_longEdge(long _longEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'longEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._longEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, _longEdge, "longEdge");
		}
		if (this._longEdge == null) {
			this._longEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, null, "longEdge");
		}
		this._longEdge.setValidValue((java.lang.Long) _longEdge, graph.getCurrentTransaction());
		attributeChanged(this._longEdge);
		graphModified();
	}

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'mapEdge', because " + this + " isn't valid in current transaction.");
		if (_mapEdge == null)
			return null;
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> value = _mapEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_mapEdge(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'mapEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._mapEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, _mapEdge, "mapEdge");
		}
		if (this._mapEdge == null) {
			this._mapEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, null, "mapEdge");
		}
		this._mapEdge.setValidValue((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) _mapEdge, graph.getCurrentTransaction());
		attributeChanged(this._mapEdge);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'recordEdge', because " + this + " isn't valid in current transaction.");
		if (_recordEdge == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain value = _recordEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_recordEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'recordEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._recordEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, _recordEdge, "recordEdge");
		}
		if (this._recordEdge == null) {
			this._recordEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, null, "recordEdge");
		}
		this._recordEdge.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) _recordEdge, graph.getCurrentTransaction());
		attributeChanged(this._recordEdge);
		graphModified();
	}

	public org.pcollections.PSet<java.lang.Boolean> get_setEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'setEdge', because " + this + " isn't valid in current transaction.");
		if (_setEdge == null)
			return null;
		org.pcollections.PSet<java.lang.Boolean> value = _setEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_setEdge(org.pcollections.PSet<java.lang.Boolean> _setEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'setEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._setEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, _setEdge, "setEdge");
		}
		if (this._setEdge == null) {
			this._setEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, null, "setEdge");
		}
		this._setEdge.setValidValue((org.pcollections.PSet<java.lang.Boolean>) _setEdge, graph.getCurrentTransaction());
		attributeChanged(this._setEdge);
		graphModified();
	}

	public java.lang.String get_stringEdge() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'stringEdge', because " + this + " isn't valid in current transaction.");
		if (_stringEdge == null)
			return null;
		java.lang.String value = _stringEdge.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_stringEdge(java.lang.String _stringEdge) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'stringEdge', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._stringEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _stringEdge, "stringEdge");
		}
		if (this._stringEdge == null) {
			this._stringEdge = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "stringEdge");
		}
		this._stringEdge.setValidValue((java.lang.String) _stringEdge, graph.getCurrentTransaction());
		attributeChanged(this._stringEdge);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		boolean _boolEdge = io.matchBoolean();
		set_boolEdge(_boolEdge);
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListEdge = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListEdge = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				org.pcollections.PVector<java.lang.Boolean> $_complexListEdgeElement = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $$_complexListEdgeElement = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $$_complexListEdgeElementElement;
						$$_complexListEdgeElementElement = io.matchBoolean();
						$$_complexListEdgeElement = $$_complexListEdgeElement.plus($$_complexListEdgeElementElement);
					}
					io.match("]");
					$_complexListEdgeElement = $$_complexListEdgeElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					$_complexListEdgeElement = null;
				} else {
					$_complexListEdgeElement = null;
				}
				$_complexListEdge = $_complexListEdge.plus($_complexListEdgeElement);
			}
			io.match("]");
			_complexListEdge = $_complexListEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_complexListEdge = null;
		} else {
			_complexListEdge = null;
		}
		set_complexListEdge(_complexListEdge);
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapEdge = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapEdge = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PVector<java.lang.Boolean> _complexMapEdgeKey = null;
					org.pcollections.PSet<java.lang.Boolean> _complexMapEdgeValue = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexMapEdgeKey = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $_complexMapEdgeKeyElement;
						$_complexMapEdgeKeyElement = io.matchBoolean();
						$_complexMapEdgeKey = $_complexMapEdgeKey.plus($_complexMapEdgeKeyElement);
					}
					io.match("]");
					_complexMapEdgeKey = $_complexMapEdgeKey;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					_complexMapEdgeKey = null;
				} else {
					_complexMapEdgeKey = null;
				}
				io.match("-");
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexMapEdgeValue = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $_complexMapEdgeValueElement;
						$_complexMapEdgeValueElement = io.matchBoolean();
						$_complexMapEdgeValue = $_complexMapEdgeValue.plus($_complexMapEdgeValueElement);
					}
					io.match("}");
					_complexMapEdgeValue = $_complexMapEdgeValue;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					_complexMapEdgeValue = null;
				} else {
					_complexMapEdgeValue = null;
				}
				$_complexMapEdge = $_complexMapEdge.plus(_complexMapEdgeKey, _complexMapEdgeValue);
			}
			io.match("}");
			_complexMapEdge = $_complexMapEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexMapEdge = null;
		} else {
			_complexMapEdge = null;
		}
		set_complexMapEdge(_complexMapEdge);
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetEdge = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetEdge = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PSet<java.lang.Boolean> $_complexSetEdgeElement = null;
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $$_complexSetEdgeElement = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $$_complexSetEdgeElementElement;
						$$_complexSetEdgeElementElement = io.matchBoolean();
						$$_complexSetEdgeElement = $$_complexSetEdgeElement.plus($$_complexSetEdgeElementElement);
					}
					io.match("}");
					$_complexSetEdgeElement = $$_complexSetEdgeElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					$_complexSetEdgeElement = null;
				} else {
					$_complexSetEdgeElement = null;
				}
				$_complexSetEdge = $_complexSetEdge.plus($_complexSetEdgeElement);
			}
			io.match("}");
			_complexSetEdge = $_complexSetEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexSetEdge = null;
		} else {
			_complexSetEdge = null;
		}
		set_complexSetEdge(_complexSetEdge);
		double _doubleEdge = io.matchDouble();
		set_doubleEdge(_doubleEdge);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumEdge = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
		set_enumEdge(_enumEdge);
		int _intEdge = io.matchInteger();
		set_intEdge(_intEdge);
		org.pcollections.PVector<java.lang.Boolean> _listEdge = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Boolean> $_listEdge = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				boolean $_listEdgeElement;
				$_listEdgeElement = io.matchBoolean();
				$_listEdge = $_listEdge.plus($_listEdgeElement);
			}
			io.match("]");
			_listEdge = $_listEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_listEdge = null;
		} else {
			_listEdge = null;
		}
		set_listEdge(_listEdge);
		long _longEdge = io.matchLong();
		set_longEdge(_longEdge);
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapEdge = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapEdge = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				int _mapEdgeKey;
					boolean _mapEdgeValue;
				_mapEdgeKey = io.matchInteger();
				io.match("-");
				_mapEdgeValue = io.matchBoolean();
				$_mapEdge = $_mapEdge.plus(_mapEdgeKey, _mapEdgeValue);
			}
			io.match("}");
			_mapEdge = $_mapEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_mapEdge = null;
		} else {
			_mapEdge = null;
		}
		set_mapEdge(_mapEdge);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordEdge = null;
		if (io.isNextToken("(")) {
			_recordEdge = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_recordEdge = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_recordEdge(_recordEdge);
		org.pcollections.PSet<java.lang.Boolean> _setEdge = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<java.lang.Boolean> $_setEdge = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				boolean $_setEdgeElement;
				$_setEdgeElement = io.matchBoolean();
				$_setEdge = $_setEdge.plus($_setEdgeElement);
			}
			io.match("}");
			_setEdge = $_setEdge;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_setEdge = null;
		} else {
			_setEdge = null;
		}
		set_setEdge(_setEdge);
		java.lang.String _stringEdge = io.matchUtfString();
		set_stringEdge(_stringEdge);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("boolEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Boolean tmpVar = null;
			tmpVar = io.matchBoolean();
			set_boolEdge(tmpVar);
			return;
		}
		if (attributeName.equals("complexListEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					org.pcollections.PVector<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("]");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexListEdge(tmpVar);
			return;
		}
		if (attributeName.equals("complexMapEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PVector<java.lang.Boolean> tmpVarKey = null;
						org.pcollections.PSet<java.lang.Boolean> tmpVarValue = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $tmpVarKey = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $tmpVarKeyElement;
							$tmpVarKeyElement = io.matchBoolean();
							$tmpVarKey = $tmpVarKey.plus($tmpVarKeyElement);
						}
						io.match("]");
						tmpVarKey = $tmpVarKey;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						tmpVarKey = null;
					} else {
						tmpVarKey = null;
					}
					io.match("-");
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $tmpVarValue = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $tmpVarValueElement;
							$tmpVarValueElement = io.matchBoolean();
							$tmpVarValue = $tmpVarValue.plus($tmpVarValueElement);
						}
						io.match("}");
						tmpVarValue = $tmpVarValue;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						tmpVarValue = null;
					} else {
						tmpVarValue = null;
					}
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexMapEdge(tmpVar);
			return;
		}
		if (attributeName.equals("complexSetEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PSet<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("}");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexSetEdge(tmpVar);
			return;
		}
		if (attributeName.equals("doubleEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_doubleEdge(tmpVar);
			return;
		}
		if (attributeName.equals("enumEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain tmpVar = null;
			tmpVar = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
			set_enumEdge(tmpVar);
			return;
		}
		if (attributeName.equals("intEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_intEdge(tmpVar);
			return;
		}
		if (attributeName.equals("listEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_listEdge(tmpVar);
			return;
		}
		if (attributeName.equals("longEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Long tmpVar = null;
			tmpVar = io.matchLong();
			set_longEdge(tmpVar);
			return;
		}
		if (attributeName.equals("mapEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					int tmpVarKey;
						boolean tmpVarValue;
					tmpVarKey = io.matchInteger();
					io.match("-");
					tmpVarValue = io.matchBoolean();
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_mapEdge(tmpVar);
			return;
		}
		if (attributeName.equals("recordEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain tmpVar = null;
			
			if (io.isNextToken("(")) {
				tmpVar = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_recordEdge(tmpVar);
			return;
		}
		if (attributeName.equals("setEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_setEdge(tmpVar);
			return;
		}
		if (attributeName.equals("stringEdge")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_stringEdge(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("TestEdge doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(is_boolEdge());
		if (get_complexListEdge() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> _complexListEdgeElement : get_complexListEdge()) {
				if (_complexListEdgeElement != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean _complexListEdgeElementElement : _complexListEdgeElement) {
						io.writeBoolean(_complexListEdgeElementElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexMapEdge() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapEdge().keySet()) {
				org.pcollections.PSet<java.lang.Boolean> value = get_complexMapEdge().get(key);
				if (key != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean keyElement : key) {
						io.writeBoolean(keyElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				if (value != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean valueElement : value) {
						io.writeBoolean(valueElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexSetEdge() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PSet<java.lang.Boolean> _complexSetEdgeElement : get_complexSetEdge()) {
				if (_complexSetEdgeElement != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean _complexSetEdgeElementElement : _complexSetEdgeElement) {
						io.writeBoolean(_complexSetEdgeElementElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(get_doubleEdge());
		if (get_enumEdge() != null) {
			io.writeIdentifier(get_enumEdge().toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(get_intEdge());
		if (get_listEdge() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (boolean _listEdgeElement : get_listEdge()) {
				io.writeBoolean(_listEdgeElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeLong(get_longEdge());
		if (get_mapEdge() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (int key: get_mapEdge().keySet()) {
				boolean value = get_mapEdge().get(key);
				io.writeInteger(key);
				io.write(" -");
				io.writeBoolean(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_recordEdge() != null) {
			get_recordEdge().writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_setEdge() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (boolean _setEdgeElement : get_setEdge()) {
				io.writeBoolean(_setEdgeElement);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(get_stringEdge());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("boolEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(is_boolEdge());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexListEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexListEdge() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> _complexListEdgeElement : get_complexListEdge()) {
					if (_complexListEdgeElement != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean _complexListEdgeElementElement : _complexListEdgeElement) {
							io.writeBoolean(_complexListEdgeElementElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexMapEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexMapEdge() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapEdge().keySet()) {
					org.pcollections.PSet<java.lang.Boolean> value = get_complexMapEdge().get(key);
					if (key != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean keyElement : key) {
							io.writeBoolean(keyElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					if (value != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean valueElement : value) {
							io.writeBoolean(valueElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexSetEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexSetEdge() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PSet<java.lang.Boolean> _complexSetEdgeElement : get_complexSetEdge()) {
					if (_complexSetEdgeElement != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean _complexSetEdgeElementElement : _complexSetEdgeElement) {
							io.writeBoolean(_complexSetEdgeElementElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("doubleEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_doubleEdge());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("enumEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_enumEdge() != null) {
				io.writeIdentifier(get_enumEdge().toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("intEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_intEdge());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("listEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_listEdge() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (boolean _listEdgeElement : get_listEdge()) {
					io.writeBoolean(_listEdgeElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("longEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(get_longEdge());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("mapEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_mapEdge() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (int key: get_mapEdge().keySet()) {
					boolean value = get_mapEdge().get(key);
					io.writeInteger(key);
					io.write(" -");
					io.writeBoolean(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("recordEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_recordEdge() != null) {
				get_recordEdge().writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("setEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_setEdge() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (boolean _setEdgeElement : get_setEdge()) {
					io.writeBoolean(_setEdgeElement);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("stringEdge")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_stringEdge());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("TestEdge doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_boolEdge);
		attributes.add(_complexListEdge);
		attributes.add(_complexMapEdge);
		attributes.add(_complexSetEdge);
		attributes.add(_doubleEdge);
		attributes.add(_enumEdge);
		attributes.add(_intEdge);
		attributes.add(_listEdge);
		attributes.add(_longEdge);
		attributes.add(_mapEdge);
		attributes.add(_recordEdge);
		attributes.add(_setEdge);
		attributes.add(_stringEdge);
		return attributes;
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getNextTestEdgeInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getNextEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getNextTestEdgeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getNextTestEdgeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedTestEdgeImpl(this, graph);
	}
	public TestVertex getAlpha() {
		return (TestVertex) super.getAlpha();
	}
	public TestVertex getOmega() {
		return (TestVertex) super.getOmega();
	}
}
