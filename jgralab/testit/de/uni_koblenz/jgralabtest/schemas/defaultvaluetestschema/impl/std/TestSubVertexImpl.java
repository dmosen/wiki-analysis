/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class TestSubVertexImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex {

	protected boolean _boolVertex;

	protected org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListVertex;

	protected org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapVertex;

	protected org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetVertex;

	protected double _doubleVertex;

	protected de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumVertex;

	protected int _intVertex;

	protected org.pcollections.PVector<java.lang.Boolean> _listVertex;

	protected long _longVertex;

	protected org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapVertex;

	protected de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordVertex;

	protected org.pcollections.PSet<java.lang.Boolean> _setVertex;

	protected java.lang.String _stringVertex;

	public TestSubVertexImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("boolVertex")) return (T) (java.lang.Boolean) is_boolVertex();
		if (attributeName.equals("complexListVertex")) return (T) get_complexListVertex();
		if (attributeName.equals("complexMapVertex")) return (T) get_complexMapVertex();
		if (attributeName.equals("complexSetVertex")) return (T) get_complexSetVertex();
		if (attributeName.equals("doubleVertex")) return (T) (java.lang.Double) get_doubleVertex();
		if (attributeName.equals("enumVertex")) return (T) get_enumVertex();
		if (attributeName.equals("intVertex")) return (T) (java.lang.Integer) get_intVertex();
		if (attributeName.equals("listVertex")) return (T) get_listVertex();
		if (attributeName.equals("longVertex")) return (T) (java.lang.Long) get_longVertex();
		if (attributeName.equals("mapVertex")) return (T) get_mapVertex();
		if (attributeName.equals("recordVertex")) return (T) get_recordVertex();
		if (attributeName.equals("setVertex")) return (T) get_setVertex();
		if (attributeName.equals("stringVertex")) return (T) get_stringVertex();
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("boolVertex")) {
			set_boolVertex((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("complexListVertex")) {
			set_complexListVertex((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexMapVertex")) {
			set_complexMapVertex((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexSetVertex")) {
			set_complexSetVertex((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("doubleVertex")) {
			set_doubleVertex((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("enumVertex")) {
			if (data instanceof String) {
				set_enumVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull((String) data));
			} else {
				set_enumVertex((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) data);
			}
			return;
		}
		if (attributeName.equals("intVertex")) {
			set_intVertex((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("listVertex")) {
			set_listVertex((org.pcollections.PVector<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("longVertex")) {
			set_longVertex((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("mapVertex")) {
			set_mapVertex((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("recordVertex")) {
			set_recordVertex((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) data);
			return;
		}
		if (attributeName.equals("setVertex")) {
			set_setVertex((org.pcollections.PSet<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("stringVertex")) {
			set_stringVertex((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	public boolean is_boolVertex() {
		return _boolVertex;
	}

	public void set_boolVertex(boolean _boolVertex) {
		ecaAttributeChanging("boolVertex", this._boolVertex, _boolVertex);
		Object oldValue = this._boolVertex;
		this._boolVertex = _boolVertex;
		graphModified();
	ecaAttributeChanged("boolVertex", oldValue, _boolVertex);
	}

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListVertex() {
		return _complexListVertex;
	}

	public void set_complexListVertex(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListVertex) {
		ecaAttributeChanging("complexListVertex", this._complexListVertex, _complexListVertex);
		Object oldValue = this._complexListVertex;
		this._complexListVertex = _complexListVertex;
		graphModified();
	ecaAttributeChanged("complexListVertex", oldValue, _complexListVertex);
	}

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapVertex() {
		return _complexMapVertex;
	}

	public void set_complexMapVertex(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapVertex) {
		ecaAttributeChanging("complexMapVertex", this._complexMapVertex, _complexMapVertex);
		Object oldValue = this._complexMapVertex;
		this._complexMapVertex = _complexMapVertex;
		graphModified();
	ecaAttributeChanged("complexMapVertex", oldValue, _complexMapVertex);
	}

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetVertex() {
		return _complexSetVertex;
	}

	public void set_complexSetVertex(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetVertex) {
		ecaAttributeChanging("complexSetVertex", this._complexSetVertex, _complexSetVertex);
		Object oldValue = this._complexSetVertex;
		this._complexSetVertex = _complexSetVertex;
		graphModified();
	ecaAttributeChanged("complexSetVertex", oldValue, _complexSetVertex);
	}

	public double get_doubleVertex() {
		return _doubleVertex;
	}

	public void set_doubleVertex(double _doubleVertex) {
		ecaAttributeChanging("doubleVertex", this._doubleVertex, _doubleVertex);
		Object oldValue = this._doubleVertex;
		this._doubleVertex = _doubleVertex;
		graphModified();
	ecaAttributeChanged("doubleVertex", oldValue, _doubleVertex);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumVertex() {
		return _enumVertex;
	}

	public void set_enumVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumVertex) {
		ecaAttributeChanging("enumVertex", this._enumVertex, _enumVertex);
		Object oldValue = this._enumVertex;
		this._enumVertex = _enumVertex;
		graphModified();
	ecaAttributeChanged("enumVertex", oldValue, _enumVertex);
	}

	public int get_intVertex() {
		return _intVertex;
	}

	public void set_intVertex(int _intVertex) {
		ecaAttributeChanging("intVertex", this._intVertex, _intVertex);
		Object oldValue = this._intVertex;
		this._intVertex = _intVertex;
		graphModified();
	ecaAttributeChanged("intVertex", oldValue, _intVertex);
	}

	public org.pcollections.PVector<java.lang.Boolean> get_listVertex() {
		return _listVertex;
	}

	public void set_listVertex(org.pcollections.PVector<java.lang.Boolean> _listVertex) {
		ecaAttributeChanging("listVertex", this._listVertex, _listVertex);
		Object oldValue = this._listVertex;
		this._listVertex = _listVertex;
		graphModified();
	ecaAttributeChanged("listVertex", oldValue, _listVertex);
	}

	public long get_longVertex() {
		return _longVertex;
	}

	public void set_longVertex(long _longVertex) {
		ecaAttributeChanging("longVertex", this._longVertex, _longVertex);
		Object oldValue = this._longVertex;
		this._longVertex = _longVertex;
		graphModified();
	ecaAttributeChanged("longVertex", oldValue, _longVertex);
	}

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapVertex() {
		return _mapVertex;
	}

	public void set_mapVertex(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapVertex) {
		ecaAttributeChanging("mapVertex", this._mapVertex, _mapVertex);
		Object oldValue = this._mapVertex;
		this._mapVertex = _mapVertex;
		graphModified();
	ecaAttributeChanged("mapVertex", oldValue, _mapVertex);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordVertex() {
		return _recordVertex;
	}

	public void set_recordVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordVertex) {
		ecaAttributeChanging("recordVertex", this._recordVertex, _recordVertex);
		Object oldValue = this._recordVertex;
		this._recordVertex = _recordVertex;
		graphModified();
	ecaAttributeChanged("recordVertex", oldValue, _recordVertex);
	}

	public org.pcollections.PSet<java.lang.Boolean> get_setVertex() {
		return _setVertex;
	}

	public void set_setVertex(org.pcollections.PSet<java.lang.Boolean> _setVertex) {
		ecaAttributeChanging("setVertex", this._setVertex, _setVertex);
		Object oldValue = this._setVertex;
		this._setVertex = _setVertex;
		graphModified();
	ecaAttributeChanged("setVertex", oldValue, _setVertex);
	}

	public java.lang.String get_stringVertex() {
		return _stringVertex;
	}

	public void set_stringVertex(java.lang.String _stringVertex) {
		ecaAttributeChanging("stringVertex", this._stringVertex, _stringVertex);
		Object oldValue = this._stringVertex;
		this._stringVertex = _stringVertex;
		graphModified();
	ecaAttributeChanged("stringVertex", oldValue, _stringVertex);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_boolVertex = io.matchBoolean();
		set_boolVertex(_boolVertex);
		
		if (io.isNextToken("[")) {
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListVertex = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				org.pcollections.PVector<java.lang.Boolean> $_complexListVertexElement = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $$_complexListVertexElement = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $$_complexListVertexElementElement;
						$$_complexListVertexElementElement = io.matchBoolean();
						$$_complexListVertexElement = $$_complexListVertexElement.plus($$_complexListVertexElementElement);
					}
					io.match("]");
					$_complexListVertexElement = $$_complexListVertexElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					$_complexListVertexElement = null;
				} else {
					$_complexListVertexElement = null;
				}
				$_complexListVertex = $_complexListVertex.plus($_complexListVertexElement);
			}
			io.match("]");
			_complexListVertex = $_complexListVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_complexListVertex = null;
		} else {
			_complexListVertex = null;
		}
		set_complexListVertex(_complexListVertex);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapVertex = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PVector<java.lang.Boolean> _complexMapVertexKey = null;
					org.pcollections.PSet<java.lang.Boolean> _complexMapVertexValue = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexMapVertexKey = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $_complexMapVertexKeyElement;
						$_complexMapVertexKeyElement = io.matchBoolean();
						$_complexMapVertexKey = $_complexMapVertexKey.plus($_complexMapVertexKeyElement);
					}
					io.match("]");
					_complexMapVertexKey = $_complexMapVertexKey;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					_complexMapVertexKey = null;
				} else {
					_complexMapVertexKey = null;
				}
				io.match("-");
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexMapVertexValue = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $_complexMapVertexValueElement;
						$_complexMapVertexValueElement = io.matchBoolean();
						$_complexMapVertexValue = $_complexMapVertexValue.plus($_complexMapVertexValueElement);
					}
					io.match("}");
					_complexMapVertexValue = $_complexMapVertexValue;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					_complexMapVertexValue = null;
				} else {
					_complexMapVertexValue = null;
				}
				$_complexMapVertex = $_complexMapVertex.plus(_complexMapVertexKey, _complexMapVertexValue);
			}
			io.match("}");
			_complexMapVertex = $_complexMapVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexMapVertex = null;
		} else {
			_complexMapVertex = null;
		}
		set_complexMapVertex(_complexMapVertex);
		
		if (io.isNextToken("{")) {
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetVertex = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PSet<java.lang.Boolean> $_complexSetVertexElement = null;
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $$_complexSetVertexElement = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $$_complexSetVertexElementElement;
						$$_complexSetVertexElementElement = io.matchBoolean();
						$$_complexSetVertexElement = $$_complexSetVertexElement.plus($$_complexSetVertexElementElement);
					}
					io.match("}");
					$_complexSetVertexElement = $$_complexSetVertexElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					$_complexSetVertexElement = null;
				} else {
					$_complexSetVertexElement = null;
				}
				$_complexSetVertex = $_complexSetVertex.plus($_complexSetVertexElement);
			}
			io.match("}");
			_complexSetVertex = $_complexSetVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexSetVertex = null;
		} else {
			_complexSetVertex = null;
		}
		set_complexSetVertex(_complexSetVertex);
		_doubleVertex = io.matchDouble();
		set_doubleVertex(_doubleVertex);
		_enumVertex = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
		set_enumVertex(_enumVertex);
		_intVertex = io.matchInteger();
		set_intVertex(_intVertex);
		
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Boolean> $_listVertex = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				boolean $_listVertexElement;
				$_listVertexElement = io.matchBoolean();
				$_listVertex = $_listVertex.plus($_listVertexElement);
			}
			io.match("]");
			_listVertex = $_listVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_listVertex = null;
		} else {
			_listVertex = null;
		}
		set_listVertex(_listVertex);
		_longVertex = io.matchLong();
		set_longVertex(_longVertex);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapVertex = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				int _mapVertexKey;
					boolean _mapVertexValue;
				_mapVertexKey = io.matchInteger();
				io.match("-");
				_mapVertexValue = io.matchBoolean();
				$_mapVertex = $_mapVertex.plus(_mapVertexKey, _mapVertexValue);
			}
			io.match("}");
			_mapVertex = $_mapVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_mapVertex = null;
		} else {
			_mapVertex = null;
		}
		set_mapVertex(_mapVertex);
		
		if (io.isNextToken("(")) {
			_recordVertex = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_recordVertex = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_recordVertex(_recordVertex);
		
		if (io.isNextToken("{")) {
			org.pcollections.PSet<java.lang.Boolean> $_setVertex = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				boolean $_setVertexElement;
				$_setVertexElement = io.matchBoolean();
				$_setVertex = $_setVertex.plus($_setVertexElement);
			}
			io.match("}");
			_setVertex = $_setVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_setVertex = null;
		} else {
			_setVertex = null;
		}
		set_setVertex(_setVertex);
		_stringVertex = io.matchUtfString();
		set_stringVertex(_stringVertex);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("boolVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_boolVertex = io.matchBoolean();
			set_boolVertex(_boolVertex);
			return;
		}
		if (attributeName.equals("complexListVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListVertex = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexListVertexElement = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $$_complexListVertexElement = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $$_complexListVertexElementElement;
							$$_complexListVertexElementElement = io.matchBoolean();
							$$_complexListVertexElement = $$_complexListVertexElement.plus($$_complexListVertexElementElement);
						}
						io.match("]");
						$_complexListVertexElement = $$_complexListVertexElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						$_complexListVertexElement = null;
					} else {
						$_complexListVertexElement = null;
					}
					$_complexListVertex = $_complexListVertex.plus($_complexListVertexElement);
				}
				io.match("]");
				_complexListVertex = $_complexListVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				_complexListVertex = null;
			} else {
				_complexListVertex = null;
			}
			set_complexListVertex(_complexListVertex);
			return;
		}
		if (attributeName.equals("complexMapVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapVertex = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PVector<java.lang.Boolean> _complexMapVertexKey = null;
						org.pcollections.PSet<java.lang.Boolean> _complexMapVertexValue = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $_complexMapVertexKey = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $_complexMapVertexKeyElement;
							$_complexMapVertexKeyElement = io.matchBoolean();
							$_complexMapVertexKey = $_complexMapVertexKey.plus($_complexMapVertexKeyElement);
						}
						io.match("]");
						_complexMapVertexKey = $_complexMapVertexKey;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						_complexMapVertexKey = null;
					} else {
						_complexMapVertexKey = null;
					}
					io.match("-");
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $_complexMapVertexValue = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $_complexMapVertexValueElement;
							$_complexMapVertexValueElement = io.matchBoolean();
							$_complexMapVertexValue = $_complexMapVertexValue.plus($_complexMapVertexValueElement);
						}
						io.match("}");
						_complexMapVertexValue = $_complexMapVertexValue;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						_complexMapVertexValue = null;
					} else {
						_complexMapVertexValue = null;
					}
					$_complexMapVertex = $_complexMapVertex.plus(_complexMapVertexKey, _complexMapVertexValue);
				}
				io.match("}");
				_complexMapVertex = $_complexMapVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_complexMapVertex = null;
			} else {
				_complexMapVertex = null;
			}
			set_complexMapVertex(_complexMapVertex);
			return;
		}
		if (attributeName.equals("complexSetVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetVertex = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexSetVertexElement = null;
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $$_complexSetVertexElement = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $$_complexSetVertexElementElement;
							$$_complexSetVertexElementElement = io.matchBoolean();
							$$_complexSetVertexElement = $$_complexSetVertexElement.plus($$_complexSetVertexElementElement);
						}
						io.match("}");
						$_complexSetVertexElement = $$_complexSetVertexElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						$_complexSetVertexElement = null;
					} else {
						$_complexSetVertexElement = null;
					}
					$_complexSetVertex = $_complexSetVertex.plus($_complexSetVertexElement);
				}
				io.match("}");
				_complexSetVertex = $_complexSetVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_complexSetVertex = null;
			} else {
				_complexSetVertex = null;
			}
			set_complexSetVertex(_complexSetVertex);
			return;
		}
		if (attributeName.equals("doubleVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_doubleVertex = io.matchDouble();
			set_doubleVertex(_doubleVertex);
			return;
		}
		if (attributeName.equals("enumVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_enumVertex = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
			set_enumVertex(_enumVertex);
			return;
		}
		if (attributeName.equals("intVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_intVertex = io.matchInteger();
			set_intVertex(_intVertex);
			return;
		}
		if (attributeName.equals("listVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Boolean> $_listVertex = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					boolean $_listVertexElement;
					$_listVertexElement = io.matchBoolean();
					$_listVertex = $_listVertex.plus($_listVertexElement);
				}
				io.match("]");
				_listVertex = $_listVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				_listVertex = null;
			} else {
				_listVertex = null;
			}
			set_listVertex(_listVertex);
			return;
		}
		if (attributeName.equals("longVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_longVertex = io.matchLong();
			set_longVertex(_longVertex);
			return;
		}
		if (attributeName.equals("mapVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapVertex = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					int _mapVertexKey;
						boolean _mapVertexValue;
					_mapVertexKey = io.matchInteger();
					io.match("-");
					_mapVertexValue = io.matchBoolean();
					$_mapVertex = $_mapVertex.plus(_mapVertexKey, _mapVertexValue);
				}
				io.match("}");
				_mapVertex = $_mapVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_mapVertex = null;
			} else {
				_mapVertex = null;
			}
			set_mapVertex(_mapVertex);
			return;
		}
		if (attributeName.equals("recordVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("(")) {
				_recordVertex = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_recordVertex = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_recordVertex(_recordVertex);
			return;
		}
		if (attributeName.equals("setVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<java.lang.Boolean> $_setVertex = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					boolean $_setVertexElement;
					$_setVertexElement = io.matchBoolean();
					$_setVertex = $_setVertex.plus($_setVertexElement);
				}
				io.match("}");
				_setVertex = $_setVertex;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_setVertex = null;
			} else {
				_setVertex = null;
			}
			set_setVertex(_setVertex);
			return;
		}
		if (attributeName.equals("stringVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_stringVertex = io.matchUtfString();
			set_stringVertex(_stringVertex);
			return;
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(_boolVertex);
		if (_complexListVertex != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> _complexListVertexElement : _complexListVertex) {
				if (_complexListVertexElement != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean _complexListVertexElementElement : _complexListVertexElement) {
						io.writeBoolean(_complexListVertexElementElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_complexMapVertex != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> key: _complexMapVertex.keySet()) {
				org.pcollections.PSet<java.lang.Boolean> value = _complexMapVertex.get(key);
				if (key != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean keyElement : key) {
						io.writeBoolean(keyElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				if (value != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean valueElement : value) {
						io.writeBoolean(valueElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_complexSetVertex != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PSet<java.lang.Boolean> _complexSetVertexElement : _complexSetVertex) {
				if (_complexSetVertexElement != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean _complexSetVertexElementElement : _complexSetVertexElement) {
						io.writeBoolean(_complexSetVertexElementElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(_doubleVertex);
		if (_enumVertex != null) {
			io.writeIdentifier(_enumVertex.toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(_intVertex);
		if (_listVertex != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (boolean _listVertexElement : _listVertex) {
				io.writeBoolean(_listVertexElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeLong(_longVertex);
		if (_mapVertex != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (int key: _mapVertex.keySet()) {
				boolean value = _mapVertex.get(key);
				io.writeInteger(key);
				io.write(" -");
				io.writeBoolean(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_recordVertex != null) {
			_recordVertex.writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_setVertex != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (boolean _setVertexElement : _setVertex) {
				io.writeBoolean(_setVertexElement);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(_stringVertex);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("boolVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(_boolVertex);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexListVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexListVertex != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> _complexListVertexElement : _complexListVertex) {
					if (_complexListVertexElement != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean _complexListVertexElementElement : _complexListVertexElement) {
							io.writeBoolean(_complexListVertexElementElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexMapVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexMapVertex != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> key: _complexMapVertex.keySet()) {
					org.pcollections.PSet<java.lang.Boolean> value = _complexMapVertex.get(key);
					if (key != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean keyElement : key) {
							io.writeBoolean(keyElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					if (value != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean valueElement : value) {
							io.writeBoolean(valueElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexSetVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexSetVertex != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PSet<java.lang.Boolean> _complexSetVertexElement : _complexSetVertex) {
					if (_complexSetVertexElement != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean _complexSetVertexElementElement : _complexSetVertexElement) {
							io.writeBoolean(_complexSetVertexElementElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("doubleVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(_doubleVertex);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("enumVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_enumVertex != null) {
				io.writeIdentifier(_enumVertex.toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("intVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_intVertex);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("listVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_listVertex != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (boolean _listVertexElement : _listVertex) {
					io.writeBoolean(_listVertexElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("longVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(_longVertex);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("mapVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_mapVertex != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (int key: _mapVertex.keySet()) {
					boolean value = _mapVertex.get(key);
					io.writeInteger(key);
					io.write(" -");
					io.writeBoolean(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("recordVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_recordVertex != null) {
				_recordVertex.writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("setVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_setVertex != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (boolean _setVertexElement : _setVertex) {
					io.writeBoolean(_setVertexElement);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("stringVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_stringVertex);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex getNextTestSubVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getNextTestVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) vertex, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_start() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>();
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_start() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex) this, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_end() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>();
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_end() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, direction);
	}
}
