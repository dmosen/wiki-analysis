/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.trans;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.trans.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class TestSubVertexImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean> _boolVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>> _complexListVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>> _complexMapVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>> _complexSetVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _doubleVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain> _enumVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _intVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>> _listVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long> _longVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>> _mapVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain> _recordVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>> _setVertex;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _stringVertex;

	public TestSubVertexImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("boolVertex")) return (T) (java.lang.Boolean) is_boolVertex();
		if (attributeName.equals("complexListVertex")) return (T) get_complexListVertex();
		if (attributeName.equals("complexMapVertex")) return (T) get_complexMapVertex();
		if (attributeName.equals("complexSetVertex")) return (T) get_complexSetVertex();
		if (attributeName.equals("doubleVertex")) return (T) (java.lang.Double) get_doubleVertex();
		if (attributeName.equals("enumVertex")) return (T) get_enumVertex();
		if (attributeName.equals("intVertex")) return (T) (java.lang.Integer) get_intVertex();
		if (attributeName.equals("listVertex")) return (T) get_listVertex();
		if (attributeName.equals("longVertex")) return (T) (java.lang.Long) get_longVertex();
		if (attributeName.equals("mapVertex")) return (T) get_mapVertex();
		if (attributeName.equals("recordVertex")) return (T) get_recordVertex();
		if (attributeName.equals("setVertex")) return (T) get_setVertex();
		if (attributeName.equals("stringVertex")) return (T) get_stringVertex();
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("boolVertex")) {
			set_boolVertex((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("complexListVertex")) {
			set_complexListVertex((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexMapVertex")) {
			set_complexMapVertex((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexSetVertex")) {
			set_complexSetVertex((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("doubleVertex")) {
			set_doubleVertex((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("enumVertex")) {
			if (data instanceof String) {
				set_enumVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull((String) data));
			} else {
				set_enumVertex((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) data);
			}
			return;
		}
		if (attributeName.equals("intVertex")) {
			set_intVertex((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("listVertex")) {
			set_listVertex((org.pcollections.PVector<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("longVertex")) {
			set_longVertex((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("mapVertex")) {
			set_mapVertex((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("recordVertex")) {
			set_recordVertex((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) data);
			return;
		}
		if (attributeName.equals("setVertex")) {
			set_setVertex((org.pcollections.PSet<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("stringVertex")) {
			set_stringVertex((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	public boolean is_boolVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'boolVertex', because " + this + " isn't valid in current transaction.");
		if (_boolVertex == null)
			return false;
		java.lang.Boolean value = _boolVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? false : value;
	}

	public void set_boolVertex(boolean _boolVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'boolVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._boolVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, _boolVertex, "boolVertex");
		}
		if (this._boolVertex == null) {
			this._boolVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, null, "boolVertex");
		}
		this._boolVertex.setValidValue((java.lang.Boolean) _boolVertex, graph.getCurrentTransaction());
		attributeChanged(this._boolVertex);
		graphModified();
	}

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexListVertex', because " + this + " isn't valid in current transaction.");
		if (_complexListVertex == null)
			return null;
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> value = _complexListVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexListVertex(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexListVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexListVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, _complexListVertex, "complexListVertex");
		}
		if (this._complexListVertex == null) {
			this._complexListVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, null, "complexListVertex");
		}
		this._complexListVertex.setValidValue((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) _complexListVertex, graph.getCurrentTransaction());
		attributeChanged(this._complexListVertex);
		graphModified();
	}

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexMapVertex', because " + this + " isn't valid in current transaction.");
		if (_complexMapVertex == null)
			return null;
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> value = _complexMapVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexMapVertex(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexMapVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexMapVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, _complexMapVertex, "complexMapVertex");
		}
		if (this._complexMapVertex == null) {
			this._complexMapVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexMapVertex");
		}
		this._complexMapVertex.setValidValue((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) _complexMapVertex, graph.getCurrentTransaction());
		attributeChanged(this._complexMapVertex);
		graphModified();
	}

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexSetVertex', because " + this + " isn't valid in current transaction.");
		if (_complexSetVertex == null)
			return null;
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> value = _complexSetVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexSetVertex(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'complexSetVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._complexSetVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, _complexSetVertex, "complexSetVertex");
		}
		if (this._complexSetVertex == null) {
			this._complexSetVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexSetVertex");
		}
		this._complexSetVertex.setValidValue((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) _complexSetVertex, graph.getCurrentTransaction());
		attributeChanged(this._complexSetVertex);
		graphModified();
	}

	public double get_doubleVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'doubleVertex', because " + this + " isn't valid in current transaction.");
		if (_doubleVertex == null)
			return 0.0;
		java.lang.Double value = _doubleVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_doubleVertex(double _doubleVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'doubleVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._doubleVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _doubleVertex, "doubleVertex");
		}
		if (this._doubleVertex == null) {
			this._doubleVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "doubleVertex");
		}
		this._doubleVertex.setValidValue((java.lang.Double) _doubleVertex, graph.getCurrentTransaction());
		attributeChanged(this._doubleVertex);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'enumVertex', because " + this + " isn't valid in current transaction.");
		if (_enumVertex == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain value = _enumVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_enumVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'enumVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._enumVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, _enumVertex, "enumVertex");
		}
		if (this._enumVertex == null) {
			this._enumVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, null, "enumVertex");
		}
		this._enumVertex.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) _enumVertex, graph.getCurrentTransaction());
		attributeChanged(this._enumVertex);
		graphModified();
	}

	public int get_intVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'intVertex', because " + this + " isn't valid in current transaction.");
		if (_intVertex == null)
			return 0;
		java.lang.Integer value = _intVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_intVertex(int _intVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'intVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._intVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _intVertex, "intVertex");
		}
		if (this._intVertex == null) {
			this._intVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "intVertex");
		}
		this._intVertex.setValidValue((java.lang.Integer) _intVertex, graph.getCurrentTransaction());
		attributeChanged(this._intVertex);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Boolean> get_listVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'listVertex', because " + this + " isn't valid in current transaction.");
		if (_listVertex == null)
			return null;
		org.pcollections.PVector<java.lang.Boolean> value = _listVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_listVertex(org.pcollections.PVector<java.lang.Boolean> _listVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'listVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._listVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, _listVertex, "listVertex");
		}
		if (this._listVertex == null) {
			this._listVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, null, "listVertex");
		}
		this._listVertex.setValidValue((org.pcollections.PVector<java.lang.Boolean>) _listVertex, graph.getCurrentTransaction());
		attributeChanged(this._listVertex);
		graphModified();
	}

	public long get_longVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'longVertex', because " + this + " isn't valid in current transaction.");
		if (_longVertex == null)
			return 0L;
		java.lang.Long value = _longVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0L : value;
	}

	public void set_longVertex(long _longVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'longVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._longVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, _longVertex, "longVertex");
		}
		if (this._longVertex == null) {
			this._longVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, null, "longVertex");
		}
		this._longVertex.setValidValue((java.lang.Long) _longVertex, graph.getCurrentTransaction());
		attributeChanged(this._longVertex);
		graphModified();
	}

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'mapVertex', because " + this + " isn't valid in current transaction.");
		if (_mapVertex == null)
			return null;
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> value = _mapVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_mapVertex(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'mapVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._mapVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, _mapVertex, "mapVertex");
		}
		if (this._mapVertex == null) {
			this._mapVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, null, "mapVertex");
		}
		this._mapVertex.setValidValue((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) _mapVertex, graph.getCurrentTransaction());
		attributeChanged(this._mapVertex);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'recordVertex', because " + this + " isn't valid in current transaction.");
		if (_recordVertex == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain value = _recordVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_recordVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'recordVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._recordVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, _recordVertex, "recordVertex");
		}
		if (this._recordVertex == null) {
			this._recordVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, null, "recordVertex");
		}
		this._recordVertex.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) _recordVertex, graph.getCurrentTransaction());
		attributeChanged(this._recordVertex);
		graphModified();
	}

	public org.pcollections.PSet<java.lang.Boolean> get_setVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'setVertex', because " + this + " isn't valid in current transaction.");
		if (_setVertex == null)
			return null;
		org.pcollections.PSet<java.lang.Boolean> value = _setVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_setVertex(org.pcollections.PSet<java.lang.Boolean> _setVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'setVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._setVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, _setVertex, "setVertex");
		}
		if (this._setVertex == null) {
			this._setVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, null, "setVertex");
		}
		this._setVertex.setValidValue((org.pcollections.PSet<java.lang.Boolean>) _setVertex, graph.getCurrentTransaction());
		attributeChanged(this._setVertex);
		graphModified();
	}

	public java.lang.String get_stringVertex() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'stringVertex', because " + this + " isn't valid in current transaction.");
		if (_stringVertex == null)
			return null;
		java.lang.String value = _stringVertex.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_stringVertex(java.lang.String _stringVertex) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'stringVertex', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._stringVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _stringVertex, "stringVertex");
		}
		if (this._stringVertex == null) {
			this._stringVertex = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "stringVertex");
		}
		this._stringVertex.setValidValue((java.lang.String) _stringVertex, graph.getCurrentTransaction());
		attributeChanged(this._stringVertex);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		boolean _boolVertex = io.matchBoolean();
		set_boolVertex(_boolVertex);
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListVertex = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListVertex = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				org.pcollections.PVector<java.lang.Boolean> $_complexListVertexElement = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $$_complexListVertexElement = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $$_complexListVertexElementElement;
						$$_complexListVertexElementElement = io.matchBoolean();
						$$_complexListVertexElement = $$_complexListVertexElement.plus($$_complexListVertexElementElement);
					}
					io.match("]");
					$_complexListVertexElement = $$_complexListVertexElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					$_complexListVertexElement = null;
				} else {
					$_complexListVertexElement = null;
				}
				$_complexListVertex = $_complexListVertex.plus($_complexListVertexElement);
			}
			io.match("]");
			_complexListVertex = $_complexListVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_complexListVertex = null;
		} else {
			_complexListVertex = null;
		}
		set_complexListVertex(_complexListVertex);
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapVertex = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapVertex = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PVector<java.lang.Boolean> _complexMapVertexKey = null;
					org.pcollections.PSet<java.lang.Boolean> _complexMapVertexValue = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexMapVertexKey = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $_complexMapVertexKeyElement;
						$_complexMapVertexKeyElement = io.matchBoolean();
						$_complexMapVertexKey = $_complexMapVertexKey.plus($_complexMapVertexKeyElement);
					}
					io.match("]");
					_complexMapVertexKey = $_complexMapVertexKey;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					_complexMapVertexKey = null;
				} else {
					_complexMapVertexKey = null;
				}
				io.match("-");
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexMapVertexValue = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $_complexMapVertexValueElement;
						$_complexMapVertexValueElement = io.matchBoolean();
						$_complexMapVertexValue = $_complexMapVertexValue.plus($_complexMapVertexValueElement);
					}
					io.match("}");
					_complexMapVertexValue = $_complexMapVertexValue;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					_complexMapVertexValue = null;
				} else {
					_complexMapVertexValue = null;
				}
				$_complexMapVertex = $_complexMapVertex.plus(_complexMapVertexKey, _complexMapVertexValue);
			}
			io.match("}");
			_complexMapVertex = $_complexMapVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexMapVertex = null;
		} else {
			_complexMapVertex = null;
		}
		set_complexMapVertex(_complexMapVertex);
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetVertex = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetVertex = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PSet<java.lang.Boolean> $_complexSetVertexElement = null;
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $$_complexSetVertexElement = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $$_complexSetVertexElementElement;
						$$_complexSetVertexElementElement = io.matchBoolean();
						$$_complexSetVertexElement = $$_complexSetVertexElement.plus($$_complexSetVertexElementElement);
					}
					io.match("}");
					$_complexSetVertexElement = $$_complexSetVertexElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					$_complexSetVertexElement = null;
				} else {
					$_complexSetVertexElement = null;
				}
				$_complexSetVertex = $_complexSetVertex.plus($_complexSetVertexElement);
			}
			io.match("}");
			_complexSetVertex = $_complexSetVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexSetVertex = null;
		} else {
			_complexSetVertex = null;
		}
		set_complexSetVertex(_complexSetVertex);
		double _doubleVertex = io.matchDouble();
		set_doubleVertex(_doubleVertex);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumVertex = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
		set_enumVertex(_enumVertex);
		int _intVertex = io.matchInteger();
		set_intVertex(_intVertex);
		org.pcollections.PVector<java.lang.Boolean> _listVertex = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Boolean> $_listVertex = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				boolean $_listVertexElement;
				$_listVertexElement = io.matchBoolean();
				$_listVertex = $_listVertex.plus($_listVertexElement);
			}
			io.match("]");
			_listVertex = $_listVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_listVertex = null;
		} else {
			_listVertex = null;
		}
		set_listVertex(_listVertex);
		long _longVertex = io.matchLong();
		set_longVertex(_longVertex);
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapVertex = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapVertex = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				int _mapVertexKey;
					boolean _mapVertexValue;
				_mapVertexKey = io.matchInteger();
				io.match("-");
				_mapVertexValue = io.matchBoolean();
				$_mapVertex = $_mapVertex.plus(_mapVertexKey, _mapVertexValue);
			}
			io.match("}");
			_mapVertex = $_mapVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_mapVertex = null;
		} else {
			_mapVertex = null;
		}
		set_mapVertex(_mapVertex);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordVertex = null;
		if (io.isNextToken("(")) {
			_recordVertex = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_recordVertex = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_recordVertex(_recordVertex);
		org.pcollections.PSet<java.lang.Boolean> _setVertex = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<java.lang.Boolean> $_setVertex = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				boolean $_setVertexElement;
				$_setVertexElement = io.matchBoolean();
				$_setVertex = $_setVertex.plus($_setVertexElement);
			}
			io.match("}");
			_setVertex = $_setVertex;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_setVertex = null;
		} else {
			_setVertex = null;
		}
		set_setVertex(_setVertex);
		java.lang.String _stringVertex = io.matchUtfString();
		set_stringVertex(_stringVertex);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("boolVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Boolean tmpVar = null;
			tmpVar = io.matchBoolean();
			set_boolVertex(tmpVar);
			return;
		}
		if (attributeName.equals("complexListVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					org.pcollections.PVector<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("]");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexListVertex(tmpVar);
			return;
		}
		if (attributeName.equals("complexMapVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PVector<java.lang.Boolean> tmpVarKey = null;
						org.pcollections.PSet<java.lang.Boolean> tmpVarValue = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $tmpVarKey = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $tmpVarKeyElement;
							$tmpVarKeyElement = io.matchBoolean();
							$tmpVarKey = $tmpVarKey.plus($tmpVarKeyElement);
						}
						io.match("]");
						tmpVarKey = $tmpVarKey;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						tmpVarKey = null;
					} else {
						tmpVarKey = null;
					}
					io.match("-");
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $tmpVarValue = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $tmpVarValueElement;
							$tmpVarValueElement = io.matchBoolean();
							$tmpVarValue = $tmpVarValue.plus($tmpVarValueElement);
						}
						io.match("}");
						tmpVarValue = $tmpVarValue;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						tmpVarValue = null;
					} else {
						tmpVarValue = null;
					}
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexMapVertex(tmpVar);
			return;
		}
		if (attributeName.equals("complexSetVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PSet<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("}");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexSetVertex(tmpVar);
			return;
		}
		if (attributeName.equals("doubleVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_doubleVertex(tmpVar);
			return;
		}
		if (attributeName.equals("enumVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain tmpVar = null;
			tmpVar = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
			set_enumVertex(tmpVar);
			return;
		}
		if (attributeName.equals("intVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_intVertex(tmpVar);
			return;
		}
		if (attributeName.equals("listVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_listVertex(tmpVar);
			return;
		}
		if (attributeName.equals("longVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Long tmpVar = null;
			tmpVar = io.matchLong();
			set_longVertex(tmpVar);
			return;
		}
		if (attributeName.equals("mapVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					int tmpVarKey;
						boolean tmpVarValue;
					tmpVarKey = io.matchInteger();
					io.match("-");
					tmpVarValue = io.matchBoolean();
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_mapVertex(tmpVar);
			return;
		}
		if (attributeName.equals("recordVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain tmpVar = null;
			
			if (io.isNextToken("(")) {
				tmpVar = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_recordVertex(tmpVar);
			return;
		}
		if (attributeName.equals("setVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_setVertex(tmpVar);
			return;
		}
		if (attributeName.equals("stringVertex")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_stringVertex(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(is_boolVertex());
		if (get_complexListVertex() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> _complexListVertexElement : get_complexListVertex()) {
				if (_complexListVertexElement != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean _complexListVertexElementElement : _complexListVertexElement) {
						io.writeBoolean(_complexListVertexElementElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexMapVertex() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapVertex().keySet()) {
				org.pcollections.PSet<java.lang.Boolean> value = get_complexMapVertex().get(key);
				if (key != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean keyElement : key) {
						io.writeBoolean(keyElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				if (value != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean valueElement : value) {
						io.writeBoolean(valueElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexSetVertex() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PSet<java.lang.Boolean> _complexSetVertexElement : get_complexSetVertex()) {
				if (_complexSetVertexElement != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean _complexSetVertexElementElement : _complexSetVertexElement) {
						io.writeBoolean(_complexSetVertexElementElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(get_doubleVertex());
		if (get_enumVertex() != null) {
			io.writeIdentifier(get_enumVertex().toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(get_intVertex());
		if (get_listVertex() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (boolean _listVertexElement : get_listVertex()) {
				io.writeBoolean(_listVertexElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeLong(get_longVertex());
		if (get_mapVertex() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (int key: get_mapVertex().keySet()) {
				boolean value = get_mapVertex().get(key);
				io.writeInteger(key);
				io.write(" -");
				io.writeBoolean(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_recordVertex() != null) {
			get_recordVertex().writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_setVertex() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (boolean _setVertexElement : get_setVertex()) {
				io.writeBoolean(_setVertexElement);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(get_stringVertex());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("boolVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(is_boolVertex());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexListVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexListVertex() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> _complexListVertexElement : get_complexListVertex()) {
					if (_complexListVertexElement != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean _complexListVertexElementElement : _complexListVertexElement) {
							io.writeBoolean(_complexListVertexElementElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexMapVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexMapVertex() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapVertex().keySet()) {
					org.pcollections.PSet<java.lang.Boolean> value = get_complexMapVertex().get(key);
					if (key != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean keyElement : key) {
							io.writeBoolean(keyElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					if (value != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean valueElement : value) {
							io.writeBoolean(valueElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexSetVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexSetVertex() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PSet<java.lang.Boolean> _complexSetVertexElement : get_complexSetVertex()) {
					if (_complexSetVertexElement != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean _complexSetVertexElementElement : _complexSetVertexElement) {
							io.writeBoolean(_complexSetVertexElementElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("doubleVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_doubleVertex());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("enumVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_enumVertex() != null) {
				io.writeIdentifier(get_enumVertex().toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("intVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_intVertex());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("listVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_listVertex() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (boolean _listVertexElement : get_listVertex()) {
					io.writeBoolean(_listVertexElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("longVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(get_longVertex());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("mapVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_mapVertex() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (int key: get_mapVertex().keySet()) {
					boolean value = get_mapVertex().get(key);
					io.writeInteger(key);
					io.write(" -");
					io.writeBoolean(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("recordVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_recordVertex() != null) {
				get_recordVertex().writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("setVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_setVertex() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (boolean _setVertexElement : get_setVertex()) {
					io.writeBoolean(_setVertexElement);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("stringVertex")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_stringVertex());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("TestSubVertex doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_boolVertex);
		attributes.add(_complexListVertex);
		attributes.add(_complexMapVertex);
		attributes.add(_complexSetVertex);
		attributes.add(_doubleVertex);
		attributes.add(_enumVertex);
		attributes.add(_intVertex);
		attributes.add(_listVertex);
		attributes.add(_longVertex);
		attributes.add(_mapVertex);
		attributes.add(_recordVertex);
		attributes.add(_setVertex);
		attributes.add(_stringVertex);
		return attributes;
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex getNextTestSubVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getNextTestVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdgeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) vertex, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_start() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>();
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_start(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_start() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge add_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex) this, (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> remove_end() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>();
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_end(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge edge = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge next = (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> get_end() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class, direction);
	}
}
