/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.trans;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.trans.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class DefaultValueTestGraphImpl extends GraphImpl implements de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph, de.uni_koblenz.jgralab.Graph {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean> _boolGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>> _complexListGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>> _complexMapGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>> _complexSetGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _doubleGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain> _enumGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _intGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>> _listGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long> _longGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>> _mapGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain> _recordGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>> _setGraph;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _stringGraph;

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("boolGraph")) return (T) (java.lang.Boolean) is_boolGraph();
		if (attributeName.equals("complexListGraph")) return (T) get_complexListGraph();
		if (attributeName.equals("complexMapGraph")) return (T) get_complexMapGraph();
		if (attributeName.equals("complexSetGraph")) return (T) get_complexSetGraph();
		if (attributeName.equals("doubleGraph")) return (T) (java.lang.Double) get_doubleGraph();
		if (attributeName.equals("enumGraph")) return (T) get_enumGraph();
		if (attributeName.equals("intGraph")) return (T) (java.lang.Integer) get_intGraph();
		if (attributeName.equals("listGraph")) return (T) get_listGraph();
		if (attributeName.equals("longGraph")) return (T) (java.lang.Long) get_longGraph();
		if (attributeName.equals("mapGraph")) return (T) get_mapGraph();
		if (attributeName.equals("recordGraph")) return (T) get_recordGraph();
		if (attributeName.equals("setGraph")) return (T) get_setGraph();
		if (attributeName.equals("stringGraph")) return (T) get_stringGraph();
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("boolGraph")) {
			set_boolGraph((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("complexListGraph")) {
			set_complexListGraph((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexMapGraph")) {
			set_complexMapGraph((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexSetGraph")) {
			set_complexSetGraph((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("doubleGraph")) {
			set_doubleGraph((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("enumGraph")) {
			if (data instanceof String) {
				set_enumGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull((String) data));
			} else {
				set_enumGraph((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) data);
			}
			return;
		}
		if (attributeName.equals("intGraph")) {
			set_intGraph((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("listGraph")) {
			set_listGraph((org.pcollections.PVector<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("longGraph")) {
			set_longGraph((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("mapGraph")) {
			set_mapGraph((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("recordGraph")) {
			set_recordGraph((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) data);
			return;
		}
		if (attributeName.equals("setGraph")) {
			set_setGraph((org.pcollections.PSet<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("stringGraph")) {
			set_stringGraph((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	public boolean is_boolGraph() {
		if (_boolGraph == null)
			return false;
		java.lang.Boolean value = _boolGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? false : value;
	}

	public void set_boolGraph(boolean _boolGraph) {
		if (this.isLoading()) {
			this._boolGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, _boolGraph, "boolGraph");
		}
		if (this._boolGraph == null) {
			this._boolGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, null, "boolGraph");
		}
		this._boolGraph.setValidValue((java.lang.Boolean) _boolGraph, this.getCurrentTransaction());
		attributeChanged(this._boolGraph);
		graphModified();
	}

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListGraph() {
		if (_complexListGraph == null)
			return null;
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> value = _complexListGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexListGraph(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListGraph) {
		if (this.isLoading()) {
			this._complexListGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, _complexListGraph, "complexListGraph");
		}
		if (this._complexListGraph == null) {
			this._complexListGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>>(this, null, "complexListGraph");
		}
		this._complexListGraph.setValidValue((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) _complexListGraph, this.getCurrentTransaction());
		attributeChanged(this._complexListGraph);
		graphModified();
	}

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapGraph() {
		if (_complexMapGraph == null)
			return null;
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> value = _complexMapGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexMapGraph(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapGraph) {
		if (this.isLoading()) {
			this._complexMapGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, _complexMapGraph, "complexMapGraph");
		}
		if (this._complexMapGraph == null) {
			this._complexMapGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexMapGraph");
		}
		this._complexMapGraph.setValidValue((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) _complexMapGraph, this.getCurrentTransaction());
		attributeChanged(this._complexMapGraph);
		graphModified();
	}

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetGraph() {
		if (_complexSetGraph == null)
			return null;
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> value = _complexSetGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_complexSetGraph(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetGraph) {
		if (this.isLoading()) {
			this._complexSetGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, _complexSetGraph, "complexSetGraph");
		}
		if (this._complexSetGraph == null) {
			this._complexSetGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>>(this, null, "complexSetGraph");
		}
		this._complexSetGraph.setValidValue((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) _complexSetGraph, this.getCurrentTransaction());
		attributeChanged(this._complexSetGraph);
		graphModified();
	}

	public double get_doubleGraph() {
		if (_doubleGraph == null)
			return 0.0;
		java.lang.Double value = _doubleGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_doubleGraph(double _doubleGraph) {
		if (this.isLoading()) {
			this._doubleGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _doubleGraph, "doubleGraph");
		}
		if (this._doubleGraph == null) {
			this._doubleGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "doubleGraph");
		}
		this._doubleGraph.setValidValue((java.lang.Double) _doubleGraph, this.getCurrentTransaction());
		attributeChanged(this._doubleGraph);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumGraph() {
		if (_enumGraph == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain value = _enumGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_enumGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumGraph) {
		if (this.isLoading()) {
			this._enumGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, _enumGraph, "enumGraph");
		}
		if (this._enumGraph == null) {
			this._enumGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain>(this, null, "enumGraph");
		}
		this._enumGraph.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) _enumGraph, this.getCurrentTransaction());
		attributeChanged(this._enumGraph);
		graphModified();
	}

	public int get_intGraph() {
		if (_intGraph == null)
			return 0;
		java.lang.Integer value = _intGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_intGraph(int _intGraph) {
		if (this.isLoading()) {
			this._intGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _intGraph, "intGraph");
		}
		if (this._intGraph == null) {
			this._intGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "intGraph");
		}
		this._intGraph.setValidValue((java.lang.Integer) _intGraph, this.getCurrentTransaction());
		attributeChanged(this._intGraph);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Boolean> get_listGraph() {
		if (_listGraph == null)
			return null;
		org.pcollections.PVector<java.lang.Boolean> value = _listGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_listGraph(org.pcollections.PVector<java.lang.Boolean> _listGraph) {
		if (this.isLoading()) {
			this._listGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, _listGraph, "listGraph");
		}
		if (this._listGraph == null) {
			this._listGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Boolean>>(this, null, "listGraph");
		}
		this._listGraph.setValidValue((org.pcollections.PVector<java.lang.Boolean>) _listGraph, this.getCurrentTransaction());
		attributeChanged(this._listGraph);
		graphModified();
	}

	public long get_longGraph() {
		if (_longGraph == null)
			return 0L;
		java.lang.Long value = _longGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? 0L : value;
	}

	public void set_longGraph(long _longGraph) {
		if (this.isLoading()) {
			this._longGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, _longGraph, "longGraph");
		}
		if (this._longGraph == null) {
			this._longGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, null, "longGraph");
		}
		this._longGraph.setValidValue((java.lang.Long) _longGraph, this.getCurrentTransaction());
		attributeChanged(this._longGraph);
		graphModified();
	}

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapGraph() {
		if (_mapGraph == null)
			return null;
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> value = _mapGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_mapGraph(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapGraph) {
		if (this.isLoading()) {
			this._mapGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, _mapGraph, "mapGraph");
		}
		if (this._mapGraph == null) {
			this._mapGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>>(this, null, "mapGraph");
		}
		this._mapGraph.setValidValue((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) _mapGraph, this.getCurrentTransaction());
		attributeChanged(this._mapGraph);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordGraph() {
		if (_recordGraph == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain value = _recordGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_recordGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordGraph) {
		if (this.isLoading()) {
			this._recordGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, _recordGraph, "recordGraph");
		}
		if (this._recordGraph == null) {
			this._recordGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain>(this, null, "recordGraph");
		}
		this._recordGraph.setValidValue((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) _recordGraph, this.getCurrentTransaction());
		attributeChanged(this._recordGraph);
		graphModified();
	}

	public org.pcollections.PSet<java.lang.Boolean> get_setGraph() {
		if (_setGraph == null)
			return null;
		org.pcollections.PSet<java.lang.Boolean> value = _setGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_setGraph(org.pcollections.PSet<java.lang.Boolean> _setGraph) {
		if (this.isLoading()) {
			this._setGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, _setGraph, "setGraph");
		}
		if (this._setGraph == null) {
			this._setGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PSet<java.lang.Boolean>>(this, null, "setGraph");
		}
		this._setGraph.setValidValue((org.pcollections.PSet<java.lang.Boolean>) _setGraph, this.getCurrentTransaction());
		attributeChanged(this._setGraph);
		graphModified();
	}

	public java.lang.String get_stringGraph() {
		if (_stringGraph == null)
			return null;
		java.lang.String value = _stringGraph.getValidValue(this.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_stringGraph(java.lang.String _stringGraph) {
		if (this.isLoading()) {
			this._stringGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _stringGraph, "stringGraph");
		}
		if (this._stringGraph == null) {
			this._stringGraph = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "stringGraph");
		}
		this._stringGraph.setValidValue((java.lang.String) _stringGraph, this.getCurrentTransaction());
		attributeChanged(this._stringGraph);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		boolean _boolGraph = io.matchBoolean();
		set_boolGraph(_boolGraph);
		org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListGraph = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListGraph = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				org.pcollections.PVector<java.lang.Boolean> $_complexListGraphElement = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $$_complexListGraphElement = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $$_complexListGraphElementElement;
						$$_complexListGraphElementElement = io.matchBoolean();
						$$_complexListGraphElement = $$_complexListGraphElement.plus($$_complexListGraphElementElement);
					}
					io.match("]");
					$_complexListGraphElement = $$_complexListGraphElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					$_complexListGraphElement = null;
				} else {
					$_complexListGraphElement = null;
				}
				$_complexListGraph = $_complexListGraph.plus($_complexListGraphElement);
			}
			io.match("]");
			_complexListGraph = $_complexListGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_complexListGraph = null;
		} else {
			_complexListGraph = null;
		}
		set_complexListGraph(_complexListGraph);
		org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapGraph = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapGraph = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PVector<java.lang.Boolean> _complexMapGraphKey = null;
					org.pcollections.PSet<java.lang.Boolean> _complexMapGraphValue = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexMapGraphKey = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $_complexMapGraphKeyElement;
						$_complexMapGraphKeyElement = io.matchBoolean();
						$_complexMapGraphKey = $_complexMapGraphKey.plus($_complexMapGraphKeyElement);
					}
					io.match("]");
					_complexMapGraphKey = $_complexMapGraphKey;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					_complexMapGraphKey = null;
				} else {
					_complexMapGraphKey = null;
				}
				io.match("-");
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexMapGraphValue = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $_complexMapGraphValueElement;
						$_complexMapGraphValueElement = io.matchBoolean();
						$_complexMapGraphValue = $_complexMapGraphValue.plus($_complexMapGraphValueElement);
					}
					io.match("}");
					_complexMapGraphValue = $_complexMapGraphValue;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					_complexMapGraphValue = null;
				} else {
					_complexMapGraphValue = null;
				}
				$_complexMapGraph = $_complexMapGraph.plus(_complexMapGraphKey, _complexMapGraphValue);
			}
			io.match("}");
			_complexMapGraph = $_complexMapGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexMapGraph = null;
		} else {
			_complexMapGraph = null;
		}
		set_complexMapGraph(_complexMapGraph);
		org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetGraph = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetGraph = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PSet<java.lang.Boolean> $_complexSetGraphElement = null;
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $$_complexSetGraphElement = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $$_complexSetGraphElementElement;
						$$_complexSetGraphElementElement = io.matchBoolean();
						$$_complexSetGraphElement = $$_complexSetGraphElement.plus($$_complexSetGraphElementElement);
					}
					io.match("}");
					$_complexSetGraphElement = $$_complexSetGraphElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					$_complexSetGraphElement = null;
				} else {
					$_complexSetGraphElement = null;
				}
				$_complexSetGraph = $_complexSetGraph.plus($_complexSetGraphElement);
			}
			io.match("}");
			_complexSetGraph = $_complexSetGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexSetGraph = null;
		} else {
			_complexSetGraph = null;
		}
		set_complexSetGraph(_complexSetGraph);
		double _doubleGraph = io.matchDouble();
		set_doubleGraph(_doubleGraph);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumGraph = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
		set_enumGraph(_enumGraph);
		int _intGraph = io.matchInteger();
		set_intGraph(_intGraph);
		org.pcollections.PVector<java.lang.Boolean> _listGraph = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Boolean> $_listGraph = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				boolean $_listGraphElement;
				$_listGraphElement = io.matchBoolean();
				$_listGraph = $_listGraph.plus($_listGraphElement);
			}
			io.match("]");
			_listGraph = $_listGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_listGraph = null;
		} else {
			_listGraph = null;
		}
		set_listGraph(_listGraph);
		long _longGraph = io.matchLong();
		set_longGraph(_longGraph);
		org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapGraph = null;
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapGraph = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				int _mapGraphKey;
					boolean _mapGraphValue;
				_mapGraphKey = io.matchInteger();
				io.match("-");
				_mapGraphValue = io.matchBoolean();
				$_mapGraph = $_mapGraph.plus(_mapGraphKey, _mapGraphValue);
			}
			io.match("}");
			_mapGraph = $_mapGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_mapGraph = null;
		} else {
			_mapGraph = null;
		}
		set_mapGraph(_mapGraph);
		de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordGraph = null;
		if (io.isNextToken("(")) {
			_recordGraph = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_recordGraph = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_recordGraph(_recordGraph);
		org.pcollections.PSet<java.lang.Boolean> _setGraph = null;
		if (io.isNextToken("{")) {
			org.pcollections.PSet<java.lang.Boolean> $_setGraph = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				boolean $_setGraphElement;
				$_setGraphElement = io.matchBoolean();
				$_setGraph = $_setGraph.plus($_setGraphElement);
			}
			io.match("}");
			_setGraph = $_setGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_setGraph = null;
		} else {
			_setGraph = null;
		}
		set_setGraph(_setGraph);
		java.lang.String _stringGraph = io.matchUtfString();
		set_stringGraph(_stringGraph);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("boolGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Boolean tmpVar = null;
			tmpVar = io.matchBoolean();
			set_boolGraph(tmpVar);
			return;
		}
		if (attributeName.equals("complexListGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					org.pcollections.PVector<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("]");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexListGraph(tmpVar);
			return;
		}
		if (attributeName.equals("complexMapGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PVector<java.lang.Boolean> tmpVarKey = null;
						org.pcollections.PSet<java.lang.Boolean> tmpVarValue = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $tmpVarKey = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $tmpVarKeyElement;
							$tmpVarKeyElement = io.matchBoolean();
							$tmpVarKey = $tmpVarKey.plus($tmpVarKeyElement);
						}
						io.match("]");
						tmpVarKey = $tmpVarKey;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						tmpVarKey = null;
					} else {
						tmpVarKey = null;
					}
					io.match("-");
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $tmpVarValue = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $tmpVarValueElement;
							$tmpVarValueElement = io.matchBoolean();
							$tmpVarValue = $tmpVarValue.plus($tmpVarValueElement);
						}
						io.match("}");
						tmpVarValue = $tmpVarValue;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						tmpVarValue = null;
					} else {
						tmpVarValue = null;
					}
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexMapGraph(tmpVar);
			return;
		}
		if (attributeName.equals("complexSetGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PSet<java.lang.Boolean> $tmpVarElement = null;
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $$tmpVarElement = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $$tmpVarElementElement;
							$$tmpVarElementElement = io.matchBoolean();
							$$tmpVarElement = $$tmpVarElement.plus($$tmpVarElementElement);
						}
						io.match("}");
						$tmpVarElement = $$tmpVarElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						$tmpVarElement = null;
					} else {
						$tmpVarElement = null;
					}
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_complexSetGraph(tmpVar);
			return;
		}
		if (attributeName.equals("doubleGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_doubleGraph(tmpVar);
			return;
		}
		if (attributeName.equals("enumGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain tmpVar = null;
			tmpVar = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
			set_enumGraph(tmpVar);
			return;
		}
		if (attributeName.equals("intGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_intGraph(tmpVar);
			return;
		}
		if (attributeName.equals("listGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_listGraph(tmpVar);
			return;
		}
		if (attributeName.equals("longGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Long tmpVar = null;
			tmpVar = io.matchLong();
			set_longGraph(tmpVar);
			return;
		}
		if (attributeName.equals("mapGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					int tmpVarKey;
						boolean tmpVarValue;
					tmpVarKey = io.matchInteger();
					io.match("-");
					tmpVarValue = io.matchBoolean();
					$tmpVar = $tmpVar.plus(tmpVarKey, tmpVarValue);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_mapGraph(tmpVar);
			return;
		}
		if (attributeName.equals("recordGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain tmpVar = null;
			
			if (io.isNextToken("(")) {
				tmpVar = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_recordGraph(tmpVar);
			return;
		}
		if (attributeName.equals("setGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PSet<java.lang.Boolean> tmpVar = null;
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<java.lang.Boolean> $tmpVar = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					boolean $tmpVarElement;
					$tmpVarElement = io.matchBoolean();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("}");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_setGraph(tmpVar);
			return;
		}
		if (attributeName.equals("stringGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_stringGraph(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(is_boolGraph());
		if (get_complexListGraph() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> _complexListGraphElement : get_complexListGraph()) {
				if (_complexListGraphElement != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean _complexListGraphElementElement : _complexListGraphElement) {
						io.writeBoolean(_complexListGraphElementElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexMapGraph() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapGraph().keySet()) {
				org.pcollections.PSet<java.lang.Boolean> value = get_complexMapGraph().get(key);
				if (key != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean keyElement : key) {
						io.writeBoolean(keyElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				if (value != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean valueElement : value) {
						io.writeBoolean(valueElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_complexSetGraph() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PSet<java.lang.Boolean> _complexSetGraphElement : get_complexSetGraph()) {
				if (_complexSetGraphElement != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean _complexSetGraphElementElement : _complexSetGraphElement) {
						io.writeBoolean(_complexSetGraphElementElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(get_doubleGraph());
		if (get_enumGraph() != null) {
			io.writeIdentifier(get_enumGraph().toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(get_intGraph());
		if (get_listGraph() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (boolean _listGraphElement : get_listGraph()) {
				io.writeBoolean(_listGraphElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeLong(get_longGraph());
		if (get_mapGraph() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (int key: get_mapGraph().keySet()) {
				boolean value = get_mapGraph().get(key);
				io.writeInteger(key);
				io.write(" -");
				io.writeBoolean(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_recordGraph() != null) {
			get_recordGraph().writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_setGraph() != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (boolean _setGraphElement : get_setGraph()) {
				io.writeBoolean(_setGraphElement);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(get_stringGraph());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("boolGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(is_boolGraph());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexListGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexListGraph() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> _complexListGraphElement : get_complexListGraph()) {
					if (_complexListGraphElement != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean _complexListGraphElementElement : _complexListGraphElement) {
							io.writeBoolean(_complexListGraphElementElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexMapGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexMapGraph() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> key: get_complexMapGraph().keySet()) {
					org.pcollections.PSet<java.lang.Boolean> value = get_complexMapGraph().get(key);
					if (key != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean keyElement : key) {
							io.writeBoolean(keyElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					if (value != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean valueElement : value) {
							io.writeBoolean(valueElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexSetGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_complexSetGraph() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PSet<java.lang.Boolean> _complexSetGraphElement : get_complexSetGraph()) {
					if (_complexSetGraphElement != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean _complexSetGraphElementElement : _complexSetGraphElement) {
							io.writeBoolean(_complexSetGraphElementElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("doubleGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_doubleGraph());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("enumGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_enumGraph() != null) {
				io.writeIdentifier(get_enumGraph().toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("intGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_intGraph());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("listGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_listGraph() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (boolean _listGraphElement : get_listGraph()) {
					io.writeBoolean(_listGraphElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("longGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(get_longGraph());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("mapGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_mapGraph() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (int key: get_mapGraph().keySet()) {
					boolean value = get_mapGraph().get(key);
					io.writeInteger(key);
					io.write(" -");
					io.writeBoolean(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("recordGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_recordGraph() != null) {
				get_recordGraph().writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("setGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_setGraph() != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (boolean _setGraphElement : get_setGraph()) {
					io.writeBoolean(_setGraphElement);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("stringGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_stringGraph());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_boolGraph);
		attributes.add(_complexListGraph);
		attributes.add(_complexMapGraph);
		attributes.add(_complexSetGraph);
		attributes.add(_doubleGraph);
		attributes.add(_enumGraph);
		attributes.add(_intGraph);
		attributes.add(_listGraph);
		attributes.add(_longGraph);
		attributes.add(_mapGraph);
		attributes.add(_recordGraph);
		attributes.add(_setGraph);
		attributes.add(_stringGraph);
		return attributes;
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for TestEdge ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdge() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge createTestEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex alpha, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge createTestEdge(int id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex alpha, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for TestSubVertex ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex getFirstTestSubVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex createTestSubVertex() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex createTestSubVertex(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC, id, this);
	}

	// ------------------------ Code for TestVertex ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getFirstTestVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex createTestVertex() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex createTestVertex(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC, id, this);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> getTestVertexVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> getTestSubVertexVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class);
	}
	
}
