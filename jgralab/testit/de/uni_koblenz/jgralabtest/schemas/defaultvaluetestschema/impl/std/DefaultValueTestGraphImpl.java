/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class DefaultValueTestGraphImpl extends GraphImpl implements de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph, de.uni_koblenz.jgralab.Graph {

	protected boolean _boolGraph;

	protected org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListGraph;

	protected org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapGraph;

	protected org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetGraph;

	protected double _doubleGraph;

	protected de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumGraph;

	protected int _intGraph;

	protected org.pcollections.PVector<java.lang.Boolean> _listGraph;

	protected long _longGraph;

	protected org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapGraph;

	protected de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordGraph;

	protected org.pcollections.PSet<java.lang.Boolean> _setGraph;

	protected java.lang.String _stringGraph;

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public DefaultValueTestGraphImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestGraph.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("boolGraph")) return (T) (java.lang.Boolean) is_boolGraph();
		if (attributeName.equals("complexListGraph")) return (T) get_complexListGraph();
		if (attributeName.equals("complexMapGraph")) return (T) get_complexMapGraph();
		if (attributeName.equals("complexSetGraph")) return (T) get_complexSetGraph();
		if (attributeName.equals("doubleGraph")) return (T) (java.lang.Double) get_doubleGraph();
		if (attributeName.equals("enumGraph")) return (T) get_enumGraph();
		if (attributeName.equals("intGraph")) return (T) (java.lang.Integer) get_intGraph();
		if (attributeName.equals("listGraph")) return (T) get_listGraph();
		if (attributeName.equals("longGraph")) return (T) (java.lang.Long) get_longGraph();
		if (attributeName.equals("mapGraph")) return (T) get_mapGraph();
		if (attributeName.equals("recordGraph")) return (T) get_recordGraph();
		if (attributeName.equals("setGraph")) return (T) get_setGraph();
		if (attributeName.equals("stringGraph")) return (T) get_stringGraph();
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("boolGraph")) {
			set_boolGraph((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("complexListGraph")) {
			set_complexListGraph((org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexMapGraph")) {
			set_complexMapGraph((org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("complexSetGraph")) {
			set_complexSetGraph((org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>>) data);
			return;
		}
		if (attributeName.equals("doubleGraph")) {
			set_doubleGraph((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("enumGraph")) {
			if (data instanceof String) {
				set_enumGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull((String) data));
			} else {
				set_enumGraph((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain) data);
			}
			return;
		}
		if (attributeName.equals("intGraph")) {
			set_intGraph((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("listGraph")) {
			set_listGraph((org.pcollections.PVector<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("longGraph")) {
			set_longGraph((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("mapGraph")) {
			set_mapGraph((org.pcollections.PMap<java.lang.Integer, java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("recordGraph")) {
			set_recordGraph((de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain) data);
			return;
		}
		if (attributeName.equals("setGraph")) {
			set_setGraph((org.pcollections.PSet<java.lang.Boolean>) data);
			return;
		}
		if (attributeName.equals("stringGraph")) {
			set_stringGraph((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	public boolean is_boolGraph() {
		return _boolGraph;
	}

	public void set_boolGraph(boolean _boolGraph) {
		ecaAttributeChanging("boolGraph", this._boolGraph, _boolGraph);
		Object oldValue = this._boolGraph;
		this._boolGraph = _boolGraph;
		graphModified();
	ecaAttributeChanged("boolGraph", oldValue, _boolGraph);
	}

	public org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> get_complexListGraph() {
		return _complexListGraph;
	}

	public void set_complexListGraph(org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> _complexListGraph) {
		ecaAttributeChanging("complexListGraph", this._complexListGraph, _complexListGraph);
		Object oldValue = this._complexListGraph;
		this._complexListGraph = _complexListGraph;
		graphModified();
	ecaAttributeChanged("complexListGraph", oldValue, _complexListGraph);
	}

	public org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> get_complexMapGraph() {
		return _complexMapGraph;
	}

	public void set_complexMapGraph(org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> _complexMapGraph) {
		ecaAttributeChanging("complexMapGraph", this._complexMapGraph, _complexMapGraph);
		Object oldValue = this._complexMapGraph;
		this._complexMapGraph = _complexMapGraph;
		graphModified();
	ecaAttributeChanged("complexMapGraph", oldValue, _complexMapGraph);
	}

	public org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> get_complexSetGraph() {
		return _complexSetGraph;
	}

	public void set_complexSetGraph(org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> _complexSetGraph) {
		ecaAttributeChanging("complexSetGraph", this._complexSetGraph, _complexSetGraph);
		Object oldValue = this._complexSetGraph;
		this._complexSetGraph = _complexSetGraph;
		graphModified();
	ecaAttributeChanged("complexSetGraph", oldValue, _complexSetGraph);
	}

	public double get_doubleGraph() {
		return _doubleGraph;
	}

	public void set_doubleGraph(double _doubleGraph) {
		ecaAttributeChanging("doubleGraph", this._doubleGraph, _doubleGraph);
		Object oldValue = this._doubleGraph;
		this._doubleGraph = _doubleGraph;
		graphModified();
	ecaAttributeChanged("doubleGraph", oldValue, _doubleGraph);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain get_enumGraph() {
		return _enumGraph;
	}

	public void set_enumGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain _enumGraph) {
		ecaAttributeChanging("enumGraph", this._enumGraph, _enumGraph);
		Object oldValue = this._enumGraph;
		this._enumGraph = _enumGraph;
		graphModified();
	ecaAttributeChanged("enumGraph", oldValue, _enumGraph);
	}

	public int get_intGraph() {
		return _intGraph;
	}

	public void set_intGraph(int _intGraph) {
		ecaAttributeChanging("intGraph", this._intGraph, _intGraph);
		Object oldValue = this._intGraph;
		this._intGraph = _intGraph;
		graphModified();
	ecaAttributeChanged("intGraph", oldValue, _intGraph);
	}

	public org.pcollections.PVector<java.lang.Boolean> get_listGraph() {
		return _listGraph;
	}

	public void set_listGraph(org.pcollections.PVector<java.lang.Boolean> _listGraph) {
		ecaAttributeChanging("listGraph", this._listGraph, _listGraph);
		Object oldValue = this._listGraph;
		this._listGraph = _listGraph;
		graphModified();
	ecaAttributeChanged("listGraph", oldValue, _listGraph);
	}

	public long get_longGraph() {
		return _longGraph;
	}

	public void set_longGraph(long _longGraph) {
		ecaAttributeChanging("longGraph", this._longGraph, _longGraph);
		Object oldValue = this._longGraph;
		this._longGraph = _longGraph;
		graphModified();
	ecaAttributeChanged("longGraph", oldValue, _longGraph);
	}

	public org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> get_mapGraph() {
		return _mapGraph;
	}

	public void set_mapGraph(org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> _mapGraph) {
		ecaAttributeChanging("mapGraph", this._mapGraph, _mapGraph);
		Object oldValue = this._mapGraph;
		this._mapGraph = _mapGraph;
		graphModified();
	ecaAttributeChanged("mapGraph", oldValue, _mapGraph);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain get_recordGraph() {
		return _recordGraph;
	}

	public void set_recordGraph(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain _recordGraph) {
		ecaAttributeChanging("recordGraph", this._recordGraph, _recordGraph);
		Object oldValue = this._recordGraph;
		this._recordGraph = _recordGraph;
		graphModified();
	ecaAttributeChanged("recordGraph", oldValue, _recordGraph);
	}

	public org.pcollections.PSet<java.lang.Boolean> get_setGraph() {
		return _setGraph;
	}

	public void set_setGraph(org.pcollections.PSet<java.lang.Boolean> _setGraph) {
		ecaAttributeChanging("setGraph", this._setGraph, _setGraph);
		Object oldValue = this._setGraph;
		this._setGraph = _setGraph;
		graphModified();
	ecaAttributeChanged("setGraph", oldValue, _setGraph);
	}

	public java.lang.String get_stringGraph() {
		return _stringGraph;
	}

	public void set_stringGraph(java.lang.String _stringGraph) {
		ecaAttributeChanging("stringGraph", this._stringGraph, _stringGraph);
		Object oldValue = this._stringGraph;
		this._stringGraph = _stringGraph;
		graphModified();
	ecaAttributeChanged("stringGraph", oldValue, _stringGraph);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_boolGraph = io.matchBoolean();
		set_boolGraph(_boolGraph);
		
		if (io.isNextToken("[")) {
			org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListGraph = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				org.pcollections.PVector<java.lang.Boolean> $_complexListGraphElement = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $$_complexListGraphElement = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $$_complexListGraphElementElement;
						$$_complexListGraphElementElement = io.matchBoolean();
						$$_complexListGraphElement = $$_complexListGraphElement.plus($$_complexListGraphElementElement);
					}
					io.match("]");
					$_complexListGraphElement = $$_complexListGraphElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					$_complexListGraphElement = null;
				} else {
					$_complexListGraphElement = null;
				}
				$_complexListGraph = $_complexListGraph.plus($_complexListGraphElement);
			}
			io.match("]");
			_complexListGraph = $_complexListGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_complexListGraph = null;
		} else {
			_complexListGraph = null;
		}
		set_complexListGraph(_complexListGraph);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapGraph = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PVector<java.lang.Boolean> _complexMapGraphKey = null;
					org.pcollections.PSet<java.lang.Boolean> _complexMapGraphValue = null;
				
				if (io.isNextToken("[")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexMapGraphKey = de.uni_koblenz.jgralab.JGraLab.vector();
					io.match("[");
					while (!io.isNextToken("]")) {
						boolean $_complexMapGraphKeyElement;
						$_complexMapGraphKeyElement = io.matchBoolean();
						$_complexMapGraphKey = $_complexMapGraphKey.plus($_complexMapGraphKeyElement);
					}
					io.match("]");
					_complexMapGraphKey = $_complexMapGraphKey;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match(); 
					_complexMapGraphKey = null;
				} else {
					_complexMapGraphKey = null;
				}
				io.match("-");
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexMapGraphValue = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $_complexMapGraphValueElement;
						$_complexMapGraphValueElement = io.matchBoolean();
						$_complexMapGraphValue = $_complexMapGraphValue.plus($_complexMapGraphValueElement);
					}
					io.match("}");
					_complexMapGraphValue = $_complexMapGraphValue;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					_complexMapGraphValue = null;
				} else {
					_complexMapGraphValue = null;
				}
				$_complexMapGraph = $_complexMapGraph.plus(_complexMapGraphKey, _complexMapGraphValue);
			}
			io.match("}");
			_complexMapGraph = $_complexMapGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexMapGraph = null;
		} else {
			_complexMapGraph = null;
		}
		set_complexMapGraph(_complexMapGraph);
		
		if (io.isNextToken("{")) {
			org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetGraph = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				org.pcollections.PSet<java.lang.Boolean> $_complexSetGraphElement = null;
				
				if (io.isNextToken("{")) {
					org.pcollections.PSet<java.lang.Boolean> $$_complexSetGraphElement = de.uni_koblenz.jgralab.JGraLab.set();
					io.match("{");
					while (!io.isNextToken("}")) {
						boolean $$_complexSetGraphElementElement;
						$$_complexSetGraphElementElement = io.matchBoolean();
						$$_complexSetGraphElement = $$_complexSetGraphElement.plus($$_complexSetGraphElementElement);
					}
					io.match("}");
					$_complexSetGraphElement = $$_complexSetGraphElement;
				} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
					io.match();
					$_complexSetGraphElement = null;
				} else {
					$_complexSetGraphElement = null;
				}
				$_complexSetGraph = $_complexSetGraph.plus($_complexSetGraphElement);
			}
			io.match("}");
			_complexSetGraph = $_complexSetGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_complexSetGraph = null;
		} else {
			_complexSetGraph = null;
		}
		set_complexSetGraph(_complexSetGraph);
		_doubleGraph = io.matchDouble();
		set_doubleGraph(_doubleGraph);
		_enumGraph = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
		set_enumGraph(_enumGraph);
		_intGraph = io.matchInteger();
		set_intGraph(_intGraph);
		
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Boolean> $_listGraph = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				boolean $_listGraphElement;
				$_listGraphElement = io.matchBoolean();
				$_listGraph = $_listGraph.plus($_listGraphElement);
			}
			io.match("]");
			_listGraph = $_listGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_listGraph = null;
		} else {
			_listGraph = null;
		}
		set_listGraph(_listGraph);
		_longGraph = io.matchLong();
		set_longGraph(_longGraph);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapGraph = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				int _mapGraphKey;
					boolean _mapGraphValue;
				_mapGraphKey = io.matchInteger();
				io.match("-");
				_mapGraphValue = io.matchBoolean();
				$_mapGraph = $_mapGraph.plus(_mapGraphKey, _mapGraphValue);
			}
			io.match("}");
			_mapGraph = $_mapGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_mapGraph = null;
		} else {
			_mapGraph = null;
		}
		set_mapGraph(_mapGraph);
		
		if (io.isNextToken("(")) {
			_recordGraph = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_recordGraph = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_recordGraph(_recordGraph);
		
		if (io.isNextToken("{")) {
			org.pcollections.PSet<java.lang.Boolean> $_setGraph = de.uni_koblenz.jgralab.JGraLab.set();
			io.match("{");
			while (!io.isNextToken("}")) {
				boolean $_setGraphElement;
				$_setGraphElement = io.matchBoolean();
				$_setGraph = $_setGraph.plus($_setGraphElement);
			}
			io.match("}");
			_setGraph = $_setGraph;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_setGraph = null;
		} else {
			_setGraph = null;
		}
		set_setGraph(_setGraph);
		_stringGraph = io.matchUtfString();
		set_stringGraph(_stringGraph);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("boolGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_boolGraph = io.matchBoolean();
			set_boolGraph(_boolGraph);
			return;
		}
		if (attributeName.equals("complexListGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<org.pcollections.PVector<java.lang.Boolean>> $_complexListGraph = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					org.pcollections.PVector<java.lang.Boolean> $_complexListGraphElement = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $$_complexListGraphElement = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $$_complexListGraphElementElement;
							$$_complexListGraphElementElement = io.matchBoolean();
							$$_complexListGraphElement = $$_complexListGraphElement.plus($$_complexListGraphElementElement);
						}
						io.match("]");
						$_complexListGraphElement = $$_complexListGraphElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						$_complexListGraphElement = null;
					} else {
						$_complexListGraphElement = null;
					}
					$_complexListGraph = $_complexListGraph.plus($_complexListGraphElement);
				}
				io.match("]");
				_complexListGraph = $_complexListGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				_complexListGraph = null;
			} else {
				_complexListGraph = null;
			}
			set_complexListGraph(_complexListGraph);
			return;
		}
		if (attributeName.equals("complexMapGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<org.pcollections.PVector<java.lang.Boolean>, org.pcollections.PSet<java.lang.Boolean>> $_complexMapGraph = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PVector<java.lang.Boolean> _complexMapGraphKey = null;
						org.pcollections.PSet<java.lang.Boolean> _complexMapGraphValue = null;
					
					if (io.isNextToken("[")) {
						org.pcollections.PVector<java.lang.Boolean> $_complexMapGraphKey = de.uni_koblenz.jgralab.JGraLab.vector();
						io.match("[");
						while (!io.isNextToken("]")) {
							boolean $_complexMapGraphKeyElement;
							$_complexMapGraphKeyElement = io.matchBoolean();
							$_complexMapGraphKey = $_complexMapGraphKey.plus($_complexMapGraphKeyElement);
						}
						io.match("]");
						_complexMapGraphKey = $_complexMapGraphKey;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match(); 
						_complexMapGraphKey = null;
					} else {
						_complexMapGraphKey = null;
					}
					io.match("-");
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $_complexMapGraphValue = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $_complexMapGraphValueElement;
							$_complexMapGraphValueElement = io.matchBoolean();
							$_complexMapGraphValue = $_complexMapGraphValue.plus($_complexMapGraphValueElement);
						}
						io.match("}");
						_complexMapGraphValue = $_complexMapGraphValue;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						_complexMapGraphValue = null;
					} else {
						_complexMapGraphValue = null;
					}
					$_complexMapGraph = $_complexMapGraph.plus(_complexMapGraphKey, _complexMapGraphValue);
				}
				io.match("}");
				_complexMapGraph = $_complexMapGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_complexMapGraph = null;
			} else {
				_complexMapGraph = null;
			}
			set_complexMapGraph(_complexMapGraph);
			return;
		}
		if (attributeName.equals("complexSetGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<org.pcollections.PSet<java.lang.Boolean>> $_complexSetGraph = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					org.pcollections.PSet<java.lang.Boolean> $_complexSetGraphElement = null;
					
					if (io.isNextToken("{")) {
						org.pcollections.PSet<java.lang.Boolean> $$_complexSetGraphElement = de.uni_koblenz.jgralab.JGraLab.set();
						io.match("{");
						while (!io.isNextToken("}")) {
							boolean $$_complexSetGraphElementElement;
							$$_complexSetGraphElementElement = io.matchBoolean();
							$$_complexSetGraphElement = $$_complexSetGraphElement.plus($$_complexSetGraphElementElement);
						}
						io.match("}");
						$_complexSetGraphElement = $$_complexSetGraphElement;
					} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
						io.match();
						$_complexSetGraphElement = null;
					} else {
						$_complexSetGraphElement = null;
					}
					$_complexSetGraph = $_complexSetGraph.plus($_complexSetGraphElement);
				}
				io.match("}");
				_complexSetGraph = $_complexSetGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_complexSetGraph = null;
			} else {
				_complexSetGraph = null;
			}
			set_complexSetGraph(_complexSetGraph);
			return;
		}
		if (attributeName.equals("doubleGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_doubleGraph = io.matchDouble();
			set_doubleGraph(_doubleGraph);
			return;
		}
		if (attributeName.equals("enumGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_enumGraph = de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEnumDomain.valueOfPermitNull(io.matchEnumConstant());
			set_enumGraph(_enumGraph);
			return;
		}
		if (attributeName.equals("intGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_intGraph = io.matchInteger();
			set_intGraph(_intGraph);
			return;
		}
		if (attributeName.equals("listGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Boolean> $_listGraph = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					boolean $_listGraphElement;
					$_listGraphElement = io.matchBoolean();
					$_listGraph = $_listGraph.plus($_listGraphElement);
				}
				io.match("]");
				_listGraph = $_listGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				_listGraph = null;
			} else {
				_listGraph = null;
			}
			set_listGraph(_listGraph);
			return;
		}
		if (attributeName.equals("longGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_longGraph = io.matchLong();
			set_longGraph(_longGraph);
			return;
		}
		if (attributeName.equals("mapGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.Integer, java.lang.Boolean> $_mapGraph = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					int _mapGraphKey;
						boolean _mapGraphValue;
					_mapGraphKey = io.matchInteger();
					io.match("-");
					_mapGraphValue = io.matchBoolean();
					$_mapGraph = $_mapGraph.plus(_mapGraphKey, _mapGraphValue);
				}
				io.match("}");
				_mapGraph = $_mapGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_mapGraph = null;
			} else {
				_mapGraph = null;
			}
			set_mapGraph(_mapGraph);
			return;
		}
		if (attributeName.equals("recordGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("(")) {
				_recordGraph = new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestRecordDomain(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_recordGraph = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_recordGraph(_recordGraph);
			return;
		}
		if (attributeName.equals("setGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PSet<java.lang.Boolean> $_setGraph = de.uni_koblenz.jgralab.JGraLab.set();
				io.match("{");
				while (!io.isNextToken("}")) {
					boolean $_setGraphElement;
					$_setGraphElement = io.matchBoolean();
					$_setGraph = $_setGraph.plus($_setGraphElement);
				}
				io.match("}");
				_setGraph = $_setGraph;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_setGraph = null;
			} else {
				_setGraph = null;
			}
			set_setGraph(_setGraph);
			return;
		}
		if (attributeName.equals("stringGraph")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_stringGraph = io.matchUtfString();
			set_stringGraph(_stringGraph);
			return;
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(_boolGraph);
		if (_complexListGraph != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> _complexListGraphElement : _complexListGraph) {
				if (_complexListGraphElement != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean _complexListGraphElementElement : _complexListGraphElement) {
						io.writeBoolean(_complexListGraphElementElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_complexMapGraph != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PVector<java.lang.Boolean> key: _complexMapGraph.keySet()) {
				org.pcollections.PSet<java.lang.Boolean> value = _complexMapGraph.get(key);
				if (key != null) {
					io.writeSpace();
					io.write("[");
					io.noSpace();
					for (boolean keyElement : key) {
						io.writeBoolean(keyElement);
					}
					io.write("]");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				if (value != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean valueElement : value) {
						io.writeBoolean(valueElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_complexSetGraph != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (org.pcollections.PSet<java.lang.Boolean> _complexSetGraphElement : _complexSetGraph) {
				if (_complexSetGraphElement != null) {
					io.writeSpace();
					io.write("{");
					io.noSpace();
					for (boolean _complexSetGraphElementElement : _complexSetGraphElement) {
						io.writeBoolean(_complexSetGraphElementElement);
					}
					io.write("}");
					io.space();
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(_doubleGraph);
		if (_enumGraph != null) {
			io.writeIdentifier(_enumGraph.toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(_intGraph);
		if (_listGraph != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (boolean _listGraphElement : _listGraph) {
				io.writeBoolean(_listGraphElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeLong(_longGraph);
		if (_mapGraph != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (int key: _mapGraph.keySet()) {
				boolean value = _mapGraph.get(key);
				io.writeInteger(key);
				io.write(" -");
				io.writeBoolean(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_recordGraph != null) {
			_recordGraph.writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (_setGraph != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (boolean _setGraphElement : _setGraph) {
				io.writeBoolean(_setGraphElement);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(_stringGraph);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("boolGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(_boolGraph);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexListGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexListGraph != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> _complexListGraphElement : _complexListGraph) {
					if (_complexListGraphElement != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean _complexListGraphElementElement : _complexListGraphElement) {
							io.writeBoolean(_complexListGraphElementElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexMapGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexMapGraph != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PVector<java.lang.Boolean> key: _complexMapGraph.keySet()) {
					org.pcollections.PSet<java.lang.Boolean> value = _complexMapGraph.get(key);
					if (key != null) {
						io.writeSpace();
						io.write("[");
						io.noSpace();
						for (boolean keyElement : key) {
							io.writeBoolean(keyElement);
						}
						io.write("]");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					if (value != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean valueElement : value) {
							io.writeBoolean(valueElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("complexSetGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_complexSetGraph != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (org.pcollections.PSet<java.lang.Boolean> _complexSetGraphElement : _complexSetGraph) {
					if (_complexSetGraphElement != null) {
						io.writeSpace();
						io.write("{");
						io.noSpace();
						for (boolean _complexSetGraphElementElement : _complexSetGraphElement) {
							io.writeBoolean(_complexSetGraphElementElement);
						}
						io.write("}");
						io.space();
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("doubleGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(_doubleGraph);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("enumGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_enumGraph != null) {
				io.writeIdentifier(_enumGraph.toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("intGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_intGraph);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("listGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_listGraph != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (boolean _listGraphElement : _listGraph) {
					io.writeBoolean(_listGraphElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("longGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(_longGraph);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("mapGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_mapGraph != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (int key: _mapGraph.keySet()) {
					boolean value = _mapGraph.get(key);
					io.writeInteger(key);
					io.write(" -");
					io.writeBoolean(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("recordGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_recordGraph != null) {
				_recordGraph.writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("setGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_setGraph != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (boolean _setGraphElement : _setGraph) {
					io.writeBoolean(_setGraphElement);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("stringGraph")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_stringGraph);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("DefaultValueTestGraph doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for TestEdge ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge getFirstTestEdge() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge createTestEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex alpha, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge createTestEdge(int id, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex alpha, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> createEdge(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for TestSubVertex ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex getFirstTestSubVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex createTestSubVertex() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex createTestSubVertex(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.VC, id, this);
	}

	// ------------------------ Code for TestVertex ------------------------

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex getFirstTestVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex createTestVertex() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex createTestVertex(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> createVertex(de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.VC, id, this);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge> getTestEdgeEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestEdge.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex> getTestVertexVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestVertex.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex> getTestSubVertexVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex>(this, de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.TestSubVertex.class);
	}
	
}
