/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.RecordDomain;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema DefaultValueTestSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class DefaultValueTestSchema extends SchemaImpl {
	public final GraphClass gc_DefaultValueTestGraph;
	public final VertexClass vc_TestVertex;
	public final VertexClass vc_TestSubVertex;
	public final EdgeClass ec_TestEdge;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<DefaultValueTestSchema> theInstance = new WeakReference<DefaultValueTestSchema>(null);
	
	/**
	 * @return the singleton instance of DefaultValueTestSchema
	 */
	public static DefaultValueTestSchema instance() {
		DefaultValueTestSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (DefaultValueTestSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new DefaultValueTestSchema();
			theInstance = new WeakReference<DefaultValueTestSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a DefaultValueTestSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private DefaultValueTestSchema() {
		super("DefaultValueTestSchema", "de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema");

		{
			EnumDomain dom = createEnumDomain("TestEnumDomain");
			dom.addConst("FIRST");
			dom.addConst("SECOND");
			dom.addConst("THIRD");
		}

		createSetDomain(getDomain("Boolean"));

		createListDomain(getDomain("Boolean"));

		createMapDomain(getDomain("Integer"), getDomain("Boolean"));

		createSetDomain(getDomain("Set<Boolean>"));

		createMapDomain(getDomain("List<Boolean>"), getDomain("Set<Boolean>"));

		createListDomain(getDomain("List<Boolean>"));

		{
			RecordDomain dom = createRecordDomain("TestRecordDomain");
			dom.addComponent("boolRecord", getDomain("Boolean"));
			dom.addComponent("doubleRecord", getDomain("Double"));
			dom.addComponent("enumRecord", getDomain("TestEnumDomain"));
			dom.addComponent("intRecord", getDomain("Integer"));
			dom.addComponent("listRecord", getDomain("List<Boolean>"));
			dom.addComponent("longRecord", getDomain("Long"));
			dom.addComponent("mapRecord", getDomain("Map<Integer, Boolean>"));
			dom.addComponent("setRecord", getDomain("Set<Boolean>"));
			dom.addComponent("stringRecord", getDomain("String"));
		}

		{
			GraphClass gc = gc_DefaultValueTestGraph = createGraphClass("DefaultValueTestGraph");
			gc.setAbstract(false);
			gc.addAttribute(createAttribute("boolGraph", getDomain("Boolean"), getAttributedElementClass("DefaultValueTestGraph"), "t"));
			gc.addAttribute(createAttribute("complexListGraph", getDomain("List<List<Boolean>>"), getAttributedElementClass("DefaultValueTestGraph"), "[[t] [f] [t]]"));
			gc.addAttribute(createAttribute("complexMapGraph", getDomain("Map<List<Boolean>, Set<Boolean>>"), getAttributedElementClass("DefaultValueTestGraph"), "{[t] - {t} [f] - {f}}"));
			gc.addAttribute(createAttribute("complexSetGraph", getDomain("Set<Set<Boolean>>"), getAttributedElementClass("DefaultValueTestGraph"), "{{t} {f}}"));
			gc.addAttribute(createAttribute("doubleGraph", getDomain("Double"), getAttributedElementClass("DefaultValueTestGraph"), "1.1"));
			gc.addAttribute(createAttribute("enumGraph", getDomain("TestEnumDomain"), getAttributedElementClass("DefaultValueTestGraph"), "FIRST"));
			gc.addAttribute(createAttribute("intGraph", getDomain("Integer"), getAttributedElementClass("DefaultValueTestGraph"), "1"));
			gc.addAttribute(createAttribute("listGraph", getDomain("List<Boolean>"), getAttributedElementClass("DefaultValueTestGraph"), "[t f t]"));
			gc.addAttribute(createAttribute("longGraph", getDomain("Long"), getAttributedElementClass("DefaultValueTestGraph"), "1"));
			gc.addAttribute(createAttribute("mapGraph", getDomain("Map<Integer, Boolean>"), getAttributedElementClass("DefaultValueTestGraph"), "{1 - t 2 - f 3 - t}"));
			gc.addAttribute(createAttribute("recordGraph", getDomain("TestRecordDomain"), getAttributedElementClass("DefaultValueTestGraph"), "(t 1.1 FIRST 1 [t f t] 1 {1 - t 2 - f 3 - t} {t f} \"test\")"));
			gc.addAttribute(createAttribute("setGraph", getDomain("Set<Boolean>"), getAttributedElementClass("DefaultValueTestGraph"), "{t f}"));
			gc.addAttribute(createAttribute("stringGraph", getDomain("String"), getAttributedElementClass("DefaultValueTestGraph"), "\"test\""));
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_TestVertex = gc.createVertexClass("TestVertex");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("boolVertex", getDomain("Boolean"), getAttributedElementClass("TestVertex"), "t"));
				vc.addAttribute(createAttribute("complexListVertex", getDomain("List<List<Boolean>>"), getAttributedElementClass("TestVertex"), "[[t] [f] [t]]"));
				vc.addAttribute(createAttribute("complexMapVertex", getDomain("Map<List<Boolean>, Set<Boolean>>"), getAttributedElementClass("TestVertex"), "{[t] - {t} [f] - {f}}"));
				vc.addAttribute(createAttribute("complexSetVertex", getDomain("Set<Set<Boolean>>"), getAttributedElementClass("TestVertex"), "{{t} {f}}"));
				vc.addAttribute(createAttribute("doubleVertex", getDomain("Double"), getAttributedElementClass("TestVertex"), "1.1"));
				vc.addAttribute(createAttribute("enumVertex", getDomain("TestEnumDomain"), getAttributedElementClass("TestVertex"), "FIRST"));
				vc.addAttribute(createAttribute("intVertex", getDomain("Integer"), getAttributedElementClass("TestVertex"), "1"));
				vc.addAttribute(createAttribute("listVertex", getDomain("List<Boolean>"), getAttributedElementClass("TestVertex"), "[t f t]"));
				vc.addAttribute(createAttribute("longVertex", getDomain("Long"), getAttributedElementClass("TestVertex"), "1"));
				vc.addAttribute(createAttribute("mapVertex", getDomain("Map<Integer, Boolean>"), getAttributedElementClass("TestVertex"), "{1 - t 2 - f 3 - t}"));
				vc.addAttribute(createAttribute("recordVertex", getDomain("TestRecordDomain"), getAttributedElementClass("TestVertex"), "(t 1.1 FIRST 1 [t f t] 1 {1 - t 2 - f 3 - t} {t f} \"test\")"));
				vc.addAttribute(createAttribute("setVertex", getDomain("Set<Boolean>"), getAttributedElementClass("TestVertex"), "{t f}"));
				vc.addAttribute(createAttribute("stringVertex", getDomain("String"), getAttributedElementClass("TestVertex"), "\"test\""));
			}

			{
				VertexClass vc = vc_TestSubVertex = gc.createVertexClass("TestSubVertex");
				vc.setAbstract(false);
				vc.addSuperClass(vc_TestVertex);
			}

			{
				EdgeClass ec = ec_TestEdge = gc.createEdgeClass("TestEdge",
					vc_TestVertex, 0, 2147483647, "start", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_TestVertex, 0, 2147483647, "end", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("boolEdge", getDomain("Boolean"), getAttributedElementClass("TestEdge"), "t"));
				ec.addAttribute(createAttribute("complexListEdge", getDomain("List<List<Boolean>>"), getAttributedElementClass("TestEdge"), "[[t] [f] [t]]"));
				ec.addAttribute(createAttribute("complexMapEdge", getDomain("Map<List<Boolean>, Set<Boolean>>"), getAttributedElementClass("TestEdge"), "{[t] - {t} [f] - {f}}"));
				ec.addAttribute(createAttribute("complexSetEdge", getDomain("Set<Set<Boolean>>"), getAttributedElementClass("TestEdge"), "{{t} {f}}"));
				ec.addAttribute(createAttribute("doubleEdge", getDomain("Double"), getAttributedElementClass("TestEdge"), "1.1"));
				ec.addAttribute(createAttribute("enumEdge", getDomain("TestEnumDomain"), getAttributedElementClass("TestEdge"), "FIRST"));
				ec.addAttribute(createAttribute("intEdge", getDomain("Integer"), getAttributedElementClass("TestEdge"), "1"));
				ec.addAttribute(createAttribute("listEdge", getDomain("List<Boolean>"), getAttributedElementClass("TestEdge"), "[t f t]"));
				ec.addAttribute(createAttribute("longEdge", getDomain("Long"), getAttributedElementClass("TestEdge"), "1"));
				ec.addAttribute(createAttribute("mapEdge", getDomain("Map<Integer, Boolean>"), getAttributedElementClass("TestEdge"), "{1 - t 2 - f 3 - t}"));
				ec.addAttribute(createAttribute("recordEdge", getDomain("TestRecordDomain"), getAttributedElementClass("TestEdge"), "(t 1.1 FIRST 1 [t f t] 1 {1 - t 2 - f 3 - t} {t f} \"test\")"));
				ec.addAttribute(createAttribute("setEdge", getDomain("Set<Boolean>"), getAttributedElementClass("TestEdge"), "{t f}"));
				ec.addAttribute(createAttribute("stringEdge", getDomain("String"), getAttributedElementClass("TestEdge"), "\"test\""));
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.std.DefaultValueTestGraphFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.trans.DefaultValueTestGraphFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.impl.db.DefaultValueTestGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new DefaultValueTestGraph graph.
	*/
	public DefaultValueTestGraph createDefaultValueTestGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createDefaultValueTestGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new DefaultValueTestGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public DefaultValueTestGraph createDefaultValueTestGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_DefaultValueTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new DefaultValueTestGraph graph.
	*/
	public DefaultValueTestGraph createDefaultValueTestGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_DefaultValueTestGraph, null, 100, 100);
	}

	/**
	 * Creates a new DefaultValueTestGraph graph.
	*/
	public DefaultValueTestGraph createDefaultValueTestGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_DefaultValueTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new DefaultValueTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public DefaultValueTestGraph createDefaultValueTestGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createDefaultValueTestGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new DefaultValueTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public DefaultValueTestGraph createDefaultValueTestGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		DefaultValueTestGraph graph = graphFactory.createGraph(gc_DefaultValueTestGraph, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadDefaultValueTestGraph(filename, factory, null);
	}

	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadDefaultValueTestGraph(filename, factory, pf);
	}

	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadDefaultValueTestGraph(filename, factory, null);
	}

	
	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadDefaultValueTestGraph(filename, factory, pf);
	}

	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public DefaultValueTestGraph loadDefaultValueTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
