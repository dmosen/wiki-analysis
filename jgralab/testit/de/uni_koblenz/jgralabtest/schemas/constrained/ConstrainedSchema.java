/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.constrained;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;
import de.uni_koblenz.jgralab.schema.impl.ConstraintImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema ConstrainedSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class ConstrainedSchema extends SchemaImpl {
	public final GraphClass gc_ConstrainedGraph;
	public final VertexClass vc_ConstrainedNode;
	public final VertexClass vc_OtherConstrainedNode;
	public final EdgeClass ec_ConstrainedLink;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<ConstrainedSchema> theInstance = new WeakReference<ConstrainedSchema>(null);
	
	/**
	 * @return the singleton instance of ConstrainedSchema
	 */
	public static ConstrainedSchema instance() {
		ConstrainedSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (ConstrainedSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new ConstrainedSchema();
			theInstance = new WeakReference<ConstrainedSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a ConstrainedSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private ConstrainedSchema() {
		super("ConstrainedSchema", "de.uni_koblenz.jgralabtest.schemas.constrained");

		{
			GraphClass gc = gc_ConstrainedGraph = createGraphClass("ConstrainedGraph");
			gc.setAbstract(false);
			gc.addConstraint(new ConstraintImpl("I'm a broken GReQL predicate constraint.", "brokenPredicate", null));
			gc.addConstraint(new ConstraintImpl("I'm a broken GReQL offendingElements constraint.", "false", "brokenOffendingElements"));
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_ConstrainedNode = gc.createVertexClass("ConstrainedNode");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("ConstrainedNode"), null));
				vc.addAttribute(createAttribute("uid", getDomain("Integer"), getAttributedElementClass("ConstrainedNode"), null));
				vc.addConstraint(new ConstraintImpl("Attribute name must be set.", "forall n : V{ConstrainedNode} @ isDefined(n.name)", "from n : V{ConstrainedNode} with isUndefined(n.name) reportSet n end"));
				vc.addConstraint(new ConstraintImpl("Attribute uid must be positive.", "forall n : V{ConstrainedNode} @ n.uid > 0", null));
			}

			{
				VertexClass vc = vc_OtherConstrainedNode = gc.createVertexClass("OtherConstrainedNode");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ConstrainedNode);
				vc.addAttribute(createAttribute("niceness", getDomain("Integer"), getAttributedElementClass("OtherConstrainedNode"), null));
				vc.addConstraint(new ConstraintImpl("Attribute niceness has to be between 0 and 20.", "forall n : V{OtherConstrainedNode} @ n.niceness >= 0 and n.niceness <= 20", null));
			}

			{
				EdgeClass ec = ec_ConstrainedLink = gc.createEdgeClass("ConstrainedLink",
					vc_ConstrainedNode, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_ConstrainedNode, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("uid", getDomain("Integer"), getAttributedElementClass("ConstrainedLink"), null));
				ec.addConstraint(new ConstraintImpl("Attribute uid has to be positive.", "forall l : E{ConstrainedLink} @ l.uid > 0", "from l : E{ConstrainedLink} with l.uid <= 0 reportSet l end"));
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.constrained.impl.std.ConstrainedGraphFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.constrained.impl.trans.ConstrainedGraphFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.constrained.impl.db.ConstrainedGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new ConstrainedGraph graph.
	*/
	public ConstrainedGraph createConstrainedGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createConstrainedGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new ConstrainedGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public ConstrainedGraph createConstrainedGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_ConstrainedGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new ConstrainedGraph graph.
	*/
	public ConstrainedGraph createConstrainedGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_ConstrainedGraph, null, 100, 100);
	}

	/**
	 * Creates a new ConstrainedGraph graph.
	*/
	public ConstrainedGraph createConstrainedGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_ConstrainedGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new ConstrainedGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public ConstrainedGraph createConstrainedGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createConstrainedGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new ConstrainedGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public ConstrainedGraph createConstrainedGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		ConstrainedGraph graph = graphFactory.createGraph(gc_ConstrainedGraph, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public ConstrainedGraph loadConstrainedGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadConstrainedGraph(filename, factory, null);
	}

	public ConstrainedGraph loadConstrainedGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadConstrainedGraph(filename, factory, pf);
	}

	public ConstrainedGraph loadConstrainedGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadConstrainedGraph(filename, factory, null);
	}

	
	public ConstrainedGraph loadConstrainedGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadConstrainedGraph(filename, factory, pf);
	}

	public ConstrainedGraph loadConstrainedGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public ConstrainedGraph loadConstrainedGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
