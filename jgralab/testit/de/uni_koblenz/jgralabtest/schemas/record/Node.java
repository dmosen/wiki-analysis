/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.record;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Node extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.record.RecordTestSchema.instance().vc_Node;

	public org.pcollections.PMap<java.lang.Integer, java.lang.String> get_nodeMap();

	public void set_nodeMap(org.pcollections.PMap<java.lang.Integer, java.lang.String> _nodeMap);

	public de.uni_koblenz.jgralabtest.schemas.record.Hugo get_testEnum();

	public void set_testEnum(de.uni_koblenz.jgralabtest.schemas.record.Hugo _testEnum);

	public org.pcollections.PVector<java.lang.String> get_testList();

	public void set_testList(org.pcollections.PVector<java.lang.String> _testList);

	public de.uni_koblenz.jgralabtest.schemas.record.BooleanType get_testRecord();

	public void set_testRecord(de.uni_koblenz.jgralabtest.schemas.record.BooleanType _testRecord);

	public org.pcollections.PSet<java.lang.Integer> get_testSet();

	public void set_testSet(org.pcollections.PSet<java.lang.Integer> _testSet);

	public java.lang.String get_testString();

	public void set_testString(java.lang.String _testString);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.record.Node vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.record.Node getNextNode();

	/**
	 * @return the first edge of class Link at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.record.Link getFirstLinkIncidence();

	/**
	 * @return the first edge of class Link at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.record.Link getFirstLinkIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>target</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.record.Link add_target(de.uni_koblenz.jgralabtest.schemas.record.Node vertex);
		/**
		 * removes all target adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.record.Node> remove_target();
		/**
		 * removes the given vertex as <code>target</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_target(de.uni_koblenz.jgralabtest.schemas.record.Node vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'target'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.record.Node> get_target();
		/**
		 * adds the given vertex as <code>source</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.record.Link add_source(de.uni_koblenz.jgralabtest.schemas.record.Node vertex);
		/**
		 * removes all source adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.record.Node> remove_source();
		/**
		 * removes the given vertex as <code>source</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_source(de.uni_koblenz.jgralabtest.schemas.record.Node vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'source'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.record.Link</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.record.Node> get_source();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Link or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.record.Link> getLinkIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Link.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.record.Link> getLinkIncidences(EdgeDirection direction);
}
