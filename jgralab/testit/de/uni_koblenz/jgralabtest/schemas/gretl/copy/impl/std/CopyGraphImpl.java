/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.copy.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class CopyGraphImpl extends GraphImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyGraph, de.uni_koblenz.jgralab.Graph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CopyGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CopyGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CopyGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public CopyGraphImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyGraph.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("CopyGraph doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("CopyGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("CopyGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("CopyGraph doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for CopyVertex ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex getFirstCopyVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex.VC);
	}

	// ------------------------ Code for IsPartOfWhole ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole getFirstIsPartOfWhole() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole createIsPartOfWhole(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart alpha, de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole createIsPartOfWhole(int id, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart alpha, de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for IsPartOfWholePart ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart getFirstIsPartOfWholePart() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart createIsPartOfWholePart(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part alpha, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart createIsPartOfWholePart(int id, de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part alpha, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Part ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part getFirstPart() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part createPart() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part createPart(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part.VC, id, this);
	}

	// ------------------------ Code for Whole ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole getFirstWhole() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole.VC);
	}

	// ------------------------ Code for WholeOne ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne getFirstWholeOne() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne createWholeOne() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne createWholeOne(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne.VC, id, this);
	}

	// ------------------------ Code for WholePart ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart getFirstWholePart() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart createWholePart() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart createWholePart(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart.VC, id, this);
	}

	// ------------------------ Code for WholeTwo ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo getFirstWholeTwo() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo createWholeTwo() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo createWholeTwo(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.VC, id, this);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole> getIsPartOfWholeEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart> getIsPartOfWholePartEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWholePart.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo> getWholeTwoVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole> getWholeVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne> getWholeOneVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeOne.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part> getPartVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.Part.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart> getWholePartVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholePart.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex> getCopyVertexVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex.class);
	}
	
}
