/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.copy.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class WholeTwoImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole, de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo {

	protected java.lang.String _name;

	protected int _uid;

	public WholeTwoImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("uid")) return (T) (java.lang.Integer) get_uid();
		throw new NoSuchAttributeException("WholeTwo doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("uid")) {
			set_uid((java.lang.Integer) data);
			return;
		}
		throw new NoSuchAttributeException("WholeTwo doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
	ecaAttributeChanged("name", oldValue, _name);
	}

	public int get_uid() {
		return _uid;
	}

	public void set_uid(int _uid) {
		ecaAttributeChanging("uid", this._uid, _uid);
		Object oldValue = this._uid;
		this._uid = _uid;
		graphModified();
	ecaAttributeChanged("uid", oldValue, _uid);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
		_uid = io.matchInteger();
		set_uid(_uid);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("uid")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_uid = io.matchInteger();
			set_uid(_uid);
			return;
		}
		throw new NoSuchAttributeException("WholeTwo doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
		io.writeInteger(_uid);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("uid")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_uid);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("WholeTwo doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex getNextCopyVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.CopyVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole getNextWhole() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.Whole.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo getNextWholeTwo() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.copy.WholeTwo.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole getFirstIsPartOfWholeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole getFirstIsPartOfWholeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole> getIsPartOfWholeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole> getIsPartOfWholeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole>(this, de.uni_koblenz.jgralabtest.schemas.gretl.copy.IsPartOfWhole.class, direction);
	}
}
