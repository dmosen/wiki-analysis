/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Assoc extends de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.NamedElement {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.varro.UMLSchema.instance().vc_uml_Assoc;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Assoc vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Assoc getNextAssoc();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.NamedElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.NamedElement getNextNamedElement();

	/**
	 * @return the first edge of class ContainsAssoc at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc getFirstContainsAssocIncidence();

	/**
	 * @return the first edge of class ContainsAssoc at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc getFirstContainsAssocIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAssocEnd at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd getFirstHasAssocEndIncidence();

	/**
	 * @return the first edge of class HasAssocEnd at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd getFirstHasAssocEndIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>elemOwner</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc add_elemOwner(de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Package vertex);
		/**
		 * removes all elemOwner adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Package> remove_elemOwner();
		/**
		 * removes the given vertex as <code>elemOwner</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_elemOwner(de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Package vertex);
		/**
		 * @return the vertex to this one with the rolename 'elemOwner' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.Package get_elemOwner();
		/**
		 * adds the given vertex as <code>feature</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd add_feature(de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.AssocEnd vertex);
		/**
		 * removes all feature adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.AssocEnd> remove_feature();
		/**
		 * removes the given vertex as <code>feature</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_feature(de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.AssocEnd vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'feature'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.AssocEnd> get_feature();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsAssoc or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc> getContainsAssocIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsAssoc.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.ContainsAssoc> getContainsAssocIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasAssocEnd or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd> getHasAssocEndIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasAssocEnd.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.varro.uml.HasAssocEnd> getHasAssocEndIncidences(EdgeDirection direction);
}
