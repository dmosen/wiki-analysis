/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class SimpleAttributeImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.Attribute, de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute {

	protected java.lang.String _name;

	protected java.lang.String _value;

	public SimpleAttributeImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("value")) return (T) get_value();
		throw new NoSuchAttributeException("SimpleAttribute doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("value")) {
			set_value((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("SimpleAttribute doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
	ecaAttributeChanged("name", oldValue, _name);
	}

	public java.lang.String get_value() {
		return _value;
	}

	public void set_value(java.lang.String _value) {
		ecaAttributeChanging("value", this._value, _value);
		Object oldValue = this._value;
		this._value = _value;
		graphModified();
	ecaAttributeChanged("value", oldValue, _value);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
		_value = io.matchUtfString();
		set_value(_value);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("value")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_value = io.matchUtfString();
			set_value(_value);
			return;
		}
		throw new NoSuchAttributeException("SimpleAttribute doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
		io.writeUtfString(_value);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("value")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_value);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("SimpleAttribute doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.Attribute getNextAttribute() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.Attribute)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.Attribute.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute getNextSimpleAttribute() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.SimpleAttribute.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute getFirstHasAttributeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute getFirstHasAttributeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute> getHasAttributeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute>(this, de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute> getHasAttributeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute>(this, de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.HasAttribute.class, direction);
	}
}
