/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema IntegratedBedslPddslSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class IntegratedBedslPddslSchema extends SchemaImpl {
	public final GraphClass gc_IntegratedBedslPddslGraph;
	public final VertexClass vc_Entity;
	public final VertexClass vc_Attribute;
	public final VertexClass vc_Element;
	public final VertexClass vc_ReferenceAttribute;
	public final VertexClass vc_SimpleAttribute;
	public final VertexClass vc_Slot;
	public final VertexClass vc_Chassis;
	public final VertexClass vc_Card;
	public final VertexClass vc_Configuration;
	public final EdgeClass ec_References;
	public final EdgeClass ec_HasCard;
	public final EdgeClass ec_HasAttribute;
	public final EdgeClass ec_HasSlot;
	public final EdgeClass ec_HasSupertype;
	public final EdgeClass ec_HasConfig;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<IntegratedBedslPddslSchema> theInstance = new WeakReference<IntegratedBedslPddslSchema>(null);
	
	/**
	 * @return the singleton instance of IntegratedBedslPddslSchema
	 */
	public static IntegratedBedslPddslSchema instance() {
		IntegratedBedslPddslSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (IntegratedBedslPddslSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new IntegratedBedslPddslSchema();
			theInstance = new WeakReference<IntegratedBedslPddslSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a IntegratedBedslPddslSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private IntegratedBedslPddslSchema() {
		super("IntegratedBedslPddslSchema", "de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl");

		{
			EnumDomain dom = createEnumDomain("TransformationSource");
			dom.addConst("BEDSL");
			dom.addConst("PDDSL");
			dom.addConst("BOTH");
		}

		{
			GraphClass gc = gc_IntegratedBedslPddslGraph = createGraphClass("IntegratedBedslPddslGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_Entity = gc.createVertexClass("Entity");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Entity"), null));
				vc.addAttribute(createAttribute("source", getDomain("TransformationSource"), getAttributedElementClass("Entity"), null));
			}

			{
				VertexClass vc = vc_Attribute = gc.createVertexClass("Attribute");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Attribute"), null));
			}

			{
				VertexClass vc = vc_Element = gc.createVertexClass("Element");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Entity);
			}

			{
				VertexClass vc = vc_ReferenceAttribute = gc.createVertexClass("ReferenceAttribute");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Attribute);
			}

			{
				VertexClass vc = vc_SimpleAttribute = gc.createVertexClass("SimpleAttribute");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Attribute);
				vc.addAttribute(createAttribute("value", getDomain("String"), getAttributedElementClass("SimpleAttribute"), null));
			}

			{
				VertexClass vc = vc_Slot = gc.createVertexClass("Slot");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Chassis = gc.createVertexClass("Chassis");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Card = gc.createVertexClass("Card");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Configuration = gc.createVertexClass("Configuration");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				EdgeClass ec = ec_References = gc.createEdgeClass("References",
					vc_ReferenceAttribute, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Entity, 1, 1, "entity", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasCard = gc.createEdgeClass("HasCard",
					vc_Slot, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Card, 1, 1, "card", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasAttribute = gc.createEdgeClass("HasAttribute",
					vc_Entity, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Attribute, 0, 2147483647, "attribute", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSlot = gc.createEdgeClass("HasSlot",
					vc_Configuration, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Slot, 1, 1, "slot", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSupertype = gc.createEdgeClass("HasSupertype",
					vc_Entity, 0, 2147483647, "subType", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Entity, 0, 1, "superType", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasConfig = gc.createEdgeClass("HasConfig",
					vc_Chassis, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Configuration, 1, 1, "config", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.gretl.bedsl_pddsl.impl.std.IntegratedBedslPddslGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph.
	*/
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createIntegratedBedslPddslGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_IntegratedBedslPddslGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph.
	*/
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_IntegratedBedslPddslGraph, null, 100, 100);
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph.
	*/
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_IntegratedBedslPddslGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createIntegratedBedslPddslGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new IntegratedBedslPddslGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public IntegratedBedslPddslGraph createIntegratedBedslPddslGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadIntegratedBedslPddslGraph(filename, factory, null);
	}

	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadIntegratedBedslPddslGraph(filename, factory, pf);
	}

	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadIntegratedBedslPddslGraph(filename, factory, null);
	}

	
	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadIntegratedBedslPddslGraph(filename, factory, pf);
	}

	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public IntegratedBedslPddslGraph loadIntegratedBedslPddslGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
