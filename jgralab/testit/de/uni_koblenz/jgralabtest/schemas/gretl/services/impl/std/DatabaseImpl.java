/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.services.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class DatabaseImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.services.Database, de.uni_koblenz.jgralab.Vertex {

	protected long _lastAccessTime;

	protected java.lang.String _name;

	protected java.lang.String _owner;

	public DatabaseImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("lastAccessTime")) return (T) (java.lang.Long) get_lastAccessTime();
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("owner")) return (T) get_owner();
		throw new NoSuchAttributeException("Database doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("lastAccessTime")) {
			set_lastAccessTime((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("owner")) {
			set_owner((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Database doesn't contain an attribute " + attributeName);
	}

	public long get_lastAccessTime() {
		return _lastAccessTime;
	}

	public void set_lastAccessTime(long _lastAccessTime) {
		ecaAttributeChanging("lastAccessTime", this._lastAccessTime, _lastAccessTime);
		Object oldValue = this._lastAccessTime;
		this._lastAccessTime = _lastAccessTime;
		graphModified();
	ecaAttributeChanged("lastAccessTime", oldValue, _lastAccessTime);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
	ecaAttributeChanged("name", oldValue, _name);
	}

	public java.lang.String get_owner() {
		return _owner;
	}

	public void set_owner(java.lang.String _owner) {
		ecaAttributeChanging("owner", this._owner, _owner);
		Object oldValue = this._owner;
		this._owner = _owner;
		graphModified();
	ecaAttributeChanged("owner", oldValue, _owner);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_lastAccessTime = io.matchLong();
		set_lastAccessTime(_lastAccessTime);
		_name = io.matchUtfString();
		set_name(_name);
		_owner = io.matchUtfString();
		set_owner(_owner);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("lastAccessTime")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_lastAccessTime = io.matchLong();
			set_lastAccessTime(_lastAccessTime);
			return;
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("owner")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_owner = io.matchUtfString();
			set_owner(_owner);
			return;
		}
		throw new NoSuchAttributeException("Database doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeLong(_lastAccessTime);
		io.writeUtfString(_name);
		io.writeUtfString(_owner);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("lastAccessTime")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(_lastAccessTime);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("owner")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_owner);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Database doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Database getNextDatabase() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Database)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses getFirstAccessesIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses getFirstAccessesIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses> getAccessesIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses> getAccessesIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.class, direction);
	}
}
