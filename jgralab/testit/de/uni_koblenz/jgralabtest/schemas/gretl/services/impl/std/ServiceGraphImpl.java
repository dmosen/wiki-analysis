/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.services.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class ServiceGraphImpl extends GraphImpl implements de.uni_koblenz.jgralab.Graph, de.uni_koblenz.jgralabtest.schemas.gretl.services.ServiceGraph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public ServiceGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public ServiceGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public ServiceGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.services.ServiceGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public ServiceGraphImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.services.ServiceGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.services.ServiceGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.services.ServiceGraph.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("ServiceGraph doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("ServiceGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("ServiceGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("ServiceGraph doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for Accesses ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses getFirstAccesses() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses createAccesses(de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService alpha, de.uni_koblenz.jgralabtest.schemas.gretl.services.Database omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses createAccesses(int id, de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService alpha, de.uni_koblenz.jgralabtest.schemas.gretl.services.Database omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for BasicService ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService getFirstBasicService() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService createBasicService() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService createBasicService(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService.VC, id, this);
	}

	// ------------------------ Code for Calls ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls getFirstCalls() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls createCalls(de.uni_koblenz.jgralabtest.schemas.gretl.services.Service alpha, de.uni_koblenz.jgralabtest.schemas.gretl.services.Service omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls createCalls(int id, de.uni_koblenz.jgralabtest.schemas.gretl.services.Service alpha, de.uni_koblenz.jgralabtest.schemas.gretl.services.Service omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for ComposedService ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService getFirstComposedService() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService createComposedService() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService createComposedService(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService.VC, id, this);
	}

	// ------------------------ Code for Database ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Database getFirstDatabase() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Database)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Database createDatabase() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Database> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Database createDatabase(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.Database> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.VC, id, this);
	}

	// ------------------------ Code for ProcessService ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService getFirstProcessService() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService createProcessService() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService createProcessService(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService.VC, id, this);
	}

	// ------------------------ Code for Service ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.services.Service getFirstService() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.services.Service)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.services.Service.VC);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses> getAccessesEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Accesses.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls> getCallsEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Calls.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService> getProcessServiceVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.ProcessService.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Database> getDatabaseVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Database>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Database.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService> getComposedServiceVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.ComposedService.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService> getBasicServiceVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.BasicService.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Service> getServiceVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.services.Service>(this, de.uni_koblenz.jgralabtest.schemas.gretl.services.Service.class);
	}
	
}
