/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class FamilyImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.families.Family, de.uni_koblenz.jgralab.Vertex {

	protected java.lang.String _lastName;

	protected java.lang.String _street;

	protected java.lang.String _town;

	public FamilyImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("lastName")) return (T) get_lastName();
		if (attributeName.equals("street")) return (T) get_street();
		if (attributeName.equals("town")) return (T) get_town();
		throw new NoSuchAttributeException("Family doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("lastName")) {
			set_lastName((java.lang.String) data);
			return;
		}
		if (attributeName.equals("street")) {
			set_street((java.lang.String) data);
			return;
		}
		if (attributeName.equals("town")) {
			set_town((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Family doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_lastName() {
		return _lastName;
	}

	public void set_lastName(java.lang.String _lastName) {
		ecaAttributeChanging("lastName", this._lastName, _lastName);
		Object oldValue = this._lastName;
		this._lastName = _lastName;
		graphModified();
	ecaAttributeChanged("lastName", oldValue, _lastName);
	}

	public java.lang.String get_street() {
		return _street;
	}

	public void set_street(java.lang.String _street) {
		ecaAttributeChanging("street", this._street, _street);
		Object oldValue = this._street;
		this._street = _street;
		graphModified();
	ecaAttributeChanged("street", oldValue, _street);
	}

	public java.lang.String get_town() {
		return _town;
	}

	public void set_town(java.lang.String _town) {
		ecaAttributeChanging("town", this._town, _town);
		Object oldValue = this._town;
		this._town = _town;
		graphModified();
	ecaAttributeChanged("town", oldValue, _town);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_lastName = io.matchUtfString();
		set_lastName(_lastName);
		_street = io.matchUtfString();
		set_street(_street);
		_town = io.matchUtfString();
		set_town(_town);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("lastName")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_lastName = io.matchUtfString();
			set_lastName(_lastName);
			return;
		}
		if (attributeName.equals("street")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_street = io.matchUtfString();
			set_street(_street);
			return;
		}
		if (attributeName.equals("town")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_town = io.matchUtfString();
			set_town(_town);
			return;
		}
		throw new NoSuchAttributeException("Family doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_lastName);
		io.writeUtfString(_street);
		io.writeUtfString(_town);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("lastName")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_lastName);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("street")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_street);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("town")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_town);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Family doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family getNextFamily() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon add_sons(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) this, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_sons() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_sons(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> get_sons() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.OUT);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother add_mother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) this, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_mother() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_mother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member get_mother() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.OUT);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat();
			}
			return null;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter add_daughters(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) this, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_daughters() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_daughters(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> get_daughters() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.OUT);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather add_father(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) this, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_father() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_father(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member get_father() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.OUT);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) edge.getThat();
			}
			return null;
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, direction);
	}
}
