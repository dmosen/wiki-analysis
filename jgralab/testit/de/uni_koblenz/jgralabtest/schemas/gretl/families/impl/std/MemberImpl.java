/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class MemberImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.families.Member, de.uni_koblenz.jgralab.Vertex {

	protected int _age;

	protected java.lang.String _firstName;

	public MemberImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("age")) return (T) (java.lang.Integer) get_age();
		if (attributeName.equals("firstName")) return (T) get_firstName();
		throw new NoSuchAttributeException("Member doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("age")) {
			set_age((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("firstName")) {
			set_firstName((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Member doesn't contain an attribute " + attributeName);
	}

	public int get_age() {
		return _age;
	}

	public void set_age(int _age) {
		ecaAttributeChanging("age", this._age, _age);
		Object oldValue = this._age;
		this._age = _age;
		graphModified();
	ecaAttributeChanged("age", oldValue, _age);
	}

	public java.lang.String get_firstName() {
		return _firstName;
	}

	public void set_firstName(java.lang.String _firstName) {
		ecaAttributeChanging("firstName", this._firstName, _firstName);
		Object oldValue = this._firstName;
		this._firstName = _firstName;
		graphModified();
	ecaAttributeChanged("firstName", oldValue, _firstName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_age = io.matchInteger();
		set_age(_age);
		_firstName = io.matchUtfString();
		set_firstName(_firstName);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("age")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_age = io.matchInteger();
			set_age(_age);
			return;
		}
		if (attributeName.equals("firstName")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_firstName = io.matchUtfString();
			set_firstName(_firstName);
			return;
		}
		throw new NoSuchAttributeException("Member doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeInteger(_age);
		io.writeUtfString(_firstName);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("age")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(_age);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("firstName")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_firstName);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Member doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member getNextMember() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather add_familyFather(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) vertex, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> remove_familyFather() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_familyFather(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family get_familyFather() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat();
			}
			return null;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon add_familySon(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) vertex, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> remove_familySon() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_familySon(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family get_familySon() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat();
			}
			return null;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter add_familyDaughter(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) vertex, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> remove_familyDaughter() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_familyDaughter(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family get_familyDaughter() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat();
			}
			return null;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother add_familyMother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) vertex, (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> remove_familyMother() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family>();
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_familyMother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother next = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family get_familyMother() {
			de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother edge = (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family) edge.getThat();
			}
			return null;
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class, direction);
	}
}
