/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Family extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilySchema.instance().vc_Family;

	public java.lang.String get_lastName();

	public void set_lastName(java.lang.String _lastName);

	public java.lang.String get_street();

	public void set_street(java.lang.String _street);

	public java.lang.String get_town();

	public void set_town(java.lang.String _town);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.families.Family vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family getNextFamily();

	/**
	 * @return the first edge of class HasMother at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence();

	/**
	 * @return the first edge of class HasMother at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMotherIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasDaughter at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence();

	/**
	 * @return the first edge of class HasDaughter at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughterIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasSon at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence();

	/**
	 * @return the first edge of class HasSon at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSonIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasFather at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence();

	/**
	 * @return the first edge of class HasFather at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFatherIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>sons</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon add_sons(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * removes all sons adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_sons();
		/**
		 * removes the given vertex as <code>sons</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sons(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sons'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> get_sons();
		/**
		 * adds the given vertex as <code>mother</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother add_mother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * removes all mother adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_mother();
		/**
		 * removes the given vertex as <code>mother</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_mother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * @return the vertex to this one with the rolename 'mother' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member get_mother();
		/**
		 * adds the given vertex as <code>daughters</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter add_daughters(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * removes all daughters adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_daughters();
		/**
		 * removes the given vertex as <code>daughters</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_daughters(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'daughters'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> get_daughters();
		/**
		 * adds the given vertex as <code>father</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather add_father(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * removes all father adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> remove_father();
		/**
		 * removes the given vertex as <code>father</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_father(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member vertex);
		/**
		 * @return the vertex to this one with the rolename 'father' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member get_father();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasMother or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasMother.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasDaughter or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasDaughter.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSon or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSon.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasFather or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasFather.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherIncidences(EdgeDirection direction);
}
