/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class FamilyGraphImpl extends GraphImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph, de.uni_koblenz.jgralab.Graph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public FamilyGraphImpl() {
		this(null);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public FamilyGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public FamilyGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph.GC, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use the Schema and a GraphFactory
	**/
	public FamilyGraphImpl(java.lang.String id) {
		super(id, de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph.GC);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilyGraph.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("FamilyGraph doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("FamilyGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("FamilyGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("FamilyGraph doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for Family ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family getFirstFamily() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Family)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family createFamily() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family createFamily(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.VC, id, this);
	}

	// ------------------------ Code for HasDaughter ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughter() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter createHasDaughter(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter createHasDaughter(int id, de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for HasFather ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFather() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather createHasFather(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather createHasFather(int id, de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for HasMother ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMother() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother createHasMother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother createHasMother(int id, de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for HasSon ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSon() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon createHasSon(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon createHasSon(int id, de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Member ------------------------

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member getFirstMember() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.families.Member)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member createMember() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member createMember(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> createVertex(de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.VC, id, this);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> getFamilyVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.Family.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> getMemberVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member>(this, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member.class);
	}
	
}
