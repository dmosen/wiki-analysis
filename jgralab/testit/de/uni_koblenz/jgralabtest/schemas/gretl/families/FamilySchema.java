/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema FamilySchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class FamilySchema extends SchemaImpl {
	public final GraphClass gc_FamilyGraph;
	public final VertexClass vc_Member;
	public final VertexClass vc_Family;
	public final EdgeClass ec_HasFather;
	public final EdgeClass ec_HasSon;
	public final EdgeClass ec_HasMother;
	public final EdgeClass ec_HasDaughter;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<FamilySchema> theInstance = new WeakReference<FamilySchema>(null);
	
	/**
	 * @return the singleton instance of FamilySchema
	 */
	public static FamilySchema instance() {
		FamilySchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (FamilySchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new FamilySchema();
			theInstance = new WeakReference<FamilySchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a FamilySchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private FamilySchema() {
		super("FamilySchema", "de.uni_koblenz.jgralabtest.schemas.gretl.families");

		{
			GraphClass gc = gc_FamilyGraph = createGraphClass("FamilyGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_Member = gc.createVertexClass("Member");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("age", getDomain("Integer"), getAttributedElementClass("Member"), null));
				vc.addAttribute(createAttribute("firstName", getDomain("String"), getAttributedElementClass("Member"), null));
			}

			{
				VertexClass vc = vc_Family = gc.createVertexClass("Family");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("lastName", getDomain("String"), getAttributedElementClass("Family"), null));
				vc.addAttribute(createAttribute("street", getDomain("String"), getAttributedElementClass("Family"), null));
				vc.addAttribute(createAttribute("town", getDomain("String"), getAttributedElementClass("Family"), null));
			}

			{
				EdgeClass ec = ec_HasFather = gc.createEdgeClass("HasFather",
					vc_Family, 0, 1, "familyFather", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Member, 1, 1, "father", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSon = gc.createEdgeClass("HasSon",
					vc_Family, 0, 1, "familySon", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Member, 0, 2147483647, "sons", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasMother = gc.createEdgeClass("HasMother",
					vc_Family, 0, 1, "familyMother", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Member, 1, 1, "mother", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasDaughter = gc.createEdgeClass("HasDaughter",
					vc_Family, 0, 1, "familyDaughter", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Member, 0, 2147483647, "daughters", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.gretl.families.impl.std.FamilyGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new FamilyGraph graph.
	*/
	public FamilyGraph createFamilyGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createFamilyGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new FamilyGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public FamilyGraph createFamilyGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_FamilyGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new FamilyGraph graph.
	*/
	public FamilyGraph createFamilyGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_FamilyGraph, null, 100, 100);
	}

	/**
	 * Creates a new FamilyGraph graph.
	*/
	public FamilyGraph createFamilyGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_FamilyGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new FamilyGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public FamilyGraph createFamilyGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createFamilyGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new FamilyGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public FamilyGraph createFamilyGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public FamilyGraph loadFamilyGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadFamilyGraph(filename, factory, null);
	}

	public FamilyGraph loadFamilyGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadFamilyGraph(filename, factory, pf);
	}

	public FamilyGraph loadFamilyGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadFamilyGraph(filename, factory, null);
	}

	
	public FamilyGraph loadFamilyGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadFamilyGraph(filename, factory, pf);
	}

	public FamilyGraph loadFamilyGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public FamilyGraph loadFamilyGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
