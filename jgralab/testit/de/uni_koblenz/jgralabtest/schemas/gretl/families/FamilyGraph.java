/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.families;

public interface FamilyGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.gretl.families.FamilySchema.instance().gc_FamilyGraph;

	// ------------------------ Code for Family ------------------------

	/**
	 * @return the first Family vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family getFirstFamily();

	/**
	 * Creates a new Family vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Family createFamily();

	// ------------------------ Code for HasDaughter ------------------------

	/**
	 * @return the first HasDaughter edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter getFirstHasDaughter();

	/**
	 * Creates a new HasDaughter edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter createHasDaughter(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega);

	// ------------------------ Code for HasFather ------------------------

	/**
	 * @return the first HasFather edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather getFirstHasFather();

	/**
	 * Creates a new HasFather edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather createHasFather(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega);

	// ------------------------ Code for HasMother ------------------------

	/**
	 * @return the first HasMother edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother getFirstHasMother();

	/**
	 * Creates a new HasMother edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother createHasMother(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega);

	// ------------------------ Code for HasSon ------------------------

	/**
	 * @return the first HasSon edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon getFirstHasSon();

	/**
	 * Creates a new HasSon edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon createHasSon(de.uni_koblenz.jgralabtest.schemas.gretl.families.Family alpha, de.uni_koblenz.jgralabtest.schemas.gretl.families.Member omega);

	// ------------------------ Code for Member ------------------------

	/**
	 * @return the first Member vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member getFirstMember();

	/**
	 * Creates a new Member vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.families.Member createMember();

	/**
	 * @return an Iterable for all edges of this graph that are of type HasMother or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasMother> getHasMotherEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasDaughter or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasDaughter> getHasDaughterEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasSon or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasSon> getHasSonEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasFather or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.HasFather> getHasFatherEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Family or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Family> getFamilyVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Member or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.families.Member> getMemberVertices();
	
}
