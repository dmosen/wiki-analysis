/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.pddsl;

public interface PddslGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.PddslSchema.instance().gc_PddslGraph;

	// ------------------------ Code for Card ------------------------

	/**
	 * @return the first Card vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card getFirstCard();

	/**
	 * Creates a new Card vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card createCard();

	// ------------------------ Code for Chassis ------------------------

	/**
	 * @return the first Chassis vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Chassis getFirstChassis();

	/**
	 * Creates a new Chassis vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Chassis createChassis();

	// ------------------------ Code for Configuration ------------------------

	/**
	 * @return the first Configuration vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Configuration getFirstConfiguration();

	/**
	 * Creates a new Configuration vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Configuration createConfiguration();

	// ------------------------ Code for Element ------------------------

	/**
	 * @return the first Element vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Element getFirstElement();

	// ------------------------ Code for HasCard ------------------------

	/**
	 * @return the first HasCard edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard getFirstHasCard();

	/**
	 * Creates a new HasCard edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard createHasCard(de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Slot alpha, de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card omega);

	// ------------------------ Code for HasConfig ------------------------

	/**
	 * @return the first HasConfig edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasConfig getFirstHasConfig();

	/**
	 * Creates a new HasConfig edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasConfig createHasConfig(de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Chassis alpha, de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Configuration omega);

	// ------------------------ Code for HasSlot ------------------------

	/**
	 * @return the first HasSlot edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasSlot getFirstHasSlot();

	/**
	 * Creates a new HasSlot edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasSlot createHasSlot(de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Configuration alpha, de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Slot omega);

	// ------------------------ Code for Slot ------------------------

	/**
	 * @return the first Slot vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Slot getFirstSlot();

	/**
	 * Creates a new Slot vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Slot createSlot();

	/**
	 * @return an Iterable for all edges of this graph that are of type HasSlot or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasSlot> getHasSlotEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasConfig or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasConfig> getHasConfigEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasCard or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard> getHasCardEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Card or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card> getCardVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Slot or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Slot> getSlotVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Chassis or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Chassis> getChassisVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Configuration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Configuration> getConfigurationVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Element or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Element> getElementVertices();
	
}
