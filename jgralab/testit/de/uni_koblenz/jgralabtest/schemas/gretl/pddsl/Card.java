/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.pddsl;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Card extends de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Element {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.PddslSchema.instance().vc_Card;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Card getNextCard();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Element vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.Element getNextElement();

	/**
	 * @return the first edge of class HasCard at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard getFirstHasCardIncidence();

	/**
	 * @return the first edge of class HasCard at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard getFirstHasCardIncidence(EdgeDirection orientation);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasCard or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard> getHasCardIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasCard.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.HasCard> getHasCardIncidences(EdgeDirection direction);
}
