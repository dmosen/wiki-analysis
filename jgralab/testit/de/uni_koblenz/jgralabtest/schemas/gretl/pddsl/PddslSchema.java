/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.pddsl;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema PddslSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class PddslSchema extends SchemaImpl {
	public final GraphClass gc_PddslGraph;
	public final VertexClass vc_Element;
	public final VertexClass vc_Card;
	public final VertexClass vc_Chassis;
	public final VertexClass vc_Configuration;
	public final VertexClass vc_Slot;
	public final EdgeClass ec_HasCard;
	public final EdgeClass ec_HasConfig;
	public final EdgeClass ec_HasSlot;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<PddslSchema> theInstance = new WeakReference<PddslSchema>(null);
	
	/**
	 * @return the singleton instance of PddslSchema
	 */
	public static PddslSchema instance() {
		PddslSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (PddslSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new PddslSchema();
			theInstance = new WeakReference<PddslSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a PddslSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private PddslSchema() {
		super("PddslSchema", "de.uni_koblenz.jgralabtest.schemas.gretl.pddsl");

		{
			GraphClass gc = gc_PddslGraph = createGraphClass("PddslGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_Element = gc.createVertexClass("Element");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Element"), null));
			}

			{
				VertexClass vc = vc_Card = gc.createVertexClass("Card");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Chassis = gc.createVertexClass("Chassis");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Configuration = gc.createVertexClass("Configuration");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				VertexClass vc = vc_Slot = gc.createVertexClass("Slot");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Element);
			}

			{
				EdgeClass ec = ec_HasCard = gc.createEdgeClass("HasCard",
					vc_Slot, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Card, 1, 1, "card", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasConfig = gc.createEdgeClass("HasConfig",
					vc_Chassis, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Configuration, 1, 1, "config", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSlot = gc.createEdgeClass("HasSlot",
					vc_Configuration, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Slot, 1, 2147483647, "slot", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.gretl.pddsl.impl.std.PddslGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new PddslGraph graph.
	*/
	public PddslGraph createPddslGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createPddslGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new PddslGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public PddslGraph createPddslGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_PddslGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new PddslGraph graph.
	*/
	public PddslGraph createPddslGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_PddslGraph, null, 100, 100);
	}

	/**
	 * Creates a new PddslGraph graph.
	*/
	public PddslGraph createPddslGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_PddslGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new PddslGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public PddslGraph createPddslGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createPddslGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new PddslGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public PddslGraph createPddslGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public PddslGraph loadPddslGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadPddslGraph(filename, factory, null);
	}

	public PddslGraph loadPddslGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadPddslGraph(filename, factory, pf);
	}

	public PddslGraph loadPddslGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadPddslGraph(filename, factory, null);
	}

	
	public PddslGraph loadPddslGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadPddslGraph(filename, factory, pf);
	}

	public PddslGraph loadPddslGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public PddslGraph loadPddslGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
