/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml;

public interface SimpleUMLGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.SimpleUMLSchema.instance().gc_SimpleUMLGraph;

	// ------------------------ Code for Association ------------------------

	/**
	 * @return the first Association vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association getFirstAssociation();

	/**
	 * Creates a new Association vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association createAssociation();

	// ------------------------ Code for Attribute ------------------------

	/**
	 * @return the first Attribute vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute getFirstAttribute();

	/**
	 * Creates a new Attribute vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute createAttribute();

	// ------------------------ Code for Class ------------------------

	/**
	 * @return the first Class vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class getFirstClass();

	/**
	 * Creates a new Class vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class createClass();

	// ------------------------ Code for Classifier ------------------------

	/**
	 * @return the first Classifier vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier getFirstClassifier();

	/**
	 * Creates a new Classifier vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier createClassifier();

	// ------------------------ Code for Contains ------------------------

	/**
	 * @return the first Contains edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains getFirstContains();

	/**
	 * Creates a new Contains edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains createContains(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement omega);

	// ------------------------ Code for HasAttribute ------------------------

	/**
	 * @return the first HasAttribute edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute getFirstHasAttribute();

	/**
	 * Creates a new HasAttribute edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute createHasAttribute(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute omega);

	// ------------------------ Code for HasSource ------------------------

	/**
	 * @return the first HasSource edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource getFirstHasSource();

	/**
	 * Creates a new HasSource edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource createHasSource(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class omega);

	// ------------------------ Code for HasSuperclass ------------------------

	/**
	 * @return the first HasSuperclass edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass getFirstHasSuperclass();

	/**
	 * Creates a new HasSuperclass edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass createHasSuperclass(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class omega);

	// ------------------------ Code for HasTarget ------------------------

	/**
	 * @return the first HasTarget edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget getFirstHasTarget();

	/**
	 * Creates a new HasTarget edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget createHasTarget(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class omega);

	// ------------------------ Code for HasType ------------------------

	/**
	 * @return the first HasType edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasType getFirstHasType();

	/**
	 * Creates a new HasType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasType createHasType(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier omega);

	// ------------------------ Code for PackagableElement ------------------------

	/**
	 * @return the first PackagableElement vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement getFirstPackagableElement();

	// ------------------------ Code for Package ------------------------

	/**
	 * @return the first Package vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package getFirstPackage();

	/**
	 * Creates a new Package vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package createPackage();

	// ------------------------ Code for PrimitiveDataType ------------------------

	/**
	 * @return the first PrimitiveDataType vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PrimitiveDataType getFirstPrimitiveDataType();

	/**
	 * Creates a new PrimitiveDataType vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PrimitiveDataType createPrimitiveDataType();

	// ------------------------ Code for UMLModelElement ------------------------

	/**
	 * @return the first UMLModelElement vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement getFirstUMLModelElement();

	/**
	 * @return an Iterable for all edges of this graph that are of type Contains or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains> getContainsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasType or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasType> getHasTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasSource or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource> getHasSourceEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasTarget or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget> getHasTargetEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasAttribute or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute> getHasAttributeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasSuperclass or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass> getHasSuperclassEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Association or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association> getAssociationVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Package or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package> getPackageVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PackagableElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement> getPackagableElementVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type UMLModelElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement> getUMLModelElementVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Classifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier> getClassifierVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Class or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> getClassVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PrimitiveDataType or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PrimitiveDataType> getPrimitiveDataTypeVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Attribute or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute> getAttributeVertices();
	
}
