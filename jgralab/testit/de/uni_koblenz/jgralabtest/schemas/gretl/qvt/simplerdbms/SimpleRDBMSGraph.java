/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms;

public interface SimpleRDBMSGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.SimpleRDBMSSchema.instance().gc_SimpleRDBMSGraph;

	// ------------------------ Code for Column ------------------------

	/**
	 * @return the first Column vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column getFirstColumn();

	/**
	 * Creates a new Column vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column createColumn();

	// ------------------------ Code for ForeignKey ------------------------

	/**
	 * @return the first ForeignKey vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey getFirstForeignKey();

	/**
	 * Creates a new ForeignKey vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey createForeignKey();

	// ------------------------ Code for HasColumn ------------------------

	/**
	 * @return the first HasColumn edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn getFirstHasColumn();

	/**
	 * Creates a new HasColumn edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn createHasColumn(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column omega);

	// ------------------------ Code for HasForeignKey ------------------------

	/**
	 * @return the first HasForeignKey edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey getFirstHasForeignKey();

	/**
	 * Creates a new HasForeignKey edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey createHasForeignKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey omega);

	// ------------------------ Code for HasPrimaryKey ------------------------

	/**
	 * @return the first HasPrimaryKey edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey getFirstHasPrimaryKey();

	/**
	 * Creates a new HasPrimaryKey edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey createHasPrimaryKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key omega);

	// ------------------------ Code for HasTable ------------------------

	/**
	 * @return the first HasTable edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable getFirstHasTable();

	/**
	 * Creates a new HasTable edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable createHasTable(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table omega);

	// ------------------------ Code for IsIdentifiedBy ------------------------

	/**
	 * @return the first IsIdentifiedBy edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy getFirstIsIdentifiedBy();

	/**
	 * Creates a new IsIdentifiedBy edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy createIsIdentifiedBy(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column omega);

	// ------------------------ Code for IsIn ------------------------

	/**
	 * @return the first IsIn edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn getFirstIsIn();

	/**
	 * Creates a new IsIn edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn createIsIn(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column omega);

	// ------------------------ Code for Key ------------------------

	/**
	 * @return the first Key vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key getFirstKey();

	/**
	 * Creates a new Key vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key createKey();

	// ------------------------ Code for RModelElement ------------------------

	/**
	 * @return the first RModelElement vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement getFirstRModelElement();

	/**
	 * Creates a new RModelElement vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement createRModelElement();

	// ------------------------ Code for RefersTo ------------------------

	/**
	 * @return the first RefersTo edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RefersTo getFirstRefersTo();

	/**
	 * Creates a new RefersTo edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RefersTo createRefersTo(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey alpha, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key omega);

	// ------------------------ Code for Schema ------------------------

	/**
	 * @return the first Schema vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema getFirstSchema();

	/**
	 * Creates a new Schema vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema createSchema();

	// ------------------------ Code for Table ------------------------

	/**
	 * @return the first Table vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table getFirstTable();

	/**
	 * Creates a new Table vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table createTable();

	/**
	 * @return an Iterable for all edges of this graph that are of type HasPrimaryKey or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey> getHasPrimaryKeyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasTable or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable> getHasTableEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsIdentifiedBy or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy> getIsIdentifiedByEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type RefersTo or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RefersTo> getRefersToEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasForeignKey or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey> getHasForeignKeyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsIn or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn> getIsInEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type HasColumn or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn> getHasColumnEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Table or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table> getTableVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type RModelElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement> getRModelElementVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ForeignKey or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey> getForeignKeyVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Schema or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema> getSchemaVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Key or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key> getKeyVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Column or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column> getColumnVertices();
	
}
