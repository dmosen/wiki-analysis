/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Association extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.SimpleUMLSchema.instance().vc_Association;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association getNextAssociation();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement getNextPackagableElement();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement getNextUMLModelElement();

	/**
	 * @return the first edge of class HasTarget at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget getFirstHasTargetIncidence();

	/**
	 * @return the first edge of class HasTarget at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget getFirstHasTargetIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasSource at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource getFirstHasSourceIncidence();

	/**
	 * @return the first edge of class HasSource at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource getFirstHasSourceIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>source</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource add_source(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * removes all source adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> remove_source();
		/**
		 * removes the given vertex as <code>source</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_source(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * @return the vertex to this one with the rolename 'source' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class get_source();
		/**
		 * adds the given vertex as <code>namespace</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains add_namespace(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package vertex);
		/**
		 * removes all namespace adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package> remove_namespace();
		/**
		 * removes the given vertex as <code>namespace</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_namespace(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package vertex);
		/**
		 * @return the vertex to this one with the rolename 'namespace' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package get_namespace();
		/**
		 * adds the given vertex as <code>target</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget add_target(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * removes all target adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> remove_target();
		/**
		 * removes the given vertex as <code>target</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_target(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * @return the vertex to this one with the rolename 'target' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class get_target();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTarget or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget> getHasTargetIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTarget.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget> getHasTargetIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSource or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource> getHasSourceIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSource.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource> getHasSourceIncidences(EdgeDirection direction);
}
