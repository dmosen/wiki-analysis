/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Table extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.SimpleRDBMSSchema.instance().vc_Table;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement getNextRModelElement();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Table getNextTable();

	/**
	 * @return the first edge of class HasPrimaryKey at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey getFirstHasPrimaryKeyIncidence();

	/**
	 * @return the first edge of class HasPrimaryKey at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey getFirstHasPrimaryKeyIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasTable at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable getFirstHasTableIncidence();

	/**
	 * @return the first edge of class HasTable at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable getFirstHasTableIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasForeignKey at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey getFirstHasForeignKeyIncidence();

	/**
	 * @return the first edge of class HasForeignKey at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey getFirstHasForeignKeyIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasColumn at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn getFirstHasColumnIncidence();

	/**
	 * @return the first edge of class HasColumn at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn getFirstHasColumnIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>key</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey add_key(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key vertex);
		/**
		 * removes all key adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key> remove_key();
		/**
		 * removes the given vertex as <code>key</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_key(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key vertex);
		/**
		 * @return the vertex to this one with the rolename 'key' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Key get_key();
		/**
		 * adds the given vertex as <code>column</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn add_column(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column vertex);
		/**
		 * removes all column adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column> remove_column();
		/**
		 * removes the given vertex as <code>column</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_column(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'column'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column> get_column();
		/**
		 * adds the given vertex as <code>foreignKey</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey add_foreignKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey vertex);
		/**
		 * removes all foreignKey adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey> remove_foreignKey();
		/**
		 * removes the given vertex as <code>foreignKey</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_foreignKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'foreignKey'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey> get_foreignKey();
		/**
		 * adds the given vertex as <code>schema</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable add_schema(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema vertex);
		/**
		 * removes all schema adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema> remove_schema();
		/**
		 * removes the given vertex as <code>schema</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_schema(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema vertex);
		/**
		 * @return the vertex to this one with the rolename 'schema' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Schema get_schema();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasPrimaryKey or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey> getHasPrimaryKeyIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasPrimaryKey.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasPrimaryKey> getHasPrimaryKeyIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTable or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable> getHasTableIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTable.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasTable> getHasTableIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasForeignKey or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey> getHasForeignKeyIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasForeignKey.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasForeignKey> getHasForeignKeyIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasColumn or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn> getHasColumnIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasColumn.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn> getHasColumnIncidences(EdgeDirection direction);
}
