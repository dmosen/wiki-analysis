/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Class extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.SimpleUMLSchema.instance().vc_Class;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class getNextClass();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Classifier getNextClassifier();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.PackagableElement getNextPackagableElement();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.UMLModelElement getNextUMLModelElement();

	/**
	 * @return the first edge of class HasSource at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource getFirstHasSourceIncidence();

	/**
	 * @return the first edge of class HasSource at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource getFirstHasSourceIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasTarget at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget getFirstHasTargetIncidence();

	/**
	 * @return the first edge of class HasTarget at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget getFirstHasTargetIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasAttribute at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute getFirstHasAttributeIncidence();

	/**
	 * @return the first edge of class HasAttribute at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute getFirstHasAttributeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasSuperclass at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass getFirstHasSuperclassIncidence();

	/**
	 * @return the first edge of class HasSuperclass at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass getFirstHasSuperclassIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>forward</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget add_forward(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association vertex);
		/**
		 * removes all forward adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association> remove_forward();
		/**
		 * removes the given vertex as <code>forward</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_forward(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'forward'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association> get_forward();
		/**
		 * adds the given vertex as <code>subclass</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass add_subclass(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * removes all subclass adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> remove_subclass();
		/**
		 * removes the given vertex as <code>subclass</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_subclass(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'subclass'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> get_subclass();
		/**
		 * adds the given vertex as <code>namespace</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains add_namespace(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package vertex);
		/**
		 * removes all namespace adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package> remove_namespace();
		/**
		 * removes the given vertex as <code>namespace</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_namespace(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package vertex);
		/**
		 * @return the vertex to this one with the rolename 'namespace' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Contains</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Package get_namespace();
		/**
		 * adds the given vertex as <code>reverse</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource add_reverse(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association vertex);
		/**
		 * removes all reverse adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association> remove_reverse();
		/**
		 * removes the given vertex as <code>reverse</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_reverse(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'reverse'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Association> get_reverse();
		/**
		 * adds the given vertex as <code>attribute</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute add_attribute(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute vertex);
		/**
		 * removes all attribute adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute> remove_attribute();
		/**
		 * removes the given vertex as <code>attribute</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_attribute(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'attribute'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Attribute> get_attribute();
		/**
		 * adds the given vertex as <code>general</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass add_general(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * removes all general adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> remove_general();
		/**
		 * removes the given vertex as <code>general</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_general(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'general'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.Class> get_general();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSource or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource> getHasSourceIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSource.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSource> getHasSourceIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTarget or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget> getHasTargetIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasTarget.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasTarget> getHasTargetIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasAttribute or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute> getHasAttributeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasAttribute.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasAttribute> getHasAttributeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSuperclass or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass> getHasSuperclassIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSuperclass.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.HasSuperclass> getHasSuperclassIncidences(EdgeDirection direction);
}
