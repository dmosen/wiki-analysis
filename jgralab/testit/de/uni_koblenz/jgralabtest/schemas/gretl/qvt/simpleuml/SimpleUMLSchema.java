/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema SimpleUMLSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class SimpleUMLSchema extends SchemaImpl {
	public final GraphClass gc_SimpleUMLGraph;
	public final VertexClass vc_UMLModelElement;
	public final VertexClass vc_PackagableElement;
	public final VertexClass vc_Attribute;
	public final VertexClass vc_Association;
	public final VertexClass vc_Package;
	public final VertexClass vc_Classifier;
	public final VertexClass vc_PrimitiveDataType;
	public final VertexClass vc_Class;
	public final EdgeClass ec_HasType;
	public final EdgeClass ec_Contains;
	public final EdgeClass ec_HasSuperclass;
	public final EdgeClass ec_HasTarget;
	public final EdgeClass ec_HasAttribute;
	public final EdgeClass ec_HasSource;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<SimpleUMLSchema> theInstance = new WeakReference<SimpleUMLSchema>(null);
	
	/**
	 * @return the singleton instance of SimpleUMLSchema
	 */
	public static SimpleUMLSchema instance() {
		SimpleUMLSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (SimpleUMLSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new SimpleUMLSchema();
			theInstance = new WeakReference<SimpleUMLSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a SimpleUMLSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private SimpleUMLSchema() {
		super("SimpleUMLSchema", "de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml");

		{
			GraphClass gc = gc_SimpleUMLGraph = createGraphClass("SimpleUMLGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_UMLModelElement = gc.createVertexClass("UMLModelElement");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("kind", getDomain("String"), getAttributedElementClass("UMLModelElement"), null));
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("UMLModelElement"), null));
			}

			{
				VertexClass vc = vc_PackagableElement = gc.createVertexClass("PackagableElement");
				vc.setAbstract(true);
				vc.addSuperClass(vc_UMLModelElement);
			}

			{
				VertexClass vc = vc_Attribute = gc.createVertexClass("Attribute");
				vc.setAbstract(false);
				vc.addSuperClass(vc_UMLModelElement);
			}

			{
				VertexClass vc = vc_Association = gc.createVertexClass("Association");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PackagableElement);
			}

			{
				VertexClass vc = vc_Package = gc.createVertexClass("Package");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PackagableElement);
			}

			{
				VertexClass vc = vc_Classifier = gc.createVertexClass("Classifier");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PackagableElement);
			}

			{
				VertexClass vc = vc_PrimitiveDataType = gc.createVertexClass("PrimitiveDataType");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Classifier);
			}

			{
				VertexClass vc = vc_Class = gc.createVertexClass("Class");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Classifier);
			}

			{
				EdgeClass ec = ec_HasType = gc.createEdgeClass("HasType",
					vc_Attribute, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Classifier, 1, 1, "type", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_Contains = gc.createEdgeClass("Contains",
					vc_Package, 1, 1, "namespace", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_PackagableElement, 0, 2147483647, "element", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSuperclass = gc.createEdgeClass("HasSuperclass",
					vc_Class, 0, 2147483647, "subclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Class, 0, 2147483647, "general", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasTarget = gc.createEdgeClass("HasTarget",
					vc_Association, 0, 2147483647, "forward", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Class, 1, 1, "target", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasAttribute = gc.createEdgeClass("HasAttribute",
					vc_Class, 1, 1, "owner", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Attribute, 0, 2147483647, "attribute", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSource = gc.createEdgeClass("HasSource",
					vc_Association, 0, 2147483647, "reverse", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Class, 1, 1, "source", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simpleuml.impl.std.SimpleUMLGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new SimpleUMLGraph graph.
	*/
	public SimpleUMLGraph createSimpleUMLGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createSimpleUMLGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new SimpleUMLGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public SimpleUMLGraph createSimpleUMLGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_SimpleUMLGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SimpleUMLGraph graph.
	*/
	public SimpleUMLGraph createSimpleUMLGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_SimpleUMLGraph, null, 100, 100);
	}

	/**
	 * Creates a new SimpleUMLGraph graph.
	*/
	public SimpleUMLGraph createSimpleUMLGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_SimpleUMLGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SimpleUMLGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public SimpleUMLGraph createSimpleUMLGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createSimpleUMLGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new SimpleUMLGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public SimpleUMLGraph createSimpleUMLGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public SimpleUMLGraph loadSimpleUMLGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSimpleUMLGraph(filename, factory, null);
	}

	public SimpleUMLGraph loadSimpleUMLGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSimpleUMLGraph(filename, factory, pf);
	}

	public SimpleUMLGraph loadSimpleUMLGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSimpleUMLGraph(filename, factory, null);
	}

	
	public SimpleUMLGraph loadSimpleUMLGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSimpleUMLGraph(filename, factory, pf);
	}

	public SimpleUMLGraph loadSimpleUMLGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public SimpleUMLGraph loadSimpleUMLGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
