/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class ColumnImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement {

	protected java.lang.String _kind;

	protected java.lang.String _name;

	protected java.lang.String _type;

	public ColumnImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("kind")) return (T) get_kind();
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("type")) return (T) get_type();
		throw new NoSuchAttributeException("Column doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("kind")) {
			set_kind((java.lang.String) data);
			return;
		}
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("type")) {
			set_type((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Column doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_kind() {
		return _kind;
	}

	public void set_kind(java.lang.String _kind) {
		ecaAttributeChanging("kind", this._kind, _kind);
		Object oldValue = this._kind;
		this._kind = _kind;
		graphModified();
	ecaAttributeChanged("kind", oldValue, _kind);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
	ecaAttributeChanged("name", oldValue, _name);
	}

	public java.lang.String get_type() {
		return _type;
	}

	public void set_type(java.lang.String _type) {
		ecaAttributeChanging("type", this._type, _type);
		Object oldValue = this._type;
		this._type = _type;
		graphModified();
	ecaAttributeChanged("type", oldValue, _type);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_kind = io.matchUtfString();
		set_kind(_kind);
		_name = io.matchUtfString();
		set_name(_name);
		_type = io.matchUtfString();
		set_type(_type);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("kind")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_kind = io.matchUtfString();
			set_kind(_kind);
			return;
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("type")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_type = io.matchUtfString();
			set_type(_type);
			return;
		}
		throw new NoSuchAttributeException("Column doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_kind);
		io.writeUtfString(_name);
		io.writeUtfString(_type);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("kind")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_kind);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("type")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_type);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Column doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column getNextColumn() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement getNextRModelElement() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement)getNextVertex(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.RModelElement.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy getFirstIsIdentifiedByIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy getFirstIsIdentifiedByIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn getFirstIsInIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn getFirstIsInIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn getFirstHasColumnIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn getFirstHasColumnIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn add_foreignKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.SimpleRDBMSGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.EC, (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey) vertex, (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.Column) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey> remove_foreignKey() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey>();
			de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn edge = (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn next = (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_foreignKey(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn edge = (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn next = (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey get_foreignKey() {
			de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn edge = (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.ForeignKey) edge.getThat();
			}
			return null;
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy> getIsIdentifiedByIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy> getIsIdentifiedByIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIdentifiedBy.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn> getIsInIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn> getIsInIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.IsIn.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn> getHasColumnIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn> getHasColumnIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn>(this, de.uni_koblenz.jgralabtest.schemas.gretl.qvt.simplerdbms.HasColumn.class, direction);
	}
}
