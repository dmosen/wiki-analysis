/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.gretl.bedsl;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface ReferenceAttribute extends de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Attribute {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.BedslSchema.instance().vc_ReferenceAttribute;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Attribute vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Attribute getNextAttribute();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.ReferenceAttribute vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.ReferenceAttribute getNextReferenceAttribute();

	/**
	 * @return the first edge of class References at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References getFirstReferencesIncidence();

	/**
	 * @return the first edge of class References at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References getFirstReferencesIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>entity</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References add_entity(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Entity vertex);
		/**
		 * removes all entity adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Entity> remove_entity();
		/**
		 * removes the given vertex as <code>entity</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_entity(de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Entity vertex);
		/**
		 * @return the vertex to this one with the rolename 'entity' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.Entity get_entity();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type References or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References> getReferencesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type References.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.gretl.bedsl.References> getReferencesIncidences(EdgeDirection direction);
}
