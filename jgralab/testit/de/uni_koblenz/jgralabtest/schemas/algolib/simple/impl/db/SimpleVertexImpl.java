/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.simple.impl.db;

import de.uni_koblenz.jgralab.impl.db.VertexImpl;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class SimpleVertexImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex, de.uni_koblenz.jgralab.Vertex {

	public SimpleVertexImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("SimpleVertex doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("SimpleVertex doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("SimpleVertex doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("SimpleVertex doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex getNextSimpleVertex() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex)getNextVertex(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge getFirstSimpleEdgeIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge getFirstSimpleEdgeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge add_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) vertex, (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> remove_alphaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex>();
			de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge edge = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge next = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge edge = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge next = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> get_alphaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex>(this, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge add_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) this, (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> remove_omegaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex>();
			de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge edge = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge next = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge edge = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge next = (de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex> get_omegaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleVertex>(this, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge> getSimpleEdgeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge>(this, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge> getSimpleEdgeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge>(this, de.uni_koblenz.jgralabtest.schemas.algolib.simple.SimpleEdge.class, direction);
	}
}
