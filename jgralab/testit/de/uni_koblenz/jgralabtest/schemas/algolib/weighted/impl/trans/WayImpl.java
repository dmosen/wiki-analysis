/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.trans;

import de.uni_koblenz.jgralab.impl.trans.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.trans.ReversedWayImpl;

import de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location;

import java.io.IOException;
/**
 * FromVertexClass: Location
 * FromRoleName : alphaVertex
 * ToVertexClass: Location
 * ToRoleName : omegaVertex
 */

public class WayImpl extends EdgeImpl implements de.uni_koblenz.jgralab.Edge, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _weight;

	public WayImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("weight")) return (T) (java.lang.Double) get_weight();
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("weight")) {
			set_weight((java.lang.Double) data);
			return;
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public double get_weight() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'weight', because " + this + " isn't valid in current transaction.");
		if (_weight == null)
			return 0.0;
		java.lang.Double value = _weight.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_weight(double _weight) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'weight', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._weight = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _weight, "weight");
		}
		if (this._weight == null) {
			this._weight = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "weight");
		}
		this._weight.setValidValue((java.lang.Double) _weight, graph.getCurrentTransaction());
		attributeChanged(this._weight);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		double _weight = io.matchDouble();
		set_weight(_weight);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("weight")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_weight(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeDouble(get_weight());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("weight")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_weight());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_weight);
		return attributes;
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedWayImpl(this, graph);
	}
	public Location getAlpha() {
		return (Location) super.getAlpha();
	}
	public Location getOmega() {
		return (Location) super.getOmega();
	}
}
