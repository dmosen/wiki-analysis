/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.trans;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.trans.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class LocationImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location, de.uni_koblenz.jgralab.Vertex {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _name;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _x;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _y;

	public LocationImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("x")) return (T) (java.lang.Double) get_x();
		if (attributeName.equals("y")) return (T) (java.lang.Double) get_y();
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("x")) {
			set_x((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("y")) {
			set_y((java.lang.Double) data);
			return;
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (_name == null)
			return null;
		java.lang.String value = _name.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_name(java.lang.String _name) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _name, "name");
		}
		if (this._name == null) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "name");
		}
		this._name.setValidValue((java.lang.String) _name, graph.getCurrentTransaction());
		attributeChanged(this._name);
		graphModified();
	}

	public double get_x() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'x', because " + this + " isn't valid in current transaction.");
		if (_x == null)
			return 0.0;
		java.lang.Double value = _x.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_x(double _x) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'x', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._x = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _x, "x");
		}
		if (this._x == null) {
			this._x = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "x");
		}
		this._x.setValidValue((java.lang.Double) _x, graph.getCurrentTransaction());
		attributeChanged(this._x);
		graphModified();
	}

	public double get_y() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'y', because " + this + " isn't valid in current transaction.");
		if (_y == null)
			return 0.0;
		java.lang.Double value = _y.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_y(double _y) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'y', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._y = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _y, "y");
		}
		if (this._y == null) {
			this._y = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "y");
		}
		this._y.setValidValue((java.lang.Double) _y, graph.getCurrentTransaction());
		attributeChanged(this._y);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		java.lang.String _name = io.matchUtfString();
		set_name(_name);
		double _x = io.matchDouble();
		set_x(_x);
		double _y = io.matchDouble();
		set_y(_y);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_name(tmpVar);
			return;
		}
		if (attributeName.equals("x")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_x(tmpVar);
			return;
		}
		if (attributeName.equals("y")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_y(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(get_name());
		io.writeDouble(get_x());
		io.writeDouble(get_y());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_name());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("x")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_x());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("y")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_y());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_name);
		attributes.add(_x);
		attributes.add(_y);
		return attributes;
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location getNextLocation() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location)getNextVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getFirstWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getFirstWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way add_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.WeightedGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) vertex, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> remove_alphaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>();
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> get_alphaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way add_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.WeightedGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) this, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> remove_omegaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>();
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> get_omegaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way> getWayIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way> getWayIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, direction);
	}
}
