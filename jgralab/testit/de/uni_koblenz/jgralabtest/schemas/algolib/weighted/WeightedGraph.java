/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.weighted;

public interface WeightedGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.algolib.weighted.WeightedSchema.instance().gc_WeightedGraph;

	// ------------------------ Code for Location ------------------------

	/**
	 * @return the first Location vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location getFirstLocation();

	/**
	 * Creates a new Location vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location createLocation();

	// ------------------------ Code for Way ------------------------

	/**
	 * @return the first Way edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getFirstWay();

	/**
	 * Creates a new Way edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way createWay(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location alpha, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location omega);

	/**
	 * @return an Iterable for all edges of this graph that are of type Way or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way> getWayEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Location or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> getLocationVertices();
	
}
