/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.std;

import de.uni_koblenz.jgralab.impl.std.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.std.ReversedWayImpl;

import de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location;

import java.io.IOException;
/**
 * FromVertexClass: Location
 * FromRoleName : alphaVertex
 * ToVertexClass: Location
 * ToRoleName : omegaVertex
 */

public class WayImpl extends EdgeImpl implements de.uni_koblenz.jgralab.Edge, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way {

	protected double _weight;

	public WayImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
		((de.uni_koblenz.jgralab.impl.InternalGraph) graph).addEdge(this, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("weight")) return (T) (java.lang.Double) get_weight();
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("weight")) {
			set_weight((java.lang.Double) data);
			return;
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public double get_weight() {
		return _weight;
	}

	public void set_weight(double _weight) {
		ecaAttributeChanging("weight", this._weight, _weight);
		Object oldValue = this._weight;
		this._weight = _weight;
		graphModified();
	ecaAttributeChanged("weight", oldValue, _weight);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_weight = io.matchDouble();
		set_weight(_weight);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("weight")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_weight = io.matchDouble();
			set_weight(_weight);
			return;
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeDouble(_weight);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("weight")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(_weight);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Way doesn't contain an attribute " + attributeName);
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getNextWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedWayImpl(this, graph);
	}
	public Location getAlpha() {
		return (Location) super.getAlpha();
	}
	public Location getOmega() {
		return (Location) super.getOmega();
	}
}
