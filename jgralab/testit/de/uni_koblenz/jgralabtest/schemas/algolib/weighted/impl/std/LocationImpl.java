/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.algolib.weighted.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class LocationImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location, de.uni_koblenz.jgralab.Vertex {

	protected java.lang.String _name;

	protected double _x;

	protected double _y;

	public LocationImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("x")) return (T) (java.lang.Double) get_x();
		if (attributeName.equals("y")) return (T) (java.lang.Double) get_y();
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("x")) {
			set_x((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("y")) {
			set_y((java.lang.Double) data);
			return;
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		ecaAttributeChanging("name", this._name, _name);
		Object oldValue = this._name;
		this._name = _name;
		graphModified();
	ecaAttributeChanged("name", oldValue, _name);
	}

	public double get_x() {
		return _x;
	}

	public void set_x(double _x) {
		ecaAttributeChanging("x", this._x, _x);
		Object oldValue = this._x;
		this._x = _x;
		graphModified();
	ecaAttributeChanged("x", oldValue, _x);
	}

	public double get_y() {
		return _y;
	}

	public void set_y(double _y) {
		ecaAttributeChanging("y", this._y, _y);
		Object oldValue = this._y;
		this._y = _y;
		graphModified();
	ecaAttributeChanged("y", oldValue, _y);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
		_x = io.matchDouble();
		set_x(_x);
		_y = io.matchDouble();
		set_y(_y);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("x")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_x = io.matchDouble();
			set_x(_x);
			return;
		}
		if (attributeName.equals("y")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_y = io.matchDouble();
			set_y(_y);
			return;
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
		io.writeDouble(_x);
		io.writeDouble(_y);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("x")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(_x);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("y")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(_y);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Location doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location getNextLocation() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location)getNextVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getFirstWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way getFirstWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way add_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.WeightedGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) vertex, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> remove_alphaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>();
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_alphaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> get_alphaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way add_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.WeightedGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.EC, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) this, (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> remove_omegaVertex() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>();
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_omegaVertex(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way edge = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way next = (de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location> get_omegaVertex() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Location>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way> getWayIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way> getWayIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way>(this, de.uni_koblenz.jgralabtest.schemas.algolib.weighted.Way.class, direction);
	}
}
