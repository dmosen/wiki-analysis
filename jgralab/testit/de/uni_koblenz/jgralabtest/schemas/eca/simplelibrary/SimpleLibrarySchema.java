/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.RecordDomain;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema SimpleLibrarySchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class SimpleLibrarySchema extends SchemaImpl {
	public final GraphClass gc_SimpleLibraryGraph;
	public final VertexClass vc_User;
	public final VertexClass vc_Medium;
	public final VertexClass vc_Library;
	public final VertexClass vc_NewMedia;
	public final VertexClass vc_Magazin;
	public final VertexClass vc_Book;
	public final EdgeClass ec_Loans;
	public final EdgeClass ec_HasMedia;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<SimpleLibrarySchema> theInstance = new WeakReference<SimpleLibrarySchema>(null);
	
	/**
	 * @return the singleton instance of SimpleLibrarySchema
	 */
	public static SimpleLibrarySchema instance() {
		SimpleLibrarySchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (SimpleLibrarySchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new SimpleLibrarySchema();
			theInstance = new WeakReference<SimpleLibrarySchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a SimpleLibrarySchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private SimpleLibrarySchema() {
		super("SimpleLibrarySchema", "de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary");

		{
			EnumDomain dom = createEnumDomain("MediaType");
			dom.addConst("VHS");
			dom.addConst("DVD");
			dom.addConst("CD");
			dom.addConst("CASSETTE");
			dom.addConst("BLUERAY");
		}

		{
			RecordDomain dom = createRecordDomain("Date");
			dom.addComponent("day", getDomain("Integer"));
			dom.addComponent("month", getDomain("Integer"));
			dom.addComponent("year", getDomain("Integer"));
		}

		{
			GraphClass gc = gc_SimpleLibraryGraph = createGraphClass("SimpleLibraryGraph");
			gc.setAbstract(false);
			gc.addAttribute(createAttribute("version", getDomain("String"), getAttributedElementClass("SimpleLibraryGraph"), null));
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_User = gc.createVertexClass("User");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("User"), null));
			}

			{
				VertexClass vc = vc_Medium = gc.createVertexClass("Medium");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("title", getDomain("String"), getAttributedElementClass("Medium"), null));
			}

			{
				VertexClass vc = vc_Library = gc.createVertexClass("Library");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Library"), null));
			}

			{
				VertexClass vc = vc_NewMedia = gc.createVertexClass("NewMedia");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Medium);
				vc.addAttribute(createAttribute("type", getDomain("MediaType"), getAttributedElementClass("NewMedia"), null));
			}

			{
				VertexClass vc = vc_Magazin = gc.createVertexClass("Magazin");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Medium);
				vc.addAttribute(createAttribute("publisher", getDomain("String"), getAttributedElementClass("Magazin"), null));
				vc.addAttribute(createAttribute("year", getDomain("Integer"), getAttributedElementClass("Magazin"), null));
			}

			{
				VertexClass vc = vc_Book = gc.createVertexClass("Book");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Medium);
				vc.addAttribute(createAttribute("author", getDomain("String"), getAttributedElementClass("Book"), null));
			}

			{
				EdgeClass ec = ec_Loans = gc.createEdgeClass("Loans",
					vc_User, 0, 2147483647, "user", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Medium, 0, 2147483647, "item", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("date", getDomain("Date"), getAttributedElementClass("Loans"), null));
			}

			{
				EdgeClass ec = ec_HasMedia = gc.createEdgeClass("HasMedia",
					vc_Library, 0, 2147483647, "library", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Medium, 0, 2147483647, "media", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.impl.std.SimpleLibraryGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new SimpleLibraryGraph graph.
	*/
	public SimpleLibraryGraph createSimpleLibraryGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createSimpleLibraryGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new SimpleLibraryGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public SimpleLibraryGraph createSimpleLibraryGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_SimpleLibraryGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SimpleLibraryGraph graph.
	*/
	public SimpleLibraryGraph createSimpleLibraryGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_SimpleLibraryGraph, null, 100, 100);
	}

	/**
	 * Creates a new SimpleLibraryGraph graph.
	*/
	public SimpleLibraryGraph createSimpleLibraryGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_SimpleLibraryGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SimpleLibraryGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public SimpleLibraryGraph createSimpleLibraryGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createSimpleLibraryGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new SimpleLibraryGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public SimpleLibraryGraph createSimpleLibraryGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSimpleLibraryGraph(filename, factory, null);
	}

	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSimpleLibraryGraph(filename, factory, pf);
	}

	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSimpleLibraryGraph(filename, factory, null);
	}

	
	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSimpleLibraryGraph(filename, factory, pf);
	}

	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public SimpleLibraryGraph loadSimpleLibraryGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
