/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class BookImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Medium {

	protected java.lang.String _author;

	protected java.lang.String _title;

	public BookImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("author")) return (T) get_author();
		if (attributeName.equals("title")) return (T) get_title();
		throw new NoSuchAttributeException("Book doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("author")) {
			set_author((java.lang.String) data);
			return;
		}
		if (attributeName.equals("title")) {
			set_title((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Book doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_author() {
		return _author;
	}

	public void set_author(java.lang.String _author) {
		ecaAttributeChanging("author", this._author, _author);
		Object oldValue = this._author;
		this._author = _author;
		graphModified();
	ecaAttributeChanged("author", oldValue, _author);
	}

	public java.lang.String get_title() {
		return _title;
	}

	public void set_title(java.lang.String _title) {
		ecaAttributeChanging("title", this._title, _title);
		Object oldValue = this._title;
		this._title = _title;
		graphModified();
	ecaAttributeChanged("title", oldValue, _title);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_author = io.matchUtfString();
		set_author(_author);
		_title = io.matchUtfString();
		set_title(_title);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("author")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_author = io.matchUtfString();
			set_author(_author);
			return;
		}
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_title = io.matchUtfString();
			set_title(_title);
			return;
		}
		throw new NoSuchAttributeException("Book doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_author);
		io.writeUtfString(_title);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("author")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_author);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("title")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_title);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Book doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book getNextBook() {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book)getNextVertex(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Medium getNextMedium() {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Medium)getNextVertex(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Medium.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia getFirstHasMediaIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia getFirstHasMediaIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans getFirstLoansIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans getFirstLoansIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia add_library(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.SimpleLibraryGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.EC, (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library) vertex, (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library> remove_library() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library>();
			de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia edge = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia next = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_library(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia edge = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia next = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library> get_library() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Library>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans add_user(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.SimpleLibraryGraph)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.EC, (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User) vertex, (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Book) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User> remove_user() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User>();
			de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans edge = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans next = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_user(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans edge = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans next = (de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User> get_user() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.User>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, EdgeDirection.IN);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia> getHasMediaIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia> getHasMediaIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.HasMedia.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans> getLoansIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans> getLoansIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans>(this, de.uni_koblenz.jgralabtest.schemas.eca.simplelibrary.Loans.class, direction);
	}
}
