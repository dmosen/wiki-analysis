/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections;

import de.uni_koblenz.jgralab.EdgeDirection;

import de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad;
/**
 * FromVertexClass: junctions.Crossroad
 * FromRoleName : 
 * ToVertexClass: junctions.Crossroad
 * ToRoleName : 
 */

public interface Highway extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street {

	public static final de.uni_koblenz.jgralab.schema.EdgeClass EC = de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteSchema.instance().ec_connections_Highway;

	public int get_lanes();

	public void set_lanes(int _lanes);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection edge in the global edge sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionInGraph();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway edge in the global edge sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayInGraph();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street edge in the global edge sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetInGraph();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way edge in the global edge sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayInGraph();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection at the "this" vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionIncidence();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection at the "this" vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionIncidence(EdgeDirection orientation);

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway at the "this" vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayIncidence();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway at the "this" vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayIncidence(EdgeDirection orientation);

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street at the "this" vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetIncidence();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street at the "this" vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetIncidence(EdgeDirection orientation);

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way at the "this" vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayIncidence();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way at the "this" vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayIncidence(EdgeDirection orientation);
	public Crossroad getAlpha();
	public Crossroad getOmega();
}
