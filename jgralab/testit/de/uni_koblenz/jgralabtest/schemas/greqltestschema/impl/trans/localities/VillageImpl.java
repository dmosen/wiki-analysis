/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.impl.trans.localities;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.trans.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class VillageImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date> _foundingDate;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _inhabitants;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _name;

	public VillageImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("foundingDate")) return (T) get_foundingDate();
		if (attributeName.equals("inhabitants")) return (T) (java.lang.Integer) get_inhabitants();
		if (attributeName.equals("name")) return (T) get_name();
		throw new NoSuchAttributeException("localities.Village doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("foundingDate")) {
			set_foundingDate((de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date) data);
			return;
		}
		if (attributeName.equals("inhabitants")) {
			set_inhabitants((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("localities.Village doesn't contain an attribute " + attributeName);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date get_foundingDate() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'foundingDate', because " + this + " isn't valid in current transaction.");
		if (_foundingDate == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date value = _foundingDate.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_foundingDate(de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date _foundingDate) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'foundingDate', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._foundingDate = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date>(this, _foundingDate, "foundingDate");
		}
		if (this._foundingDate == null) {
			this._foundingDate = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date>(this, null, "foundingDate");
		}
		this._foundingDate.setValidValue((de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date) _foundingDate, graph.getCurrentTransaction());
		attributeChanged(this._foundingDate);
		graphModified();
	}

	public int get_inhabitants() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'inhabitants', because " + this + " isn't valid in current transaction.");
		if (_inhabitants == null)
			return 0;
		java.lang.Integer value = _inhabitants.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_inhabitants(int _inhabitants) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'inhabitants', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._inhabitants = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _inhabitants, "inhabitants");
		}
		if (this._inhabitants == null) {
			this._inhabitants = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "inhabitants");
		}
		this._inhabitants.setValidValue((java.lang.Integer) _inhabitants, graph.getCurrentTransaction());
		attributeChanged(this._inhabitants);
		graphModified();
	}

	public java.lang.String get_name() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (_name == null)
			return null;
		java.lang.String value = _name.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_name(java.lang.String _name) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _name, "name");
		}
		if (this._name == null) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "name");
		}
		this._name.setValidValue((java.lang.String) _name, graph.getCurrentTransaction());
		attributeChanged(this._name);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date _foundingDate = null;
		if (io.isNextToken("(")) {
			_foundingDate = new de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date(io);
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_foundingDate = null;
		} else {
			throw new GraphIOException("This is no record!");
		}
		set_foundingDate(_foundingDate);
		int _inhabitants = io.matchInteger();
		set_inhabitants(_inhabitants);
		java.lang.String _name = io.matchUtfString();
		set_name(_name);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("foundingDate")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date tmpVar = null;
			
			if (io.isNextToken("(")) {
				tmpVar = new de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date(io);
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				tmpVar = null;
			} else {
				throw new GraphIOException("This is no record!");
			}
			set_foundingDate(tmpVar);
			return;
		}
		if (attributeName.equals("inhabitants")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_inhabitants(tmpVar);
			return;
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_name(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("localities.Village doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		if (get_foundingDate() != null) {
			get_foundingDate().writeComponentValues(io);
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(get_inhabitants());
		io.writeUtfString(get_name());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("foundingDate")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_foundingDate() != null) {
				get_foundingDate().writeComponentValues(io);
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("inhabitants")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_inhabitants());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_name());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("localities.Village doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_foundingDate);
		attributes.add(_inhabitants);
		attributes.add(_name);
		return attributes;
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement getNextNamedElement() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality getNextLocality() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village getNextVillage() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad add_crossroads(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village) this, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> remove_crossroads() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_crossroads(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> get_crossroads() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, direction);
	}
}
