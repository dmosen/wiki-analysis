/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.impl.trans.connections;

import de.uni_koblenz.jgralab.impl.trans.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.greqltestschema.impl.trans.connections.ReversedHighwayImpl;

import de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad;

import java.io.IOException;
/**
 * FromVertexClass: junctions.Crossroad
 * FromRoleName : 
 * ToVertexClass: junctions.Crossroad
 * ToRoleName : 
 */

public class HighwayImpl extends EdgeImpl implements de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _lanes;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _length;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _name;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean> _oneway;

	public HighwayImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("lanes")) return (T) (java.lang.Integer) get_lanes();
		if (attributeName.equals("length")) return (T) (java.lang.Double) get_length();
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("oneway")) return (T) (java.lang.Boolean) is_oneway();
		throw new NoSuchAttributeException("connections.Highway doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("lanes")) {
			set_lanes((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("length")) {
			set_length((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("oneway")) {
			set_oneway((java.lang.Boolean) data);
			return;
		}
		throw new NoSuchAttributeException("connections.Highway doesn't contain an attribute " + attributeName);
	}

	public int get_lanes() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'lanes', because " + this + " isn't valid in current transaction.");
		if (_lanes == null)
			return 0;
		java.lang.Integer value = _lanes.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_lanes(int _lanes) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'lanes', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._lanes = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _lanes, "lanes");
		}
		if (this._lanes == null) {
			this._lanes = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "lanes");
		}
		this._lanes.setValidValue((java.lang.Integer) _lanes, graph.getCurrentTransaction());
		attributeChanged(this._lanes);
		graphModified();
	}

	public double get_length() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'length', because " + this + " isn't valid in current transaction.");
		if (_length == null)
			return 0.0;
		java.lang.Double value = _length.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_length(double _length) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'length', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._length = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _length, "length");
		}
		if (this._length == null) {
			this._length = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "length");
		}
		this._length.setValidValue((java.lang.Double) _length, graph.getCurrentTransaction());
		attributeChanged(this._length);
		graphModified();
	}

	public java.lang.String get_name() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (_name == null)
			return null;
		java.lang.String value = _name.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_name(java.lang.String _name) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'name', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _name, "name");
		}
		if (this._name == null) {
			this._name = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "name");
		}
		this._name.setValidValue((java.lang.String) _name, graph.getCurrentTransaction());
		attributeChanged(this._name);
		graphModified();
	}

	public boolean is_oneway() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'oneway', because " + this + " isn't valid in current transaction.");
		if (_oneway == null)
			return false;
		java.lang.Boolean value = _oneway.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? false : value;
	}

	public void set_oneway(boolean _oneway) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'oneway', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._oneway = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, _oneway, "oneway");
		}
		if (this._oneway == null) {
			this._oneway = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, null, "oneway");
		}
		this._oneway.setValidValue((java.lang.Boolean) _oneway, graph.getCurrentTransaction());
		attributeChanged(this._oneway);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		int _lanes = io.matchInteger();
		set_lanes(_lanes);
		double _length = io.matchDouble();
		set_length(_length);
		java.lang.String _name = io.matchUtfString();
		set_name(_name);
		boolean _oneway = io.matchBoolean();
		set_oneway(_oneway);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("lanes")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_lanes(tmpVar);
			return;
		}
		if (attributeName.equals("length")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_length(tmpVar);
			return;
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_name(tmpVar);
			return;
		}
		if (attributeName.equals("oneway")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Boolean tmpVar = null;
			tmpVar = io.matchBoolean();
			set_oneway(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("connections.Highway doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeInteger(get_lanes());
		io.writeDouble(get_length());
		io.writeUtfString(get_name());
		io.writeBoolean(is_oneway());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("lanes")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_lanes());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("length")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_length());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_name());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("oneway")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(is_oneway());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("connections.Highway doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_lanes);
		attributes.add(_length);
		attributes.add(_name);
		attributes.add(_oneway);
		return attributes;
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection)getNextEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway)getNextEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street)getNextEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way)getNextEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getNextConnectionIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, orientation);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getNextHighwayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class, orientation);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getNextStreetIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class, orientation);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getNextWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedHighwayImpl(this, graph);
	}
	public Crossroad getAlpha() {
		return (Crossroad) super.getAlpha();
	}
	public Crossroad getOmega() {
		return (Crossroad) super.getOmega();
	}
}
