/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.impl.db.junctions;

import de.uni_koblenz.jgralab.impl.db.VertexImpl;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class PlazaImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza {

	protected java.lang.String _name;

	public PlazaImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		throw new NoSuchAttributeException("junctions.Plaza doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("junctions.Plaza doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		this._name = _name;
		attributeChanged("name");
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		throw new NoSuchAttributeException("junctions.Plaza doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("junctions.Plaza doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad getNextCrossroad() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction getNextJunction() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza getNextPlaza() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath getFirstFootpathIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath getFirstFootpathIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getFirstHighwayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getFirstHighwayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getFirstConnectionIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getFirstConnectionIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getFirstStreetIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getFirstStreetIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getFirstWayIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getFirstWayIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection add_src(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction) vertex, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> remove_src() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_src(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> get_src() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad add_locality(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality) vertex, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> remove_locality() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_locality(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality get_locality() {
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, EdgeDirection.IN);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality) edge.getThat();
			}
			return null;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection add_dst(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza) this, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> remove_dst() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_dst(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> get_dst() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath> getFootpathIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath> getFootpathIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway> getHighwayIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway> getHighwayIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection> getConnectionIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection> getConnectionIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street> getStreetIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street> getStreetIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way> getWayIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way> getWayIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way.class, direction);
	}
}
