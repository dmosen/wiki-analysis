/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.impl.db.localities;

import de.uni_koblenz.jgralab.impl.db.VertexImpl;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class CountyImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County {

	protected java.lang.String _name;

	protected org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double> _tags;

	public CountyImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("name")) return (T) get_name();
		if (attributeName.equals("tags")) return (T) get_tags();
		throw new NoSuchAttributeException("localities.County doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		if (attributeName.equals("tags")) {
			set_tags((org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double>) data);
			return;
		}
		throw new NoSuchAttributeException("localities.County doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		this._name = _name;
		attributeChanged("name");
	}

	public org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double> get_tags() {
		return _tags;
	}

	public void set_tags(org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double> _tags) {
		this._tags = _tags;
		attributeChanged("tags");
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double> $_tags = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags _tagsKey;
					double _tagsValue;
				_tagsKey = de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags.valueOfPermitNull(io.matchEnumConstant());
				io.match("-");
				_tagsValue = io.matchDouble();
				$_tags = $_tags.plus(_tagsKey, _tagsValue);
			}
			io.match("}");
			_tags = $_tags;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_tags = null;
		} else {
			_tags = null;
		}
		set_tags(_tags);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		if (attributeName.equals("tags")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags, java.lang.Double> $_tags = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags _tagsKey;
						double _tagsValue;
					_tagsKey = de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags.valueOfPermitNull(io.matchEnumConstant());
					io.match("-");
					_tagsValue = io.matchDouble();
					$_tags = $_tags.plus(_tagsKey, _tagsValue);
				}
				io.match("}");
				_tags = $_tags;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_tags = null;
			} else {
				_tags = null;
			}
			set_tags(_tags);
			return;
		}
		throw new NoSuchAttributeException("localities.County doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
		if (_tags != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags key: _tags.keySet()) {
				double value = _tags.get(key);
				if (key != null) {
					io.writeIdentifier(key.toString());
				} else {
					io.writeIdentifier(GraphIO.NULL_LITERAL);
				}
				io.write(" -");
				io.writeDouble(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("tags")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_tags != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.CountyTags key: _tags.keySet()) {
					double value = _tags.get(key);
					if (key != null) {
						io.writeIdentifier(key.toString());
					} else {
						io.writeIdentifier(GraphIO.NULL_LITERAL);
					}
					io.write(" -");
					io.writeDouble(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("localities.County doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement getNextNamedElement() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County getNextCounty() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County)getNextVertex(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital getFirstHasCapitalIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital getFirstHasCapitalIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality add_localities(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County) this, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> remove_localities() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_localities(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> get_localities() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, EdgeDirection.OUT);
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital add_capital(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City vertex) {
			return ((de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteMap)getGraph()).createEdge(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.EC, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County) this, (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City> remove_capital() {
			java.util.List<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City>();
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_capital(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital next = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital) edge.getNextIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City get_capital() {
			de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital edge = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital) getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, EdgeDirection.OUT);
			if (edge != null) {
				return (de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City) edge.getThat();
			}
			return null;
		}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital> getHasCapitalIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital> getHasCapitalIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital>(this, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital.class, direction);
	}
}
