/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Locality extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteSchema.instance().vc_localities_Locality;

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date get_foundingDate();

	public void set_foundingDate(de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date _foundingDate);

	public int get_inhabitants();

	public void set_inhabitants(int _inhabitants);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement getNextNamedElement();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality getNextLocality();

	/**
	 * @return the first edge of class ContainsLocality at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence();

	/**
	 * @return the first edge of class ContainsLocality at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocalityIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsCrossroad at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence();

	/**
	 * @return the first edge of class ContainsCrossroad at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>crossroads</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad add_crossroads(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad vertex);
		/**
		 * removes all crossroads adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> remove_crossroads();
		/**
		 * removes the given vertex as <code>crossroads</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_crossroads(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'crossroads'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> get_crossroads();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsLocality or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsLocality.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsCrossroad or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsCrossroad.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences(EdgeDirection direction);
}
