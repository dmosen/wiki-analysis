/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities;

import de.uni_koblenz.jgralab.EdgeDirection;

import de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad;
import de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality;
/**
 * FromVertexClass: localities.Locality
 * FromRoleName : locality
 * ToVertexClass: junctions.Crossroad
 * ToRoleName : crossroads
 */

public interface ContainsCrossroad extends de.uni_koblenz.jgralab.Edge {

	public static final de.uni_koblenz.jgralab.schema.EdgeClass EC = de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteSchema.instance().ec_localities_ContainsCrossroad;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad edge in the global edge sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getNextContainsCrossroadInGraph();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad at the "this" vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getNextContainsCrossroadIncidence();

	/**
	 * @return the next edge of class de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad at the "this" vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getNextContainsCrossroadIncidence(EdgeDirection orientation);
	public Locality getAlpha();
	public Crossroad getOmega();
}
