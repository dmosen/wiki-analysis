/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Date implements de.uni_koblenz.jgralab.Record {
	private static List<String> componentNames = new ArrayList<String>(3);

	static {
		componentNames.add("day");
		componentNames.add("month");
		componentNames.add("year");
		componentNames = Collections.unmodifiableList(componentNames);
	}

	@Override
	public List<String> getComponentNames() {
		return componentNames;
	}

	@Override
	public boolean hasComponent(String name) {
		return componentNames.contains(name);
	}

	@Override
public int size() {
	return 3;
}

	private final int _day;

	private final de.uni_koblenz.jgralabtest.schemas.greqltestschema.Month _month;

	private final int _year;

	public Date(int _day, de.uni_koblenz.jgralabtest.schemas.greqltestschema.Month _month, int _year) {
		this._day = _day;
		this._month = _month;
		this._year = _year;
	}
	
	public Date(java.util.Map<String, Object> componentValues) {
		assert componentValues.size() == 3;
		assert componentValues.containsKey("day");
		_day = (java.lang.Integer)componentValues.get("day");
		assert componentValues.containsKey("month");
		_month = (de.uni_koblenz.jgralabtest.schemas.greqltestschema.Month)componentValues.get("month");
		assert componentValues.containsKey("year");
		_year = (java.lang.Integer)componentValues.get("year");
	}

	public Date(GraphIO io) throws GraphIOException {
		io.match("(");
		_day = io.matchInteger();
		_month = de.uni_koblenz.jgralabtest.schemas.greqltestschema.Month.valueOfPermitNull(io.matchEnumConstant());
		_year = io.matchInteger();
		io.match(")");
	}

	public int get_day() {
		return _day;
	}

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.Month get_month() {
		return _month;
	}

	public int get_year() {
		return _year;
	}

	@Override
	public Object getComponent(String name) {
		if (name.equals("day")) {
			return _day;
		}
		if (name.equals("month")) {
			return _month;
		}
		if (name.equals("year")) {
			return _year;
		}
		throw new NoSuchAttributeException("Date doesn't contain an attribute " + name);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		String dayString;
		dayString = String.valueOf(_day);;
		sb.append("[").append("day").append("=").append(dayString);
		String monthString;
		monthString = String.valueOf(_month);;
		sb.append(", ").append("month").append("=").append(monthString);
		String yearString;
		yearString = String.valueOf(_year);;
		sb.append(", ").append("year").append("=").append(yearString);
		return sb.append("]").toString();
	}

	@Override
	public void writeComponentValues(GraphIO io) throws IOException, GraphIOException {
		io.writeSpace();
		io.write("(");
		io.noSpace();
		io.writeInteger(_day);
		if (_month != null) {
			io.writeIdentifier(_month.toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeInteger(_year);
		io.write(")");
	}
	public org.pcollections.PMap<String, Object> toPMap() {
		org.pcollections.PMap<String, Object> m = de.uni_koblenz.jgralab.JGraLab.map();
		m = m.plus("day", _day);
		m = m.plus("month", _month);
		m = m.plus("year", _year);
		return m;
	}

	@Override
	public boolean equals(Object o) {
		if (o == null) {
			return false;
		}
		if (o instanceof Date) {
			Date rec = (Date) o;
			if (_day != rec._day) {
				return false;
			}
			if (!(_month.equals(rec._month))) {
				return false;
				}
			if (_year != rec._year) {
				return false;
			}
			return true;
		}
		if (o instanceof de.uni_koblenz.jgralab.Record) {
			de.uni_koblenz.jgralab.Record rec = (de.uni_koblenz.jgralab.Record) o;
			if (rec.size() != 3) {
				return false;
			}
			try {
				if (!rec.getComponent("day").equals(_day)) {
					return false;
				}
				if (!rec.getComponent("month").equals(_month)) {
					return false;
				}
				if (!rec.getComponent("year").equals(_year)) {
					return false;
				}
				return true;
			} catch (NoSuchAttributeException e) {
				return false;
			}
		}
		return false;
	}

	@Override
	public int hashCode() {
		int h = 0;
		h += ((java.lang.Integer) _day).hashCode();
		h += _month.hashCode();
		h += ((java.lang.Integer) _year).hashCode();
		return h;
	}
}
