/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Crossroad extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteSchema.instance().vc_junctions_Crossroad;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad getNextCrossroad();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction getNextJunction();

	/**
	 * @return the first edge of class Footpath at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath getFirstFootpathIncidence();

	/**
	 * @return the first edge of class Footpath at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath getFirstFootpathIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Highway at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getFirstHighwayIncidence();

	/**
	 * @return the first edge of class Highway at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getFirstHighwayIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Street at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getFirstStreetIncidence();

	/**
	 * @return the first edge of class Street at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getFirstStreetIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ContainsCrossroad at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence();

	/**
	 * @return the first edge of class ContainsCrossroad at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroadIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Way at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getFirstWayIncidence();

	/**
	 * @return the first edge of class Way at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getFirstWayIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>src</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection add_src(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex);
		/**
		 * removes all src adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> remove_src();
		/**
		 * removes the given vertex as <code>src</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_src(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'src'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> get_src();
		/**
		 * adds the given vertex as <code>locality</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad add_locality(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex);
		/**
		 * removes all locality adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> remove_locality();
		/**
		 * removes the given vertex as <code>locality</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_locality(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality vertex);
		/**
		 * @return the vertex to this one with the rolename 'locality' 
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality get_locality();
		/**
		 * adds the given vertex as <code>dst</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection add_dst(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex);
		/**
		 * removes all dst adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> remove_dst();
		/**
		 * removes the given vertex as <code>dst</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_dst(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'dst'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> get_dst();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Footpath or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath> getFootpathIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Footpath.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath> getFootpathIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Highway or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway> getHighwayIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Highway.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway> getHighwayIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Street or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street> getStreetIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Street.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street> getStreetIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsCrossroad or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ContainsCrossroad.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Way or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way> getWayIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Way.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way> getWayIncidences(EdgeDirection direction);
}
