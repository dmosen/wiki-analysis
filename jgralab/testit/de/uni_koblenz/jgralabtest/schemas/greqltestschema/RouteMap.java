/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.greqltestschema;

public interface RouteMap extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.greqltestschema.RouteSchema.instance().gc_RouteMap;

	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date get_creationDate();

	public void set_creationDate(de.uni_koblenz.jgralabtest.schemas.greqltestschema.Date _creationDate);

	// ------------------------ Code for NamedElement ------------------------

	/**
	 * @return the first NamedElement vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement getFirstNamedElement();

	// ------------------------ Code for connections.AirRoute ------------------------

	/**
	 * @return the first AirRoute edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.AirRoute getFirstAirRoute();

	/**
	 * Creates a new AirRoute edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.AirRoute createAirRoute(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Airport alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Airport omega);

	// ------------------------ Code for connections.Connection ------------------------

	/**
	 * @return the first Connection edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection getFirstConnection();

	// ------------------------ Code for connections.Footpath ------------------------

	/**
	 * @return the first Footpath edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath getFirstFootpath();

	/**
	 * Creates a new Footpath edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath createFootpath(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad omega);

	// ------------------------ Code for connections.Highway ------------------------

	/**
	 * @return the first Highway edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway getFirstHighway();

	/**
	 * Creates a new Highway edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway createHighway(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad omega);

	// ------------------------ Code for connections.Street ------------------------

	/**
	 * @return the first Street edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street getFirstStreet();

	/**
	 * Creates a new Street edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street createStreet(de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad omega);

	// ------------------------ Code for connections.Way ------------------------

	/**
	 * @return the first Way edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way getFirstWay();

	// ------------------------ Code for junctions.Airport ------------------------

	/**
	 * @return the first Airport vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Airport getFirstAirport();

	/**
	 * Creates a new Airport vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Airport createAirport();

	// ------------------------ Code for junctions.Crossroad ------------------------

	/**
	 * @return the first Crossroad vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad getFirstCrossroad();

	/**
	 * Creates a new Crossroad vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad createCrossroad();

	// ------------------------ Code for junctions.Junction ------------------------

	/**
	 * @return the first Junction vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction getFirstJunction();

	// ------------------------ Code for junctions.Plaza ------------------------

	/**
	 * @return the first Plaza vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza getFirstPlaza();

	/**
	 * Creates a new Plaza vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza createPlaza();

	// ------------------------ Code for junctions.Roundabout ------------------------

	/**
	 * @return the first Roundabout vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Roundabout getFirstRoundabout();

	/**
	 * Creates a new Roundabout vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Roundabout createRoundabout();

	// ------------------------ Code for localities.City ------------------------

	/**
	 * @return the first City vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City getFirstCity();

	/**
	 * Creates a new City vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City createCity();

	// ------------------------ Code for localities.ContainsCrossroad ------------------------

	/**
	 * @return the first ContainsCrossroad edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad getFirstContainsCrossroad();

	/**
	 * Creates a new ContainsCrossroad edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad createContainsCrossroad(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad omega);

	// ------------------------ Code for localities.ContainsLocality ------------------------

	/**
	 * @return the first ContainsLocality edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality getFirstContainsLocality();

	/**
	 * Creates a new ContainsLocality edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality createContainsLocality(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality omega);

	// ------------------------ Code for localities.County ------------------------

	/**
	 * @return the first County vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County getFirstCounty();

	/**
	 * Creates a new County vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County createCounty();

	// ------------------------ Code for localities.HasCapital ------------------------

	/**
	 * @return the first HasCapital edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital getFirstHasCapital();

	/**
	 * Creates a new HasCapital edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital createHasCapital(de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County alpha, de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City omega);

	// ------------------------ Code for localities.Locality ------------------------

	/**
	 * @return the first Locality vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality getFirstLocality();

	// ------------------------ Code for localities.Town ------------------------

	/**
	 * @return the first Town vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Town getFirstTown();

	/**
	 * Creates a new Town vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Town createTown();

	// ------------------------ Code for localities.Village ------------------------

	/**
	 * @return the first Village vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village getFirstVillage();

	/**
	 * Creates a new Village vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village createVillage();

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.AirRoute or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.AirRoute> getAirRouteEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.Footpath or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Footpath> getFootpathEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.Highway or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Highway> getHighwayEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.Connection or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Connection> getConnectionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type localities.ContainsLocality or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsLocality> getContainsLocalityEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.Street or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Street> getStreetEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type localities.HasCapital or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.HasCapital> getHasCapitalEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type localities.ContainsCrossroad or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.ContainsCrossroad> getContainsCrossroadEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type connections.Way or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.connections.Way> getWayEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type localities.Locality or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Locality> getLocalityVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type junctions.Roundabout or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Roundabout> getRoundaboutVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type junctions.Junction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Junction> getJunctionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type junctions.Crossroad or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Crossroad> getCrossroadVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type junctions.Airport or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Airport> getAirportVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type NamedElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.NamedElement> getNamedElementVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type localities.County or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.County> getCountyVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type localities.City or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.City> getCityVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type localities.Town or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Town> getTownVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type junctions.Plaza or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.junctions.Plaza> getPlazaVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type localities.Village or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.greqltestschema.localities.Village> getVillageVertices();
	
}
