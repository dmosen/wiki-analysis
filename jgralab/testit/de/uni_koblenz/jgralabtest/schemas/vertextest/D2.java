/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.vertextest;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface D2 extends de.uni_koblenz.jgralabtest.schemas.vertextest.D {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.vertextest.VertexTestSchema.instance().vc_D2;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.B getNextB();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.vertextest.D vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D getNextD();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.vertextest.D2 vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D2 getNextD2();

	/**
	 * @return the first edge of class J at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.J getFirstJIncidence();

	/**
	 * @return the first edge of class J at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.J getFirstJIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>sourceH</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.H add_sourceH(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * removes all sourceH adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> remove_sourceH();
		/**
		 * removes the given vertex as <code>sourceH</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceH(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceH'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> get_sourceH();
		/**
		 * adds the given vertex as <code>sourceF</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.F</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.F</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.F add_sourceF(de.uni_koblenz.jgralabtest.schemas.vertextest.C vertex);
		/**
		 * removes all sourceF adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.F</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C> remove_sourceF();
		/**
		 * removes the given vertex as <code>sourceF</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.F</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceF(de.uni_koblenz.jgralabtest.schemas.vertextest.C vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceF'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.F</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C> get_sourceF();
		/**
		 * adds the given vertex as <code>sourceK</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.K add_sourceK(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * removes all sourceK adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> remove_sourceK();
		/**
		 * removes the given vertex as <code>sourceK</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceK(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceK'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> get_sourceK();
		/**
		 * adds the given vertex as <code>sourceJ</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.J add_sourceJ(de.uni_koblenz.jgralabtest.schemas.vertextest.C2 vertex);
		/**
		 * removes all sourceJ adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C2> remove_sourceJ();
		/**
		 * removes the given vertex as <code>sourceJ</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceJ(de.uni_koblenz.jgralabtest.schemas.vertextest.C2 vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceJ'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C2> get_sourceJ();
		/**
		 * adds the given vertex as <code>sourceE</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.J add_sourceE(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * removes all sourceE adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C2> remove_sourceE();
		/**
		 * removes the given vertex as <code>sourceE</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.J</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceE(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceE'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C2> get_sourceE();
		/**
		 * adds the given vertex as <code>sourceG</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.G</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.G</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.G add_sourceG(de.uni_koblenz.jgralabtest.schemas.vertextest.C vertex);
		/**
		 * removes all sourceG adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.G</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C> remove_sourceG();
		/**
		 * removes the given vertex as <code>sourceG</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.G</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceG(de.uni_koblenz.jgralabtest.schemas.vertextest.C vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceG'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.G</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.C> get_sourceG();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type J or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.J> getJIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type J.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.J> getJIncidences(EdgeDirection direction);
}
