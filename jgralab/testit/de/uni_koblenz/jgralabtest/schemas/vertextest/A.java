/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.vertextest;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface A extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.vertextest.VertexTestSchema.instance().vc_A;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.A getNextA();

	/**
	 * @return the first edge of class E at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.E getFirstEIncidence();

	/**
	 * @return the first edge of class E at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.E getFirstEIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class K at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.K getFirstKIncidence();

	/**
	 * @return the first edge of class K at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.K getFirstKIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class H at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.H getFirstHIncidence();

	/**
	 * @return the first edge of class H at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.H getFirstHIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class I at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.I getFirstIIncidence();

	/**
	 * @return the first edge of class I at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.I getFirstIIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>sourceI</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.I add_sourceI(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * removes all sourceI adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> remove_sourceI();
		/**
		 * removes the given vertex as <code>sourceI</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_sourceI(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'sourceI'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> get_sourceI();
		/**
		 * adds the given vertex as <code>w</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.H add_w(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * removes all w adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> remove_w();
		/**
		 * removes the given vertex as <code>w</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_w(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'w'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.H</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> get_w();
		/**
		 * adds the given vertex as <code>v</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.I add_v(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * removes all v adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> remove_v();
		/**
		 * removes the given vertex as <code>v</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_v(de.uni_koblenz.jgralabtest.schemas.vertextest.A vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'v'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.I</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.A> get_v();
		/**
		 * adds the given vertex as <code>targetK</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.K add_targetK(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * removes all targetK adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> remove_targetK();
		/**
		 * removes the given vertex as <code>targetK</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_targetK(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'targetK'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.K</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> get_targetK();
		/**
		 * adds the given vertex as <code>x</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.vertextest.E add_x(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * removes all x adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> remove_x();
		/**
		 * removes the given vertex as <code>x</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_x(de.uni_koblenz.jgralabtest.schemas.vertextest.B vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'x'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.vertextest.E</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.vertextest.B> get_x();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type E or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.E> getEIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type E.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.E> getEIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type K or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.K> getKIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type K.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.K> getKIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type H or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.H> getHIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type H.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.H> getHIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type I or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.I> getIIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type I.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.I> getIIncidences(EdgeDirection direction);
}
