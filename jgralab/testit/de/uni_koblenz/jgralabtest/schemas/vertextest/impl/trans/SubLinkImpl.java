/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.vertextest.impl.trans;

import de.uni_koblenz.jgralab.impl.trans.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralabtest.schemas.vertextest.impl.trans.ReversedSubLinkImpl;

import de.uni_koblenz.jgralabtest.schemas.vertextest.DoubleSubNode;
import de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode;

import java.io.IOException;
/**
 * FromVertexClass: DoubleSubNode
 * FromRoleName : sourcec
 * ToVertexClass: SuperNode
 * ToRoleName : targetc
 */

public class SubLinkImpl extends EdgeImpl implements de.uni_koblenz.jgralabtest.schemas.vertextest.Link, de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _aString;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _anInt;

	public SubLinkImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("aString")) return (T) get_aString();
		if (attributeName.equals("anInt")) return (T) (java.lang.Integer) get_anInt();
		throw new NoSuchAttributeException("SubLink doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("aString")) {
			set_aString((java.lang.String) data);
			return;
		}
		if (attributeName.equals("anInt")) {
			set_anInt((java.lang.Integer) data);
			return;
		}
		throw new NoSuchAttributeException("SubLink doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_aString() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'aString', because " + this + " isn't valid in current transaction.");
		if (_aString == null)
			return null;
		java.lang.String value = _aString.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_aString(java.lang.String _aString) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'aString', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._aString = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _aString, "aString");
		}
		if (this._aString == null) {
			this._aString = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "aString");
		}
		this._aString.setValidValue((java.lang.String) _aString, graph.getCurrentTransaction());
		attributeChanged(this._aString);
		graphModified();
	}

	public int get_anInt() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'anInt', because " + this + " isn't valid in current transaction.");
		if (_anInt == null)
			return 0;
		java.lang.Integer value = _anInt.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_anInt(int _anInt) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'anInt', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._anInt = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _anInt, "anInt");
		}
		if (this._anInt == null) {
			this._anInt = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "anInt");
		}
		this._anInt.setValidValue((java.lang.Integer) _anInt, graph.getCurrentTransaction());
		attributeChanged(this._anInt);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		java.lang.String _aString = io.matchUtfString();
		set_aString(_aString);
		int _anInt = io.matchInteger();
		set_anInt(_anInt);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("aString")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_aString(tmpVar);
			return;
		}
		if (attributeName.equals("anInt")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_anInt(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("SubLink doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(get_aString());
		io.writeInteger(get_anInt());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("aString")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_aString());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("anInt")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_anInt());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("SubLink doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_aString);
		attributes.add(_anInt);
		return attributes;
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.Link getNextLinkInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.Link)getNextEdge(de.uni_koblenz.jgralabtest.schemas.vertextest.Link.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink getNextSubLinkInGraph() {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink)getNextEdge(de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.Link getNextLinkIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.Link)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.vertextest.Link.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.Link getNextLinkIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.Link)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.vertextest.Link.class, orientation);
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink getNextSubLinkIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink.class);
	}

	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink getNextSubLinkIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink)getNextIncidence(de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedSubLinkImpl(this, graph);
	}
	public DoubleSubNode getAlpha() {
		return (DoubleSubNode) super.getAlpha();
	}
	public SuperNode getOmega() {
		return (SuperNode) super.getOmega();
	}
}
