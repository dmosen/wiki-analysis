/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.vertextest;

public interface VertexTestGraph extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.vertextest.VertexTestSchema.instance().gc_VertexTestGraph;

	// ------------------------ Code for A ------------------------

	/**
	 * @return the first A vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.A getFirstA();

	/**
	 * Creates a new A vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.A createA();

	// ------------------------ Code for AbstractSuperNode ------------------------

	/**
	 * @return the first AbstractSuperNode vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.AbstractSuperNode getFirstAbstractSuperNode();

	// ------------------------ Code for B ------------------------

	/**
	 * @return the first B vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.B getFirstB();

	/**
	 * Creates a new B vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.B createB();

	// ------------------------ Code for C ------------------------

	/**
	 * @return the first C vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.C getFirstC();

	/**
	 * Creates a new C vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.C createC();

	// ------------------------ Code for C2 ------------------------

	/**
	 * @return the first C2 vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.C2 getFirstC2();

	/**
	 * Creates a new C2 vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.C2 createC2();

	// ------------------------ Code for D ------------------------

	/**
	 * @return the first D vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D getFirstD();

	/**
	 * Creates a new D vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D createD();

	// ------------------------ Code for D2 ------------------------

	/**
	 * @return the first D2 vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D2 getFirstD2();

	/**
	 * Creates a new D2 vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.D2 createD2();

	// ------------------------ Code for DoubleSubNode ------------------------

	/**
	 * @return the first DoubleSubNode vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.DoubleSubNode getFirstDoubleSubNode();

	/**
	 * Creates a new DoubleSubNode vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.DoubleSubNode createDoubleSubNode();

	// ------------------------ Code for E ------------------------

	/**
	 * @return the first E edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.E getFirstE();

	/**
	 * Creates a new E edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.E createE(de.uni_koblenz.jgralabtest.schemas.vertextest.A alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.B omega);

	// ------------------------ Code for F ------------------------

	/**
	 * @return the first F edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.F getFirstF();

	/**
	 * Creates a new F edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.F createF(de.uni_koblenz.jgralabtest.schemas.vertextest.C alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.D omega);

	// ------------------------ Code for G ------------------------

	/**
	 * @return the first G edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.G getFirstG();

	/**
	 * Creates a new G edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.G createG(de.uni_koblenz.jgralabtest.schemas.vertextest.C alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.D omega);

	// ------------------------ Code for H ------------------------

	/**
	 * @return the first H edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.H getFirstH();

	/**
	 * Creates a new H edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.H createH(de.uni_koblenz.jgralabtest.schemas.vertextest.A alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.B omega);

	// ------------------------ Code for I ------------------------

	/**
	 * @return the first I edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.I getFirstI();

	/**
	 * Creates a new I edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.I createI(de.uni_koblenz.jgralabtest.schemas.vertextest.A alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.A omega);

	// ------------------------ Code for J ------------------------

	/**
	 * @return the first J edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.J getFirstJ();

	/**
	 * Creates a new J edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.J createJ(de.uni_koblenz.jgralabtest.schemas.vertextest.C2 alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.D2 omega);

	// ------------------------ Code for K ------------------------

	/**
	 * @return the first K edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.K getFirstK();

	/**
	 * Creates a new K edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.K createK(de.uni_koblenz.jgralabtest.schemas.vertextest.A alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.B omega);

	// ------------------------ Code for Link ------------------------

	/**
	 * @return the first Link edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.Link getFirstLink();

	/**
	 * Creates a new Link edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.Link createLink(de.uni_koblenz.jgralabtest.schemas.vertextest.AbstractSuperNode alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode omega);

	// ------------------------ Code for LinkBack ------------------------

	/**
	 * @return the first LinkBack edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.LinkBack getFirstLinkBack();

	/**
	 * Creates a new LinkBack edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.LinkBack createLinkBack(de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.AbstractSuperNode omega);

	// ------------------------ Code for SubLink ------------------------

	/**
	 * @return the first SubLink edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink getFirstSubLink();

	/**
	 * Creates a new SubLink edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink createSubLink(de.uni_koblenz.jgralabtest.schemas.vertextest.DoubleSubNode alpha, de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode omega);

	// ------------------------ Code for SubNode ------------------------

	/**
	 * @return the first SubNode vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubNode getFirstSubNode();

	/**
	 * Creates a new SubNode vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SubNode createSubNode();

	// ------------------------ Code for SuperNode ------------------------

	/**
	 * @return the first SuperNode vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode getFirstSuperNode();

	/**
	 * Creates a new SuperNode vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode createSuperNode();

	/**
	 * @return an Iterable for all edges of this graph that are of type F or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.F> getFEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SubLink or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.SubLink> getSubLinkEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type E or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.E> getEEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type LinkBack or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.LinkBack> getLinkBackEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Link or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.Link> getLinkEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type K or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.K> getKEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type H or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.H> getHEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type G or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.G> getGEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type J or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.J> getJEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type I or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.I> getIEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type D or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.D> getDVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type C or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.C> getCVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SuperNode or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.SuperNode> getSuperNodeVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type C2 or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.C2> getC2Vertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type B or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.B> getBVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type A or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.A> getAVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type D2 or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.D2> getD2Vertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SubNode or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.SubNode> getSubNodeVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type DoubleSubNode or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.DoubleSubNode> getDoubleSubNodeVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AbstractSuperNode or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.vertextest.AbstractSuperNode> getAbstractSuperNodeVertices();
	
}
