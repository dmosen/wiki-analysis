/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.vertextest;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema VertexTestSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class VertexTestSchema extends SchemaImpl {
	public final GraphClass gc_VertexTestGraph;
	public final VertexClass vc_B;
	public final VertexClass vc_SuperNode;
	public final VertexClass vc_A;
	public final VertexClass vc_AbstractSuperNode;
	public final VertexClass vc_D;
	public final VertexClass vc_C;
	public final VertexClass vc_SubNode;
	public final VertexClass vc_D2;
	public final VertexClass vc_C2;
	public final VertexClass vc_DoubleSubNode;
	public final EdgeClass ec_Link;
	public final EdgeClass ec_LinkBack;
	public final EdgeClass ec_I;
	public final EdgeClass ec_E;
	public final EdgeClass ec_SubLink;
	public final EdgeClass ec_F;
	public final EdgeClass ec_J;
	public final EdgeClass ec_H;
	public final EdgeClass ec_G;
	public final EdgeClass ec_K;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<VertexTestSchema> theInstance = new WeakReference<VertexTestSchema>(null);
	
	/**
	 * @return the singleton instance of VertexTestSchema
	 */
	public static VertexTestSchema instance() {
		VertexTestSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (VertexTestSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new VertexTestSchema();
			theInstance = new WeakReference<VertexTestSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a VertexTestSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private VertexTestSchema() {
		super("VertexTestSchema", "de.uni_koblenz.jgralabtest.schemas.vertextest");

		createMapDomain(getDomain("Integer"), getDomain("String"));

		{
			GraphClass gc = gc_VertexTestGraph = createGraphClass("VertexTestGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_B = gc.createVertexClass("B");
				vc.setAbstract(false);
			}

			{
				VertexClass vc = vc_SuperNode = gc.createVertexClass("SuperNode");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("number", getDomain("Integer"), getAttributedElementClass("SuperNode"), null));
			}

			{
				VertexClass vc = vc_A = gc.createVertexClass("A");
				vc.setAbstract(false);
			}

			{
				VertexClass vc = vc_AbstractSuperNode = gc.createVertexClass("AbstractSuperNode");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("AbstractSuperNode"), null));
			}

			{
				VertexClass vc = vc_D = gc.createVertexClass("D");
				vc.setAbstract(false);
				vc.addSuperClass(vc_B);
			}

			{
				VertexClass vc = vc_C = gc.createVertexClass("C");
				vc.setAbstract(false);
				vc.addSuperClass(vc_A);
			}

			{
				VertexClass vc = vc_SubNode = gc.createVertexClass("SubNode");
				vc.setAbstract(false);
				vc.addSuperClass(vc_AbstractSuperNode);
			}

			{
				VertexClass vc = vc_D2 = gc.createVertexClass("D2");
				vc.setAbstract(false);
				vc.addSuperClass(vc_D);
			}

			{
				VertexClass vc = vc_C2 = gc.createVertexClass("C2");
				vc.setAbstract(false);
				vc.addSuperClass(vc_C);
			}

			{
				VertexClass vc = vc_DoubleSubNode = gc.createVertexClass("DoubleSubNode");
				vc.setAbstract(false);
				vc.addSuperClass(vc_SuperNode);
				vc.addSuperClass(vc_SubNode);
				vc.addAttribute(createAttribute("nodeMap", getDomain("Map<Integer, String>"), getAttributedElementClass("DoubleSubNode"), null));
			}

			{
				EdgeClass ec = ec_Link = gc.createEdgeClass("Link",
					vc_AbstractSuperNode, 0, 2147483647, "source", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_SuperNode, 0, 2147483647, "target", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("aString", getDomain("String"), getAttributedElementClass("Link"), null));
			}

			{
				EdgeClass ec = ec_LinkBack = gc.createEdgeClass("LinkBack",
					vc_SuperNode, 0, 2147483647, "sourceb", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_AbstractSuperNode, 0, 2147483647, "targetb", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_I = gc.createEdgeClass("I",
					vc_A, 0, 2147483647, "sourceI", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_A, 0, 2147483647, "v", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_E = gc.createEdgeClass("E",
					vc_A, 0, 2147483647, "sourceE", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_B, 0, 2147483647, "x", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_SubLink = gc.createEdgeClass("SubLink",
					vc_DoubleSubNode, 0, 2147483647, "sourcec", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_SuperNode, 0, 2147483647, "targetc", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Link);
				ec.addAttribute(createAttribute("anInt", getDomain("Integer"), getAttributedElementClass("SubLink"), null));
			}

			{
				EdgeClass ec = ec_F = gc.createEdgeClass("F",
					vc_C, 0, 2147483647, "sourceF", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_D, 1, 3, "y", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_E);
				ec.getTo().addRedefinedRole("x");
			}

			{
				EdgeClass ec = ec_J = gc.createEdgeClass("J",
					vc_C2, 0, 2147483647, "sourceJ", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_D2, 1, 3, "u", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_E);
				ec.getFrom().addRedefinedRole("sourceE");
			}

			{
				EdgeClass ec = ec_H = gc.createEdgeClass("H",
					vc_A, 0, 2147483647, "sourceH", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_B, 1, 4, "w", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_E);
			}

			{
				EdgeClass ec = ec_G = gc.createEdgeClass("G",
					vc_C, 0, 2147483647, "sourceG", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_D, 1, 3, "z", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_E);
			}

			{
				EdgeClass ec = ec_K = gc.createEdgeClass("K",
					vc_A, 0, 2147483647, "sourceK", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_B, 2, 3, "targetK", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_H);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.vertextest.impl.std.VertexTestGraphFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.vertextest.impl.trans.VertexTestGraphFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.vertextest.impl.db.VertexTestGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new VertexTestGraph graph.
	*/
	public VertexTestGraph createVertexTestGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createVertexTestGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new VertexTestGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public VertexTestGraph createVertexTestGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_VertexTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new VertexTestGraph graph.
	*/
	public VertexTestGraph createVertexTestGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_VertexTestGraph, null, 100, 100);
	}

	/**
	 * Creates a new VertexTestGraph graph.
	*/
	public VertexTestGraph createVertexTestGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_VertexTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new VertexTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public VertexTestGraph createVertexTestGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createVertexTestGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new VertexTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public VertexTestGraph createVertexTestGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		VertexTestGraph graph = graphFactory.createGraph(gc_VertexTestGraph, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public VertexTestGraph loadVertexTestGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadVertexTestGraph(filename, factory, null);
	}

	public VertexTestGraph loadVertexTestGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadVertexTestGraph(filename, factory, pf);
	}

	public VertexTestGraph loadVertexTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadVertexTestGraph(filename, factory, null);
	}

	
	public VertexTestGraph loadVertexTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadVertexTestGraph(filename, factory, pf);
	}

	public VertexTestGraph loadVertexTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public VertexTestGraph loadVertexTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
