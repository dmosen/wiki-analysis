/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.citymap.impl.db;

import de.uni_koblenz.jgralab.impl.db.GraphImpl;
import de.uni_koblenz.jgralab.impl.db.GraphDatabase;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;

import java.io.IOException;

import org.pcollections.POrderedSet;

public class CityMapImpl extends GraphImpl implements de.uni_koblenz.jgralabtest.schemas.citymap.CityMap, de.uni_koblenz.jgralab.Graph {

	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use a GraphFactory
	**/
	public CityMapImpl(java.lang.String id, GraphDatabase graphDatabase) {
		super(id, de.uni_koblenz.jgralabtest.schemas.citymap.CityMap.GC, graphDatabase);
		initializeAttributesWithDefaultValues();
	}
	
	/**
	 * DON'T USE THE CONSTRUCTOR
	 * For instantiating a Graph, use a GraphFactory
	**/
	public CityMapImpl(java.lang.String id, int vMax, int eMax, GraphDatabase graphDatabase) {
		super(id, vMax, eMax, de.uni_koblenz.jgralabtest.schemas.citymap.CityMap.GC, graphDatabase);
		initializeAttributesWithDefaultValues();
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.GraphClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.citymap.CityMap.GC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Graph> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.citymap.CityMap.class;
	}

	public <T> T getAttribute(String attributeName) {
		throw new NoSuchAttributeException("CityMap doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		throw new NoSuchAttributeException("CityMap doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		throw new NoSuchAttributeException("CityMap doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		throw new NoSuchAttributeException("CityMap doesn't contain an attribute " + attributeName);
	}
	
	protected GreqlEvaluator greqlEvaluator;

	@Override
	public synchronized <T extends Vertex> POrderedSet<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) {
		if (greqlEvaluator == null) {
			greqlEvaluator = new GreqlEvaluator((String) null, this, null);
		}
		greqlEvaluator.setVariable("v", startVertex);
		greqlEvaluator.setQuery("using v: v " + pathDescription);
		greqlEvaluator.startEvaluation();
		return greqlEvaluator.getResultSet();
	}

	// ------------------------ Code for Bridge ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge getFirstBridge() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Bridge)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Bridge.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge createBridge(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Bridge.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge createBridge(int id, de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Bridge.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for CarPark ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark getFirstCarPark() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.CarPark)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.citymap.CarPark.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark createCarPark() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.CarPark> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.CarPark.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark createCarPark(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.CarPark> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.CarPark.VC, id, this);
	}

	// ------------------------ Code for Footpath ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath getFirstFootpath() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Footpath)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Footpath.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath createFootpath(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Footpath.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath createFootpath(int id, de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Footpath.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Intersection ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Intersection getFirstIntersection() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Intersection)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.citymap.Intersection.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Intersection createIntersection() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Intersection> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.Intersection.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Intersection createIntersection(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Intersection> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.Intersection.VC, id, this);
	}

	// ------------------------ Code for Junction ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Junction getFirstJunction() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Junction)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.citymap.Junction.VC);
	}

	// ------------------------ Code for ParkingGarage ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage getFirstParkingGarage() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage)getFirstVertex(de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage.VC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage createParkingGarage() {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage.VC, 0, this);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage createParkingGarage(int id) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage> createVertex(de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage.VC, id, this);
	}

	// ------------------------ Code for Street ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Street getFirstStreet() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Street)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Street.EC);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Street createStreet(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Street> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Street.EC, 0, this, alpha, omega);
	}

	public de.uni_koblenz.jgralabtest.schemas.citymap.Street createStreet(int id, de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega) {
		return graphFactory.<de.uni_koblenz.jgralabtest.schemas.citymap.Street> createEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Street.EC, id, this, alpha, omega);
	}

	// ------------------------ Code for Way ------------------------

	public de.uni_koblenz.jgralabtest.schemas.citymap.Way getFirstWay() {
		return (de.uni_koblenz.jgralabtest.schemas.citymap.Way)getFirstEdge(de.uni_koblenz.jgralabtest.schemas.citymap.Way.EC);
	}

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Way> getWayEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Way>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Way.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> getBridgeEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Bridge.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Street> getStreetEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Street>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Street.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> getFootpathEdges() {
		return new EdgeIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Footpath.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage> getParkingGarageVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage>(this, de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.CarPark> getCarParkVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.citymap.CarPark>(this, de.uni_koblenz.jgralabtest.schemas.citymap.CarPark.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Intersection> getIntersectionVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Intersection>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Intersection.class);
	}
	

	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Junction> getJunctionVertices() {
		return new VertexIterable<de.uni_koblenz.jgralabtest.schemas.citymap.Junction>(this, de.uni_koblenz.jgralabtest.schemas.citymap.Junction.class);
	}
	
}
