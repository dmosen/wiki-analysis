/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.citymap;

public interface ParkingGarage extends de.uni_koblenz.jgralabtest.schemas.citymap.CarPark {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.citymap.CityMapSchema.instance().vc_ParkingGarage;

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.citymap.CarPark vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark getNextCarPark();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Junction getNextJunction();

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage getNextParkingGarage();
		/**
		 * adds the given vertex as <code>to</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.citymap.Way add_to(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * removes all to adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> remove_to();
		/**
		 * removes the given vertex as <code>to</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_to(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'to'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> get_to();
		/**
		 * adds the given vertex as <code>from</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.citymap.Way add_from(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * removes all from adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> remove_from();
		/**
		 * removes the given vertex as <code>from</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_from(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'from'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> get_from();
}
