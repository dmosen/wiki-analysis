/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.citymap;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Junction extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.citymap.CityMapSchema.instance().vc_Junction;

	public java.lang.String get_name();

	public void set_name(java.lang.String _name);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Junction getNextJunction();

	/**
	 * @return the first edge of class Way at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Way getFirstWayIncidence();

	/**
	 * @return the first edge of class Way at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Way getFirstWayIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Bridge at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge getFirstBridgeIncidence();

	/**
	 * @return the first edge of class Bridge at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge getFirstBridgeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Street at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Street getFirstStreetIncidence();

	/**
	 * @return the first edge of class Street at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Street getFirstStreetIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Footpath at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath getFirstFootpathIncidence();

	/**
	 * @return the first edge of class Footpath at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath getFirstFootpathIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>to</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.citymap.Way add_to(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * removes all to adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> remove_to();
		/**
		 * removes the given vertex as <code>to</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_to(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'to'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> get_to();
		/**
		 * adds the given vertex as <code>from</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralabtest.schemas.citymap.Way add_from(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * removes all from adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> remove_from();
		/**
		 * removes the given vertex as <code>from</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_from(de.uni_koblenz.jgralabtest.schemas.citymap.Junction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'from'
		 *         (connected with a <code>de.uni_koblenz.jgralabtest.schemas.citymap.Way</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralabtest.schemas.citymap.Junction> get_from();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Way or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Way> getWayIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Way.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Way> getWayIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Bridge or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> getBridgeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Bridge.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> getBridgeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Street or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Street> getStreetIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Street.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Street> getStreetIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Footpath or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> getFootpathIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Footpath.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> getFootpathIncidences(EdgeDirection direction);
}
