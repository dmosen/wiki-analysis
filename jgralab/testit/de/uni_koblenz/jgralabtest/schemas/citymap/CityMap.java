/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.citymap;

public interface CityMap extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralabtest.schemas.citymap.CityMapSchema.instance().gc_CityMap;

	// ------------------------ Code for Bridge ------------------------

	/**
	 * @return the first Bridge edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge getFirstBridge();

	/**
	 * Creates a new Bridge edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.Bridge createBridge(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega);

	// ------------------------ Code for CarPark ------------------------

	/**
	 * @return the first CarPark vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark getFirstCarPark();

	/**
	 * Creates a new CarPark vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.CarPark createCarPark();

	// ------------------------ Code for Footpath ------------------------

	/**
	 * @return the first Footpath edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath getFirstFootpath();

	/**
	 * Creates a new Footpath edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.Footpath createFootpath(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega);

	// ------------------------ Code for Intersection ------------------------

	/**
	 * @return the first Intersection vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Intersection getFirstIntersection();

	/**
	 * Creates a new Intersection vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.Intersection createIntersection();

	// ------------------------ Code for Junction ------------------------

	/**
	 * @return the first Junction vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Junction getFirstJunction();

	// ------------------------ Code for ParkingGarage ------------------------

	/**
	 * @return the first ParkingGarage vertex in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage getFirstParkingGarage();

	/**
	 * Creates a new ParkingGarage vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage createParkingGarage();

	// ------------------------ Code for Street ------------------------

	/**
	 * @return the first Street edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Street getFirstStreet();

	/**
	 * Creates a new Street edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralabtest.schemas.citymap.Street createStreet(de.uni_koblenz.jgralabtest.schemas.citymap.Junction alpha, de.uni_koblenz.jgralabtest.schemas.citymap.Junction omega);

	// ------------------------ Code for Way ------------------------

	/**
	 * @return the first Way edge in this graph
	 */
	public de.uni_koblenz.jgralabtest.schemas.citymap.Way getFirstWay();

	/**
	 * @return an Iterable for all edges of this graph that are of type Way or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Way> getWayEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Bridge or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Bridge> getBridgeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Street or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Street> getStreetEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Footpath or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Footpath> getFootpathEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ParkingGarage or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.ParkingGarage> getParkingGarageVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CarPark or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.CarPark> getCarParkVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Intersection or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Intersection> getIntersectionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Junction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.citymap.Junction> getJunctionVertices();
	
}
