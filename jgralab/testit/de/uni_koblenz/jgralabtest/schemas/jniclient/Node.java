/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.jniclient;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Node extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralabtest.schemas.jniclient.JniTestSchema.instance().vc_Node;

	public boolean is_b();

	public void set_b(boolean _b);

	public de.uni_koblenz.jgralabtest.schemas.jniclient.Color get_color();

	public void set_color(de.uni_koblenz.jgralabtest.schemas.jniclient.Color _color);

	public double get_d();

	public void set_d(double _d);

	public int get_i();

	public void set_i(int _i);

	public long get_l();

	public void set_l(long _l);

	public org.pcollections.PVector<java.lang.Double> get_ld();

	public void set_ld(org.pcollections.PVector<java.lang.Double> _ld);

	public org.pcollections.PVector<java.lang.Integer> get_li();

	public void set_li(org.pcollections.PVector<java.lang.Integer> _li);

	public org.pcollections.PVector<java.lang.Long> get_ll();

	public void set_ll(org.pcollections.PVector<java.lang.Long> _ll);

	public org.pcollections.PVector<java.lang.String> get_ls();

	public void set_ls(org.pcollections.PVector<java.lang.String> _ls);

	public java.lang.String get_s();

	public void set_s(java.lang.String _s);

	/**
	 * @return the next de.uni_koblenz.jgralabtest.schemas.jniclient.Node vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Node getNextNode();

	/**
	 * @return the first edge of class Link at this vertex
	 */
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Link getFirstLinkIncidence();

	/**
	 * @return the first edge of class Link at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Link getFirstLinkIncidence(EdgeDirection orientation);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Link or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link> getLinkIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Link.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link> getLinkIncidences(EdgeDirection direction);
}
