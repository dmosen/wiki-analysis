/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.jniclient.impl.trans;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.trans.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class NodeImpl extends VertexImpl implements de.uni_koblenz.jgralabtest.schemas.jniclient.Node, de.uni_koblenz.jgralab.Vertex {

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean> _b;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.jniclient.Color> _color;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double> _d;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer> _i;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long> _l;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Double>> _ld;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Integer>> _li;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Long>> _ll;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.String>> _ls;

	protected de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String> _s;

	public NodeImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralabtest.schemas.jniclient.Node.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralabtest.schemas.jniclient.Node.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("b")) return (T) (java.lang.Boolean) is_b();
		if (attributeName.equals("color")) return (T) get_color();
		if (attributeName.equals("d")) return (T) (java.lang.Double) get_d();
		if (attributeName.equals("i")) return (T) (java.lang.Integer) get_i();
		if (attributeName.equals("l")) return (T) (java.lang.Long) get_l();
		if (attributeName.equals("ld")) return (T) get_ld();
		if (attributeName.equals("li")) return (T) get_li();
		if (attributeName.equals("ll")) return (T) get_ll();
		if (attributeName.equals("ls")) return (T) get_ls();
		if (attributeName.equals("s")) return (T) get_s();
		throw new NoSuchAttributeException("Node doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("b")) {
			set_b((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("color")) {
			if (data instanceof String) {
				set_color(de.uni_koblenz.jgralabtest.schemas.jniclient.Color.valueOfPermitNull((String) data));
			} else {
				set_color((de.uni_koblenz.jgralabtest.schemas.jniclient.Color) data);
			}
			return;
		}
		if (attributeName.equals("d")) {
			set_d((java.lang.Double) data);
			return;
		}
		if (attributeName.equals("i")) {
			set_i((java.lang.Integer) data);
			return;
		}
		if (attributeName.equals("l")) {
			set_l((java.lang.Long) data);
			return;
		}
		if (attributeName.equals("ld")) {
			set_ld((org.pcollections.PVector<java.lang.Double>) data);
			return;
		}
		if (attributeName.equals("li")) {
			set_li((org.pcollections.PVector<java.lang.Integer>) data);
			return;
		}
		if (attributeName.equals("ll")) {
			set_ll((org.pcollections.PVector<java.lang.Long>) data);
			return;
		}
		if (attributeName.equals("ls")) {
			set_ls((org.pcollections.PVector<java.lang.String>) data);
			return;
		}
		if (attributeName.equals("s")) {
			set_s((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Node doesn't contain an attribute " + attributeName);
	}

	public boolean is_b() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'b', because " + this + " isn't valid in current transaction.");
		if (_b == null)
			return false;
		java.lang.Boolean value = _b.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? false : value;
	}

	public void set_b(boolean _b) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'b', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._b = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, _b, "b");
		}
		if (this._b == null) {
			this._b = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Boolean>(this, null, "b");
		}
		this._b.setValidValue((java.lang.Boolean) _b, graph.getCurrentTransaction());
		attributeChanged(this._b);
		graphModified();
	}

	public de.uni_koblenz.jgralabtest.schemas.jniclient.Color get_color() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'color', because " + this + " isn't valid in current transaction.");
		if (_color == null)
			return null;
		de.uni_koblenz.jgralabtest.schemas.jniclient.Color value = _color.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_color(de.uni_koblenz.jgralabtest.schemas.jniclient.Color _color) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'color', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._color = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.jniclient.Color>(this, _color, "color");
		}
		if (this._color == null) {
			this._color = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<de.uni_koblenz.jgralabtest.schemas.jniclient.Color>(this, null, "color");
		}
		this._color.setValidValue((de.uni_koblenz.jgralabtest.schemas.jniclient.Color) _color, graph.getCurrentTransaction());
		attributeChanged(this._color);
		graphModified();
	}

	public double get_d() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'd', because " + this + " isn't valid in current transaction.");
		if (_d == null)
			return 0.0;
		java.lang.Double value = _d.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0.0 : value;
	}

	public void set_d(double _d) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'd', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._d = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, _d, "d");
		}
		if (this._d == null) {
			this._d = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Double>(this, null, "d");
		}
		this._d.setValidValue((java.lang.Double) _d, graph.getCurrentTransaction());
		attributeChanged(this._d);
		graphModified();
	}

	public int get_i() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'i', because " + this + " isn't valid in current transaction.");
		if (_i == null)
			return 0;
		java.lang.Integer value = _i.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0 : value;
	}

	public void set_i(int _i) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'i', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._i = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, _i, "i");
		}
		if (this._i == null) {
			this._i = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Integer>(this, null, "i");
		}
		this._i.setValidValue((java.lang.Integer) _i, graph.getCurrentTransaction());
		attributeChanged(this._i);
		graphModified();
	}

	public long get_l() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'l', because " + this + " isn't valid in current transaction.");
		if (_l == null)
			return 0L;
		java.lang.Long value = _l.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? 0L : value;
	}

	public void set_l(long _l) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'l', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._l = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, _l, "l");
		}
		if (this._l == null) {
			this._l = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.Long>(this, null, "l");
		}
		this._l.setValidValue((java.lang.Long) _l, graph.getCurrentTransaction());
		attributeChanged(this._l);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Double> get_ld() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'ld', because " + this + " isn't valid in current transaction.");
		if (_ld == null)
			return null;
		org.pcollections.PVector<java.lang.Double> value = _ld.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_ld(org.pcollections.PVector<java.lang.Double> _ld) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'ld', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._ld = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Double>>(this, _ld, "ld");
		}
		if (this._ld == null) {
			this._ld = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Double>>(this, null, "ld");
		}
		this._ld.setValidValue((org.pcollections.PVector<java.lang.Double>) _ld, graph.getCurrentTransaction());
		attributeChanged(this._ld);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Integer> get_li() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'li', because " + this + " isn't valid in current transaction.");
		if (_li == null)
			return null;
		org.pcollections.PVector<java.lang.Integer> value = _li.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_li(org.pcollections.PVector<java.lang.Integer> _li) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'li', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._li = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Integer>>(this, _li, "li");
		}
		if (this._li == null) {
			this._li = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Integer>>(this, null, "li");
		}
		this._li.setValidValue((org.pcollections.PVector<java.lang.Integer>) _li, graph.getCurrentTransaction());
		attributeChanged(this._li);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.Long> get_ll() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'll', because " + this + " isn't valid in current transaction.");
		if (_ll == null)
			return null;
		org.pcollections.PVector<java.lang.Long> value = _ll.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_ll(org.pcollections.PVector<java.lang.Long> _ll) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'll', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._ll = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Long>>(this, _ll, "ll");
		}
		if (this._ll == null) {
			this._ll = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.Long>>(this, null, "ll");
		}
		this._ll.setValidValue((org.pcollections.PVector<java.lang.Long>) _ll, graph.getCurrentTransaction());
		attributeChanged(this._ll);
		graphModified();
	}

	public org.pcollections.PVector<java.lang.String> get_ls() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'ls', because " + this + " isn't valid in current transaction.");
		if (_ls == null)
			return null;
		org.pcollections.PVector<java.lang.String> value = _ls.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_ls(org.pcollections.PVector<java.lang.String> _ls) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 'ls', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._ls = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.String>>(this, _ls, "ls");
		}
		if (this._ls == null) {
			this._ls = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<org.pcollections.PVector<java.lang.String>>(this, null, "ls");
		}
		this._ls.setValidValue((org.pcollections.PVector<java.lang.String>) _ls, graph.getCurrentTransaction());
		attributeChanged(this._ls);
		graphModified();
	}

	public java.lang.String get_s() {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 's', because " + this + " isn't valid in current transaction.");
		if (_s == null)
			return null;
		java.lang.String value = _s.getValidValue(graph.getCurrentTransaction());
		return (value == null) ? null : value;
	}

	public void set_s(java.lang.String _s) {
		if (!isValid())
			throw new de.uni_koblenz.jgralab.GraphException("Cannot access attribute 's', because " + this + " isn't valid in current transaction.");
		if (graph.isLoading()) {
			this._s = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, _s, "s");
		}
		if (this._s == null) {
			this._s = new de.uni_koblenz.jgralab.impl.trans.VersionedReferenceImpl<java.lang.String>(this, null, "s");
		}
		this._s.setValidValue((java.lang.String) _s, graph.getCurrentTransaction());
		attributeChanged(this._s);
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		boolean _b = io.matchBoolean();
		set_b(_b);
		de.uni_koblenz.jgralabtest.schemas.jniclient.Color _color = de.uni_koblenz.jgralabtest.schemas.jniclient.Color.valueOfPermitNull(io.matchEnumConstant());
		set_color(_color);
		double _d = io.matchDouble();
		set_d(_d);
		int _i = io.matchInteger();
		set_i(_i);
		long _l = io.matchLong();
		set_l(_l);
		org.pcollections.PVector<java.lang.Double> _ld = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Double> $_ld = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				double $_ldElement;
				$_ldElement = io.matchDouble();
				$_ld = $_ld.plus($_ldElement);
			}
			io.match("]");
			_ld = $_ld;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_ld = null;
		} else {
			_ld = null;
		}
		set_ld(_ld);
		org.pcollections.PVector<java.lang.Integer> _li = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Integer> $_li = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				int $_liElement;
				$_liElement = io.matchInteger();
				$_li = $_li.plus($_liElement);
			}
			io.match("]");
			_li = $_li;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_li = null;
		} else {
			_li = null;
		}
		set_li(_li);
		org.pcollections.PVector<java.lang.Long> _ll = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.Long> $_ll = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				long $_llElement;
				$_llElement = io.matchLong();
				$_ll = $_ll.plus($_llElement);
			}
			io.match("]");
			_ll = $_ll;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_ll = null;
		} else {
			_ll = null;
		}
		set_ll(_ll);
		org.pcollections.PVector<java.lang.String> _ls = null;
		if (io.isNextToken("[")) {
			org.pcollections.PVector<java.lang.String> $_ls = de.uni_koblenz.jgralab.JGraLab.vector();
			io.match("[");
			while (!io.isNextToken("]")) {
				java.lang.String $_lsElement;
				$_lsElement = io.matchUtfString();
				$_ls = $_ls.plus($_lsElement);
			}
			io.match("]");
			_ls = $_ls;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match(); 
			_ls = null;
		} else {
			_ls = null;
		}
		set_ls(_ls);
		java.lang.String _s = io.matchUtfString();
		set_s(_s);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("b")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Boolean tmpVar = null;
			tmpVar = io.matchBoolean();
			set_b(tmpVar);
			return;
		}
		if (attributeName.equals("color")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			de.uni_koblenz.jgralabtest.schemas.jniclient.Color tmpVar = null;
			tmpVar = de.uni_koblenz.jgralabtest.schemas.jniclient.Color.valueOfPermitNull(io.matchEnumConstant());
			set_color(tmpVar);
			return;
		}
		if (attributeName.equals("d")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Double tmpVar = null;
			tmpVar = io.matchDouble();
			set_d(tmpVar);
			return;
		}
		if (attributeName.equals("i")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Integer tmpVar = null;
			tmpVar = io.matchInteger();
			set_i(tmpVar);
			return;
		}
		if (attributeName.equals("l")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.Long tmpVar = null;
			tmpVar = io.matchLong();
			set_l(tmpVar);
			return;
		}
		if (attributeName.equals("ld")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Double> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Double> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					double $tmpVarElement;
					$tmpVarElement = io.matchDouble();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_ld(tmpVar);
			return;
		}
		if (attributeName.equals("li")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Integer> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Integer> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					int $tmpVarElement;
					$tmpVarElement = io.matchInteger();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_li(tmpVar);
			return;
		}
		if (attributeName.equals("ll")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.Long> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.Long> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					long $tmpVarElement;
					$tmpVarElement = io.matchLong();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_ll(tmpVar);
			return;
		}
		if (attributeName.equals("ls")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			org.pcollections.PVector<java.lang.String> tmpVar = null;
			
			if (io.isNextToken("[")) {
				org.pcollections.PVector<java.lang.String> $tmpVar = de.uni_koblenz.jgralab.JGraLab.vector();
				io.match("[");
				while (!io.isNextToken("]")) {
					java.lang.String $tmpVarElement;
					$tmpVarElement = io.matchUtfString();
					$tmpVar = $tmpVar.plus($tmpVarElement);
				}
				io.match("]");
				tmpVar = $tmpVar;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match(); 
				tmpVar = null;
			} else {
				tmpVar = null;
			}
			set_ls(tmpVar);
			return;
		}
		if (attributeName.equals("s")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			java.lang.String tmpVar = null;
			tmpVar = io.matchUtfString();
			set_s(tmpVar);
			return;
		}
		throw new NoSuchAttributeException("Node doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(is_b());
		if (get_color() != null) {
			io.writeIdentifier(get_color().toString());
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeDouble(get_d());
		io.writeInteger(get_i());
		io.writeLong(get_l());
		if (get_ld() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (double _ldElement : get_ld()) {
				io.writeDouble(_ldElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_li() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (int _liElement : get_li()) {
				io.writeInteger(_liElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_ll() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (long _llElement : get_ll()) {
				io.writeLong(_llElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		if (get_ls() != null) {
			io.writeSpace();
			io.write("[");
			io.noSpace();
			for (java.lang.String _lsElement : get_ls()) {
				io.writeUtfString(_lsElement);
			}
			io.write("]");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeUtfString(get_s());
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("b")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(is_b());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("color")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_color() != null) {
				io.writeIdentifier(get_color().toString());
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("d")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeDouble(get_d());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("i")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeInteger(get_i());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("l")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeLong(get_l());
			return io.getStringWriterResult();
		}
		if (attributeName.equals("ld")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_ld() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (double _ldElement : get_ld()) {
					io.writeDouble(_ldElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("li")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_li() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (int _liElement : get_li()) {
					io.writeInteger(_liElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("ll")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_ll() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (long _llElement : get_ll()) {
					io.writeLong(_llElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("ls")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (get_ls() != null) {
				io.writeSpace();
				io.write("[");
				io.noSpace();
				for (java.lang.String _lsElement : get_ls()) {
					io.writeUtfString(_lsElement);
				}
				io.write("]");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("s")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(get_s());
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Node doesn't contain an attribute " + attributeName);
	}
	public java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes() {
		java.util.Set<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>> attributes = new java.util.HashSet<de.uni_koblenz.jgralab.trans.VersionedDataObject<?>>();
		attributes.add(_b);
		attributes.add(_color);
		attributes.add(_d);
		attributes.add(_i);
		attributes.add(_l);
		attributes.add(_ld);
		attributes.add(_li);
		attributes.add(_ll);
		attributes.add(_ls);
		attributes.add(_s);
		return attributes;
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Node getNextNode() {
		return (de.uni_koblenz.jgralabtest.schemas.jniclient.Node)getNextVertex(de.uni_koblenz.jgralabtest.schemas.jniclient.Node.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Link getFirstLinkIncidence() {
		return (de.uni_koblenz.jgralabtest.schemas.jniclient.Link)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.jniclient.Link.class);
	}

	@Override
	public de.uni_koblenz.jgralabtest.schemas.jniclient.Link getFirstLinkIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralabtest.schemas.jniclient.Link)getFirstIncidence(de.uni_koblenz.jgralabtest.schemas.jniclient.Link.class, orientation);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link> getLinkIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link>(this, de.uni_koblenz.jgralabtest.schemas.jniclient.Link.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link> getLinkIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralabtest.schemas.jniclient.Link>(this, de.uni_koblenz.jgralabtest.schemas.jniclient.Link.class, direction);
	}
}
