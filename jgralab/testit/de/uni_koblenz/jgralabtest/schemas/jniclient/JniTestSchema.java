/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralabtest.schemas.jniclient;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphException;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema JniTestSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class JniTestSchema extends SchemaImpl {
	public final GraphClass gc_JniTestGraph;
	public final VertexClass vc_SimpleNode;
	public final VertexClass vc_Node;
	public final EdgeClass ec_Link;
	public final EdgeClass ec_SimpleEdge;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<JniTestSchema> theInstance = new WeakReference<JniTestSchema>(null);
	
	/**
	 * @return the singleton instance of JniTestSchema
	 */
	public static JniTestSchema instance() {
		JniTestSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (JniTestSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new JniTestSchema();
			theInstance = new WeakReference<JniTestSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a JniTestSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private JniTestSchema() {
		super("JniTestSchema", "de.uni_koblenz.jgralabtest.schemas.jniclient");

		{
			EnumDomain dom = createEnumDomain("Color");
			dom.addConst("RED");
			dom.addConst("GREEN");
			dom.addConst("BLUE");
			dom.addConst("YELLOW");
			dom.addConst("BLACK");
			dom.addConst("WHITE");
		}

		createListDomain(getDomain("String"));

		createListDomain(getDomain("Integer"));

		createListDomain(getDomain("Long"));

		createListDomain(getDomain("Double"));

		{
			GraphClass gc = gc_JniTestGraph = createGraphClass("JniTestGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_SimpleNode = gc.createVertexClass("SimpleNode");
				vc.setAbstract(false);
			}

			{
				VertexClass vc = vc_Node = gc.createVertexClass("Node");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("b", getDomain("Boolean"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("color", getDomain("Color"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("d", getDomain("Double"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("i", getDomain("Integer"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("l", getDomain("Long"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("ld", getDomain("List<Double>"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("li", getDomain("List<Integer>"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("ll", getDomain("List<Long>"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("ls", getDomain("List<String>"), getAttributedElementClass("Node"), null));
				vc.addAttribute(createAttribute("s", getDomain("String"), getAttributedElementClass("Node"), null));
			}

			{
				EdgeClass ec = ec_Link = gc.createEdgeClass("Link",
					vc_Node, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Node, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_SimpleEdge = gc.createEdgeClass("SimpleEdge",
					vc_SimpleNode, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_SimpleNode, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralabtest.schemas.jniclient.impl.std.JniTestGraphFactoryImpl();
			case TRANSACTION:
				return new de.uni_koblenz.jgralabtest.schemas.jniclient.impl.trans.JniTestGraphFactoryImpl();
			case DATABASE:
				return new de.uni_koblenz.jgralabtest.schemas.jniclient.impl.db.JniTestGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new JniTestGraph graph.
	*/
	public JniTestGraph createJniTestGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createJniTestGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new JniTestGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public JniTestGraph createJniTestGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_JniTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new JniTestGraph graph.
	*/
	public JniTestGraph createJniTestGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_JniTestGraph, null, 100, 100);
	}

	/**
	 * Creates a new JniTestGraph graph.
	*/
	public JniTestGraph createJniTestGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_JniTestGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new JniTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public JniTestGraph createJniTestGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createJniTestGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new JniTestGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public JniTestGraph createJniTestGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		de.uni_koblenz.jgralab.impl.GraphFactoryImpl graphFactory = (de.uni_koblenz.jgralab.impl.GraphFactoryImpl) createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.DATABASE);
		graphFactory.setGraphDatabase(graphDatabase);
		JniTestGraph graph = graphFactory.createGraph(gc_JniTestGraph, id, vMax, eMax);
		if (!graphDatabase.containsGraph(id)) {
			graphDatabase.insert((de.uni_koblenz.jgralab.impl.db.GraphImpl)graph);
			return graph;
		} else {
			throw new GraphException("Graph with identifier " + id + " already exists in database.");
		}
	}

	public JniTestGraph loadJniTestGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadJniTestGraph(filename, factory, null);
	}

	public JniTestGraph loadJniTestGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadJniTestGraph(filename, factory, pf);
	}

	public JniTestGraph loadJniTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadJniTestGraph(filename, factory, null);
	}

	
	public JniTestGraph loadJniTestGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadJniTestGraph(filename, factory, pf);
	}

	public JniTestGraph loadJniTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public JniTestGraph loadJniTestGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
