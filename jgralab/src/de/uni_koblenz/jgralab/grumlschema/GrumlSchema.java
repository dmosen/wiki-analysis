/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.grumlschema;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;
import de.uni_koblenz.jgralab.schema.impl.ConstraintImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema GrumlSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class GrumlSchema extends SchemaImpl {
	public final GraphClass gc_SchemaGraph;
	public final VertexClass vc_structure_NamedElement;
	public final VertexClass vc_structure_Comment;
	public final VertexClass vc_structure_IncidenceClass;
	public final VertexClass vc_structure_Constraint;
	public final VertexClass vc_structure_Schema;
	public final VertexClass vc_structure_Attribute;
	public final VertexClass vc_structure_Package;
	public final VertexClass vc_domains_Domain;
	public final VertexClass vc_structure_AttributedElementClass;
	public final VertexClass vc_domains_RecordDomain;
	public final VertexClass vc_domains_CollectionDomain;
	public final VertexClass vc_domains_EnumDomain;
	public final VertexClass vc_domains_BasicDomain;
	public final VertexClass vc_domains_MapDomain;
	public final VertexClass vc_structure_GraphElementClass;
	public final VertexClass vc_structure_GraphClass;
	public final VertexClass vc_domains_SetDomain;
	public final VertexClass vc_domains_ListDomain;
	public final VertexClass vc_domains_IntegerDomain;
	public final VertexClass vc_domains_StringDomain;
	public final VertexClass vc_domains_BooleanDomain;
	public final VertexClass vc_domains_LongDomain;
	public final VertexClass vc_domains_DoubleDomain;
	public final VertexClass vc_structure_VertexClass;
	public final VertexClass vc_structure_EdgeClass;
	public final EdgeClass ec_domains_HasValueDomain;
	public final EdgeClass ec_structure_GoesTo;
	public final EdgeClass ec_structure_HasConstraint;
	public final EdgeClass ec_domains_HasRecordDomainComponent;
	public final EdgeClass ec_domains_HasBaseDomain;
	public final EdgeClass ec_structure_ContainsDomain;
	public final EdgeClass ec_structure_Subsets;
	public final EdgeClass ec_structure_HasAttribute;
	public final EdgeClass ec_structure_ContainsDefaultPackage;
	public final EdgeClass ec_structure_SpecializesVertexClass;
	public final EdgeClass ec_structure_Annotates;
	public final EdgeClass ec_structure_EndsAt;
	public final EdgeClass ec_structure_ComesFrom;
	public final EdgeClass ec_structure_HasDomain;
	public final EdgeClass ec_structure_ContainsGraphElementClass;
	public final EdgeClass ec_structure_DefinesGraphClass;
	public final EdgeClass ec_domains_HasKeyDomain;
	public final EdgeClass ec_structure_SpecializesEdgeClass;
	public final EdgeClass ec_structure_ContainsSubPackage;
	public final EdgeClass ec_structure_Redefines;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<GrumlSchema> theInstance = new WeakReference<GrumlSchema>(null);
	
	/**
	 * @return the singleton instance of GrumlSchema
	 */
	public static GrumlSchema instance() {
		GrumlSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (GrumlSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new GrumlSchema();
			theInstance = new WeakReference<GrumlSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a GrumlSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private GrumlSchema() {
		super("GrumlSchema", "de.uni_koblenz.jgralab.grumlschema");

		{
			EnumDomain dom = createEnumDomain("structure.IncidenceDirection");
			dom.addConst("IN");
			dom.addConst("OUT");
			dom.addComment("Direction viewed from vertex class.");
		}

		{
			EnumDomain dom = createEnumDomain("structure.AggregationKind");
			dom.addConst("NONE");
			dom.addConst("SHARED");
			dom.addConst("COMPOSITE");
		}

		createListDomain(getDomain("String"));

		{
			GraphClass gc = gc_SchemaGraph = createGraphClass("SchemaGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_structure_NamedElement = gc.createVertexClass("structure.NamedElement");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("qualifiedName", getDomain("String"), getAttributedElementClass("structure.NamedElement"), null));
			}

			{
				VertexClass vc = vc_structure_Comment = gc.createVertexClass("structure.Comment");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("text", getDomain("String"), getAttributedElementClass("structure.Comment"), null));
			}

			{
				VertexClass vc = vc_structure_IncidenceClass = gc.createVertexClass("structure.IncidenceClass");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("aggregation", getDomain("structure.AggregationKind"), getAttributedElementClass("structure.IncidenceClass"), null));
				vc.addAttribute(createAttribute("max", getDomain("Integer"), getAttributedElementClass("structure.IncidenceClass"), null));
				vc.addAttribute(createAttribute("min", getDomain("Integer"), getAttributedElementClass("structure.IncidenceClass"), null));
				vc.addAttribute(createAttribute("roleName", getDomain("String"), getAttributedElementClass("structure.IncidenceClass"), null));
				vc.addConstraint(new ConstraintImpl("Each IncidenceClass must either have a ComesFrom or a GoesTo Edge.", "import structure.*; forall ic : V{IncidenceClass} @ count(ic --<>{ComesFrom, GoesTo}) = 1", "import structure.*; from ic : V{IncidenceClass} with count(ic --<>{ComesFrom, GoesTo}) <> 1 reportSet ic end"));
				vc.addComment("The implementation in jgralab.schema.impl gets an \"edgeclass\" attribute to ensure two-way navigability of ComesFrom/GoesTo associations.");
			}

			{
				VertexClass vc = vc_structure_Constraint = gc.createVertexClass("structure.Constraint");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("message", getDomain("String"), getAttributedElementClass("structure.Constraint"), null));
				vc.addAttribute(createAttribute("offendingElementsQuery", getDomain("String"), getAttributedElementClass("structure.Constraint"), null));
				vc.addAttribute(createAttribute("predicateQuery", getDomain("String"), getAttributedElementClass("structure.Constraint"), null));
			}

			{
				VertexClass vc = vc_structure_Schema = gc.createVertexClass("structure.Schema");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("structure.Schema"), null));
				vc.addAttribute(createAttribute("packagePrefix", getDomain("String"), getAttributedElementClass("structure.Schema"), null));
			}

			{
				VertexClass vc = vc_structure_Attribute = gc.createVertexClass("structure.Attribute");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("defaultValue", getDomain("String"), getAttributedElementClass("structure.Attribute"), null));
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("structure.Attribute"), null));
				vc.addComment("The defaultValue is a string constant in TG syntax, compatible to the Domain of the Attribute.\ndefaultValue may be null (which means no default value is specified).");
			}

			{
				VertexClass vc = vc_structure_Package = gc.createVertexClass("structure.Package");
				vc.setAbstract(false);
				vc.addSuperClass(vc_structure_NamedElement);
				vc.addConstraint(new ConstraintImpl("A Package must either be default or subpackage, but not both", "import structure.*; forall p: V{Package} @ (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) = 1", "import structure.*; from p: V{Package} with (inDegree{ContainsDefaultPackage}(p) + inDegree{ContainsSubPackage}(p)) <> 1 reportSet p end"));
			}

			{
				VertexClass vc = vc_domains_Domain = gc.createVertexClass("domains.Domain");
				vc.setAbstract(true);
				vc.addSuperClass(vc_structure_NamedElement);
			}

			{
				VertexClass vc = vc_structure_AttributedElementClass = gc.createVertexClass("structure.AttributedElementClass");
				vc.setAbstract(true);
				vc.addSuperClass(vc_structure_NamedElement);
			}

			{
				VertexClass vc = vc_domains_RecordDomain = gc.createVertexClass("domains.RecordDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_Domain);
			}

			{
				VertexClass vc = vc_domains_CollectionDomain = gc.createVertexClass("domains.CollectionDomain");
				vc.setAbstract(true);
				vc.addSuperClass(vc_domains_Domain);
			}

			{
				VertexClass vc = vc_domains_EnumDomain = gc.createVertexClass("domains.EnumDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_Domain);
				vc.addAttribute(createAttribute("enumConstants", getDomain("List<String>"), getAttributedElementClass("domains.EnumDomain"), null));
			}

			{
				VertexClass vc = vc_domains_BasicDomain = gc.createVertexClass("domains.BasicDomain");
				vc.setAbstract(true);
				vc.addSuperClass(vc_domains_Domain);
			}

			{
				VertexClass vc = vc_domains_MapDomain = gc.createVertexClass("domains.MapDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_Domain);
			}

			{
				VertexClass vc = vc_structure_GraphElementClass = gc.createVertexClass("structure.GraphElementClass");
				vc.setAbstract(true);
				vc.addSuperClass(vc_structure_AttributedElementClass);
				vc.addAttribute(createAttribute("abstract", getDomain("Boolean"), getAttributedElementClass("structure.GraphElementClass"), null));
			}

			{
				VertexClass vc = vc_structure_GraphClass = gc.createVertexClass("structure.GraphClass");
				vc.setAbstract(false);
				vc.addSuperClass(vc_structure_AttributedElementClass);
				vc.addConstraint(new ConstraintImpl("There must be exactly one GraphClass.", "count(V{structure.GraphClass}) = 1", "V{structure.GraphClass}"));
			}

			{
				VertexClass vc = vc_domains_SetDomain = gc.createVertexClass("domains.SetDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_CollectionDomain);
			}

			{
				VertexClass vc = vc_domains_ListDomain = gc.createVertexClass("domains.ListDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_CollectionDomain);
			}

			{
				VertexClass vc = vc_domains_IntegerDomain = gc.createVertexClass("domains.IntegerDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_BasicDomain);
			}

			{
				VertexClass vc = vc_domains_StringDomain = gc.createVertexClass("domains.StringDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_BasicDomain);
			}

			{
				VertexClass vc = vc_domains_BooleanDomain = gc.createVertexClass("domains.BooleanDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_BasicDomain);
			}

			{
				VertexClass vc = vc_domains_LongDomain = gc.createVertexClass("domains.LongDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_BasicDomain);
			}

			{
				VertexClass vc = vc_domains_DoubleDomain = gc.createVertexClass("domains.DoubleDomain");
				vc.setAbstract(false);
				vc.addSuperClass(vc_domains_BasicDomain);
			}

			{
				VertexClass vc = vc_structure_VertexClass = gc.createVertexClass("structure.VertexClass");
				vc.setAbstract(false);
				vc.addSuperClass(vc_structure_GraphElementClass);
			}

			{
				VertexClass vc = vc_structure_EdgeClass = gc.createVertexClass("structure.EdgeClass");
				vc.setAbstract(false);
				vc.addSuperClass(vc_structure_GraphElementClass);
				vc.addConstraint(new ConstraintImpl("An EdgeClass may have at most one shared/composite end.", "import structure.*; forall ec : V{EdgeClass} @ theElement(ec <>--{ComesFrom}).aggregation = \"NONE\" or theElement(ec <>--{GoesTo}).aggregation = \"NONE\"", "import structure.*; from ec : V{EdgeClass} with theElement(ec <>--{ComesFrom}).aggregation <> \"NONE\" and theElement(ec <>--{GoesTo}).aggregation <> \"NONE\" reportSet ec end"));
			}

			{
				EdgeClass ec = ec_domains_HasValueDomain = gc.createEdgeClass("domains.HasValueDomain",
					vc_domains_MapDomain, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 1, 1, "valuedomain", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_GoesTo = gc.createEdgeClass("structure.GoesTo",
					vc_structure_EdgeClass, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_IncidenceClass, 1, 1, "to", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_HasConstraint = gc.createEdgeClass("structure.HasConstraint",
					vc_structure_AttributedElementClass, 1, 1, "constrainedElement", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_Constraint, 0, 2147483647, "constraint", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_domains_HasRecordDomainComponent = gc.createEdgeClass("domains.HasRecordDomainComponent",
					vc_domains_RecordDomain, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 1, 2147483647, "componentdomain", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("domains.HasRecordDomainComponent"), null));
			}

			{
				EdgeClass ec = ec_domains_HasBaseDomain = gc.createEdgeClass("domains.HasBaseDomain",
					vc_domains_CollectionDomain, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 1, 1, "basedomain", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_ContainsDomain = gc.createEdgeClass("structure.ContainsDomain",
					vc_structure_Package, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_Subsets = gc.createEdgeClass("structure.Subsets",
					vc_structure_IncidenceClass, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_IncidenceClass, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_HasAttribute = gc.createEdgeClass("structure.HasAttribute",
					vc_structure_AttributedElementClass, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_Attribute, 0, 2147483647, "attribute", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_ContainsDefaultPackage = gc.createEdgeClass("structure.ContainsDefaultPackage",
					vc_structure_Schema, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_Package, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_SpecializesVertexClass = gc.createEdgeClass("structure.SpecializesVertexClass",
					vc_structure_VertexClass, 0, 2147483647, "subclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_VertexClass, 0, 2147483647, "superclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_Annotates = gc.createEdgeClass("structure.Annotates",
					vc_structure_Comment, 0, 2147483647, "comment", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_NamedElement, 1, 1, "annotatedElement", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_EndsAt = gc.createEdgeClass("structure.EndsAt",
					vc_structure_IncidenceClass, 0, 2147483647, "incidence", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_VertexClass, 1, 1, "targetclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_ComesFrom = gc.createEdgeClass("structure.ComesFrom",
					vc_structure_EdgeClass, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_IncidenceClass, 1, 1, "from", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_HasDomain = gc.createEdgeClass("structure.HasDomain",
					vc_structure_Attribute, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 1, 1, "domain", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_ContainsGraphElementClass = gc.createEdgeClass("structure.ContainsGraphElementClass",
					vc_structure_Package, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_GraphElementClass, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_DefinesGraphClass = gc.createEdgeClass("structure.DefinesGraphClass",
					vc_structure_Schema, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_GraphClass, 1, 1, "graphClass", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_domains_HasKeyDomain = gc.createEdgeClass("domains.HasKeyDomain",
					vc_domains_MapDomain, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_domains_Domain, 1, 1, "keydomain", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_SpecializesEdgeClass = gc.createEdgeClass("structure.SpecializesEdgeClass",
					vc_structure_EdgeClass, 0, 2147483647, "subclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_EdgeClass, 0, 2147483647, "superclass", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_ContainsSubPackage = gc.createEdgeClass("structure.ContainsSubPackage",
					vc_structure_Package, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_Package, 0, 2147483647, "subpackage", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_structure_Redefines = gc.createEdgeClass("structure.Redefines",
					vc_structure_IncidenceClass, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_structure_IncidenceClass, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_structure_Subsets);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralab.grumlschema.impl.std.SchemaGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new SchemaGraph graph.
	*/
	public SchemaGraph createSchemaGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createSchemaGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new SchemaGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public SchemaGraph createSchemaGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_SchemaGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SchemaGraph graph.
	*/
	public SchemaGraph createSchemaGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_SchemaGraph, null, 100, 100);
	}

	/**
	 * Creates a new SchemaGraph graph.
	*/
	public SchemaGraph createSchemaGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_SchemaGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new SchemaGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public SchemaGraph createSchemaGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createSchemaGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new SchemaGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public SchemaGraph createSchemaGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public SchemaGraph loadSchemaGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSchemaGraph(filename, factory, null);
	}

	public SchemaGraph loadSchemaGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadSchemaGraph(filename, factory, pf);
	}

	public SchemaGraph loadSchemaGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSchemaGraph(filename, factory, null);
	}

	
	public SchemaGraph loadSchemaGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadSchemaGraph(filename, factory, pf);
	}

	public SchemaGraph loadSchemaGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public SchemaGraph loadSchemaGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
