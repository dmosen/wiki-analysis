/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.grumlschema.impl.std.structure;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import java.io.IOException;

public class VertexClassImpl extends VertexImpl implements de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass, de.uni_koblenz.jgralab.grumlschema.structure.VertexClass {

	protected boolean _abstract;

	protected java.lang.String _qualifiedName;

	public VertexClassImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.VertexClass getAttributedElementClass() {
		return de.uni_koblenz.jgralab.grumlschema.structure.VertexClass.VC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Vertex> getSchemaClass() {
		return de.uni_koblenz.jgralab.grumlschema.structure.VertexClass.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("abstract")) return (T) (java.lang.Boolean) is_abstract();
		if (attributeName.equals("qualifiedName")) return (T) get_qualifiedName();
		throw new NoSuchAttributeException("structure.VertexClass doesn't contain an attribute " + attributeName);
	}

	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("abstract")) {
			set_abstract((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("qualifiedName")) {
			set_qualifiedName((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("structure.VertexClass doesn't contain an attribute " + attributeName);
	}

	public boolean is_abstract() {
		return _abstract;
	}

	public void set_abstract(boolean _abstract) {
		ecaAttributeChanging("abstract", this._abstract, _abstract);
		Object oldValue = this._abstract;
		this._abstract = _abstract;
		graphModified();
	ecaAttributeChanged("abstract", oldValue, _abstract);
	}

	public java.lang.String get_qualifiedName() {
		return _qualifiedName;
	}

	public void set_qualifiedName(java.lang.String _qualifiedName) {
		ecaAttributeChanging("qualifiedName", this._qualifiedName, _qualifiedName);
		Object oldValue = this._qualifiedName;
		this._qualifiedName = _qualifiedName;
		graphModified();
	ecaAttributeChanged("qualifiedName", oldValue, _qualifiedName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_abstract = io.matchBoolean();
		set_abstract(_abstract);
		_qualifiedName = io.matchUtfString();
		set_qualifiedName(_qualifiedName);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("abstract")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_abstract = io.matchBoolean();
			set_abstract(_abstract);
			return;
		}
		if (attributeName.equals("qualifiedName")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_qualifiedName = io.matchUtfString();
			set_qualifiedName(_qualifiedName);
			return;
		}
		throw new NoSuchAttributeException("structure.VertexClass doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeBoolean(_abstract);
		io.writeUtfString(_qualifiedName);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("abstract")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(_abstract);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("qualifiedName")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_qualifiedName);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("structure.VertexClass doesn't contain an attribute " + attributeName);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.AttributedElementClass getNextAttributedElementClass() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.AttributedElementClass)getNextVertex(de.uni_koblenz.jgralab.grumlschema.structure.AttributedElementClass.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass getNextGraphElementClass() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass)getNextVertex(de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.NamedElement getNextNamedElement() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.NamedElement)getNextVertex(de.uni_koblenz.jgralab.grumlschema.structure.NamedElement.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.VertexClass getNextVertexClass() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass)getNextVertex(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt getFirstEndsAtIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt getFirstEndsAtIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.Annotates getFirstAnnotatesIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.Annotates)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.Annotates getFirstAnnotatesIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.Annotates)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass getFirstSpecializesVertexClassIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass getFirstSpecializesVertexClassIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass getFirstContainsGraphElementClassIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass getFirstContainsGraphElementClassIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint getFirstHasConstraintIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint getFirstHasConstraintIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, orientation);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute getFirstHasAttributeIncidence() {
		return (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class);
	}

	@Override
	public de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute getFirstHasAttributeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute)getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, orientation);
	}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass add_subclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.EC, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) vertex, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> remove_subclass() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.VertexClass>();
			de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass edge = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass next = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_subclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass edge = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass next = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> get_subclass() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass, de.uni_koblenz.jgralab.grumlschema.structure.VertexClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.Annotates add_comment(de.uni_koblenz.jgralab.grumlschema.structure.Comment vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.EC, (de.uni_koblenz.jgralab.grumlschema.structure.Comment) vertex, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Comment> remove_comment() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.Comment> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.Comment>();
			de.uni_koblenz.jgralab.grumlschema.structure.Annotates edge = (de.uni_koblenz.jgralab.grumlschema.structure.Annotates) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.Annotates next = (de.uni_koblenz.jgralab.grumlschema.structure.Annotates) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.Comment) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_comment(de.uni_koblenz.jgralab.grumlschema.structure.Comment vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.Annotates edge = (de.uni_koblenz.jgralab.grumlschema.structure.Annotates) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.Annotates next = (de.uni_koblenz.jgralab.grumlschema.structure.Annotates) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Comment> get_comment() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.Annotates, de.uni_koblenz.jgralab.grumlschema.structure.Comment>(this, de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass add_superclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.EC, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> remove_superclass() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.VertexClass>();
			de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass edge = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass next = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_superclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass edge = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass next = (de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> get_superclass() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass, de.uni_koblenz.jgralab.grumlschema.structure.VertexClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, EdgeDirection.OUT);
		}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt add_incidence(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.EC, (de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass) vertex, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass> remove_incidence() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass>();
			de.uni_koblenz.jgralab.grumlschema.structure.EndsAt edge = (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.EndsAt next = (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, EdgeDirection.IN);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_incidence(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.EndsAt edge = (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, EdgeDirection.IN);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.EndsAt next = (de.uni_koblenz.jgralab.grumlschema.structure.EndsAt) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, EdgeDirection.IN);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass> get_incidence() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt, de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, EdgeDirection.IN);
		}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint add_constraint(de.uni_koblenz.jgralab.grumlschema.structure.Constraint vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.EC, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this, (de.uni_koblenz.jgralab.grumlschema.structure.Constraint) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Constraint> remove_constraint() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.Constraint> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.Constraint>();
			de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint edge = (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint next = (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.Constraint) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_constraint(de.uni_koblenz.jgralab.grumlschema.structure.Constraint vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint edge = (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint next = (de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Constraint> get_constraint() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint, de.uni_koblenz.jgralab.grumlschema.structure.Constraint>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, EdgeDirection.OUT);
		}
		@Override
		public de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute add_attribute(de.uni_koblenz.jgralab.grumlschema.structure.Attribute vertex) {
			return ((de.uni_koblenz.jgralab.grumlschema.SchemaGraph)getGraph()).createEdge(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.EC, (de.uni_koblenz.jgralab.grumlschema.structure.VertexClass) this, (de.uni_koblenz.jgralab.grumlschema.structure.Attribute) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Attribute> remove_attribute() {
			java.util.List<de.uni_koblenz.jgralab.grumlschema.structure.Attribute> adjacences = new java.util.ArrayList<de.uni_koblenz.jgralab.grumlschema.structure.Attribute>();
			de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute edge = (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute next = (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.jgralab.grumlschema.structure.Attribute) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_attribute(de.uni_koblenz.jgralab.grumlschema.structure.Attribute vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute edge = (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute) getFirstIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute next = (de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute) edge.getNextIncidence(de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Attribute> get_attribute() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute, de.uni_koblenz.jgralab.grumlschema.structure.Attribute>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt> getEndsAtIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt>(this, de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt> getEndsAtIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt>(this, de.uni_koblenz.jgralab.grumlschema.structure.EndsAt.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Annotates> getAnnotatesIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.Annotates>(this, de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Annotates> getAnnotatesIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.Annotates>(this, de.uni_koblenz.jgralab.grumlschema.structure.Annotates.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass> getSpecializesVertexClassIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass> getSpecializesVertexClassIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.SpecializesVertexClass.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass> getContainsGraphElementClassIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass> getContainsGraphElementClassIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass>(this, de.uni_koblenz.jgralab.grumlschema.structure.ContainsGraphElementClass.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint> getHasConstraintIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint> getHasConstraintIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint.class, direction);
	}

	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute> getHasAttributeIncidences() {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class);
	}
	
	@Override
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute> getHasAttributeIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute>(this, de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute.class, direction);
	}
}
