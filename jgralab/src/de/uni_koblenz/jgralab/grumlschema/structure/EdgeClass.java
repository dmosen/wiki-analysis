/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.grumlschema.structure;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface EdgeClass extends de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.grumlschema.GrumlSchema.instance().vc_structure_EdgeClass;

	/**
	 * @return the next de.uni_koblenz.jgralab.grumlschema.structure.AttributedElementClass vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.AttributedElementClass getNextAttributedElementClass();

	/**
	 * @return the next de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass getNextEdgeClass();

	/**
	 * @return the next de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.GraphElementClass getNextGraphElementClass();

	/**
	 * @return the next de.uni_koblenz.jgralab.grumlschema.structure.NamedElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.NamedElement getNextNamedElement();

	/**
	 * @return the first edge of class SpecializesEdgeClass at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass getFirstSpecializesEdgeClassIncidence();

	/**
	 * @return the first edge of class SpecializesEdgeClass at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass getFirstSpecializesEdgeClassIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ComesFrom at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom getFirstComesFromIncidence();

	/**
	 * @return the first edge of class ComesFrom at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom getFirstComesFromIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class GoesTo at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.GoesTo getFirstGoesToIncidence();

	/**
	 * @return the first edge of class GoesTo at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.GoesTo getFirstGoesToIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>superclass</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass add_superclass(de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass vertex);
		/**
		 * removes all superclass adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass> remove_superclass();
		/**
		 * removes the given vertex as <code>superclass</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_superclass(de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'superclass'
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass> get_superclass();
		/**
		 * adds the given vertex as <code>comment</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.Annotates</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.Annotates</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.Annotates add_comment(de.uni_koblenz.jgralab.grumlschema.structure.Comment vertex);
		/**
		 * removes all comment adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.Annotates</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Comment> remove_comment();
		/**
		 * removes the given vertex as <code>comment</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.Annotates</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_comment(de.uni_koblenz.jgralab.grumlschema.structure.Comment vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'comment'
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.Annotates</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Comment> get_comment();
		/**
		 * adds the given vertex as <code>to</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.GoesTo</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.GoesTo</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.GoesTo add_to(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex);
		/**
		 * removes all to adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.GoesTo</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass> remove_to();
		/**
		 * removes the given vertex as <code>to</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.GoesTo</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_to(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex);
		/**
		 * @return the vertex to this one with the rolename 'to' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.GoesTo</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass get_to();
		/**
		 * adds the given vertex as <code>subclass</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass add_subclass(de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass vertex);
		/**
		 * removes all subclass adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass> remove_subclass();
		/**
		 * removes the given vertex as <code>subclass</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_subclass(de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'subclass'
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.EdgeClass> get_subclass();
		/**
		 * adds the given vertex as <code>constraint</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint add_constraint(de.uni_koblenz.jgralab.grumlschema.structure.Constraint vertex);
		/**
		 * removes all constraint adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Constraint> remove_constraint();
		/**
		 * removes the given vertex as <code>constraint</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_constraint(de.uni_koblenz.jgralab.grumlschema.structure.Constraint vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'constraint'
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.HasConstraint</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Constraint> get_constraint();
		/**
		 * adds the given vertex as <code>from</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom add_from(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex);
		/**
		 * removes all from adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass> remove_from();
		/**
		 * removes the given vertex as <code>from</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_from(de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex);
		/**
		 * @return the vertex to this one with the rolename 'from' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass get_from();
		/**
		 * adds the given vertex as <code>attribute</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute add_attribute(de.uni_koblenz.jgralab.grumlschema.structure.Attribute vertex);
		/**
		 * removes all attribute adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.Attribute> remove_attribute();
		/**
		 * removes the given vertex as <code>attribute</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_attribute(de.uni_koblenz.jgralab.grumlschema.structure.Attribute vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'attribute'
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.HasAttribute</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.grumlschema.structure.Attribute> get_attribute();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SpecializesEdgeClass or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass> getSpecializesEdgeClassIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SpecializesEdgeClass.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.SpecializesEdgeClass> getSpecializesEdgeClassIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ComesFrom or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom> getComesFromIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ComesFrom.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom> getComesFromIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type GoesTo or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.GoesTo> getGoesToIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type GoesTo.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.GoesTo> getGoesToIncidences(EdgeDirection direction);
}
