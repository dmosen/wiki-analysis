/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.grumlschema.structure;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface IncidenceClass extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.grumlschema.GrumlSchema.instance().vc_structure_IncidenceClass;

	public de.uni_koblenz.jgralab.grumlschema.structure.AggregationKind get_aggregation();

	public void set_aggregation(de.uni_koblenz.jgralab.grumlschema.structure.AggregationKind _aggregation);

	public int get_max();

	public void set_max(int _max);

	public int get_min();

	public void set_min(int _min);

	public java.lang.String get_roleName();

	public void set_roleName(java.lang.String _roleName);

	/**
	 * @return the next de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.IncidenceClass getNextIncidenceClass();

	/**
	 * @return the first edge of class EndsAt at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt getFirstEndsAtIncidence();

	/**
	 * @return the first edge of class EndsAt at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt getFirstEndsAtIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Subsets at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.Subsets getFirstSubsetsIncidence();

	/**
	 * @return the first edge of class Subsets at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.Subsets getFirstSubsetsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ComesFrom at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom getFirstComesFromIncidence();

	/**
	 * @return the first edge of class ComesFrom at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom getFirstComesFromIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class Redefines at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.Redefines getFirstRedefinesIncidence();

	/**
	 * @return the first edge of class Redefines at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.Redefines getFirstRedefinesIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class GoesTo at this vertex
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.GoesTo getFirstGoesToIncidence();

	/**
	 * @return the first edge of class GoesTo at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.grumlschema.structure.GoesTo getFirstGoesToIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>targetclass</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.grumlschema.structure.EndsAt</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.grumlschema.structure.EndsAt</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.EndsAt add_targetclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex);
		/**
		 * removes all targetclass adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.grumlschema.structure.EndsAt</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.grumlschema.structure.VertexClass> remove_targetclass();
		/**
		 * removes the given vertex as <code>targetclass</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.grumlschema.structure.EndsAt</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_targetclass(de.uni_koblenz.jgralab.grumlschema.structure.VertexClass vertex);
		/**
		 * @return the vertex to this one with the rolename 'targetclass' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.grumlschema.structure.EndsAt</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.grumlschema.structure.VertexClass get_targetclass();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EndsAt or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt> getEndsAtIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EndsAt.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.EndsAt> getEndsAtIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Subsets or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Subsets> getSubsetsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Subsets.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Subsets> getSubsetsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ComesFrom or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom> getComesFromIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ComesFrom.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.ComesFrom> getComesFromIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Redefines or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Redefines> getRedefinesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type Redefines.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.Redefines> getRedefinesIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type GoesTo or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.GoesTo> getGoesToIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type GoesTo.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.grumlschema.structure.GoesTo> getGoesToIncidences(EdgeDirection direction);
}
