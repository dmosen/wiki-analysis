/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.EnumDomain;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.RecordDomain;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema Greql2Schema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class Greql2Schema extends SchemaImpl {
	public final GraphClass gc_Greql2;
	public final VertexClass vc_Greql2Vertex;
	public final VertexClass vc_Declaration;
	public final VertexClass vc_Quantifier;
	public final VertexClass vc_Greql2Expression;
	public final VertexClass vc_Definition;
	public final VertexClass vc_RecordElement;
	public final VertexClass vc_Expression;
	public final VertexClass vc_SimpleDeclaration;
	public final VertexClass vc_EdgeRestriction;
	public final VertexClass vc_Direction;
	public final VertexClass vc_SubgraphDefinition;
	public final VertexClass vc_SubgraphRestrictedExpression;
	public final VertexClass vc_PathExpression;
	public final VertexClass vc_ElementSetExpression;
	public final VertexClass vc_QuantifiedExpression;
	public final VertexClass vc_SubgraphExpression;
	public final VertexClass vc_Literal;
	public final VertexClass vc_Identifier;
	public final VertexClass vc_ConditionalExpression;
	public final VertexClass vc_Comprehension;
	public final VertexClass vc_ValueConstruction;
	public final VertexClass vc_PathDescription;
	public final VertexClass vc_FunctionApplication;
	public final VertexClass vc_DefinitionExpression;
	public final VertexClass vc_VertexTypeSubgraph;
	public final VertexClass vc_EdgeTypeSubgraph;
	public final VertexClass vc_ExpressionDefinedSubgraph;
	public final VertexClass vc_BackwardVertexSet;
	public final VertexClass vc_ForwardVertexSet;
	public final VertexClass vc_PathExistence;
	public final VertexClass vc_VertexSetExpression;
	public final VertexClass vc_EdgeSetExpression;
	public final VertexClass vc_LongLiteral;
	public final VertexClass vc_DoubleLiteral;
	public final VertexClass vc_StringLiteral;
	public final VertexClass vc_UndefinedLiteral;
	public final VertexClass vc_IntLiteral;
	public final VertexClass vc_BoolLiteral;
	public final VertexClass vc_RecordId;
	public final VertexClass vc_FunctionId;
	public final VertexClass vc_Variable;
	public final VertexClass vc_TypeOrRoleId;
	public final VertexClass vc_ComprehensionWithTableHeader;
	public final VertexClass vc_SetComprehension;
	public final VertexClass vc_MapComprehension;
	public final VertexClass vc_SetConstruction;
	public final VertexClass vc_RecordConstruction;
	public final VertexClass vc_MapConstruction;
	public final VertexClass vc_TupleConstruction;
	public final VertexClass vc_ListConstruction;
	public final VertexClass vc_TransposedPathDescription;
	public final VertexClass vc_SequentialPathDescription;
	public final VertexClass vc_ExponentiatedPathDescription;
	public final VertexClass vc_PrimaryPathDescription;
	public final VertexClass vc_IteratedPathDescription;
	public final VertexClass vc_OptionalPathDescription;
	public final VertexClass vc_AlternativePathDescription;
	public final VertexClass vc_IntermediateVertexPathDescription;
	public final VertexClass vc_WhereExpression;
	public final VertexClass vc_LetExpression;
	public final VertexClass vc_ThisLiteral;
	public final VertexClass vc_TypeId;
	public final VertexClass vc_RoleId;
	public final VertexClass vc_TableComprehension;
	public final VertexClass vc_ListComprehension;
	public final VertexClass vc_ListRangeConstruction;
	public final VertexClass vc_AggregationPathDescription;
	public final VertexClass vc_SimplePathDescription;
	public final VertexClass vc_EdgePathDescription;
	public final VertexClass vc_ThisEdge;
	public final VertexClass vc_ThisVertex;
	public final EdgeClass ec_Greql2Aggregation;
	public final EdgeClass ec_IsBooleanPredicateOfEdgeRestriction;
	public final EdgeClass ec_IsValueExprOfComprehension;
	public final EdgeClass ec_IsQuantifiedDeclOf;
	public final EdgeClass ec_IsTargetExprOf;
	public final EdgeClass ec_IsConstraintOf;
	public final EdgeClass ec_IsRowHeaderExprOf;
	public final EdgeClass ec_IsSubgraphDefiningExpression;
	public final EdgeClass ec_IsTypeExprOf;
	public final EdgeClass ec_IsExpressionOnSubgraph;
	public final EdgeClass ec_IsColumnHeaderExprOf;
	public final EdgeClass ec_IsPathOf;
	public final EdgeClass ec_IsFalseExprOf;
	public final EdgeClass ec_IsValueExprOfConstruction;
	public final EdgeClass ec_IsPartOf;
	public final EdgeClass ec_IsEdgeExprOf;
	public final EdgeClass ec_IsQueryExprOf;
	public final EdgeClass ec_IsDirectionOf;
	public final EdgeClass ec_IsRoleIdOf;
	public final EdgeClass ec_IsSubgraphDefinitionOf;
	public final EdgeClass ec_IsRecordExprOf;
	public final EdgeClass ec_IsSimpleDeclOf;
	public final EdgeClass ec_IsCompDeclOf;
	public final EdgeClass ec_IsTypeRestrOfExpression;
	public final EdgeClass ec_IsBoundVarOf;
	public final EdgeClass ec_IsVarOf;
	public final EdgeClass ec_IsIntermediateVertexOf;
	public final EdgeClass ec_IsDeclaredVarOf;
	public final EdgeClass ec_IsKeyExprOfComprehension;
	public final EdgeClass ec_IsStartRestrOf;
	public final EdgeClass ec_IsStartExprOf;
	public final EdgeClass ec_IsFunctionIdOf;
	public final EdgeClass ec_IsDefinitionOf;
	public final EdgeClass ec_IsIdOf;
	public final EdgeClass ec_IsTableHeaderOf;
	public final EdgeClass ec_IsKeyExprOfConstruction;
	public final EdgeClass ec_IsTypeRestrOfSubgraph;
	public final EdgeClass ec_IsBoundExprOf;
	public final EdgeClass ec_IsLastValueOf;
	public final EdgeClass ec_IsRecordIdOf;
	public final EdgeClass ec_IsEdgeRestrOf;
	public final EdgeClass ec_IsExponentOf;
	public final EdgeClass ec_IsGoalRestrOf;
	public final EdgeClass ec_IsExprOf;
	public final EdgeClass ec_IsFirstValueOf;
	public final EdgeClass ec_IsQuantifierOf;
	public final EdgeClass ec_IsRecordElementOf;
	public final EdgeClass ec_IsPathDescriptionOf;
	public final EdgeClass ec_IsCompResultDefOf;
	public final EdgeClass ec_IsTrueExprOf;
	public final EdgeClass ec_IsArgumentOf;
	public final EdgeClass ec_IsTypeIdOf;
	public final EdgeClass ec_IsConditionOf;
	public final EdgeClass ec_IsTypeExprOfDeclaration;
	public final EdgeClass ec_IsTypeExprOfFunction;
	public final EdgeClass ec_IsBoundExprOfQuantifier;
	public final EdgeClass ec_IsBoundExprOfDefinition;
	public final EdgeClass ec_IsTransposedPathOf;
	public final EdgeClass ec_IsOptionalPathOf;
	public final EdgeClass ec_IsIteratedPathOf;
	public final EdgeClass ec_IsAlternativePathOf;
	public final EdgeClass ec_IsSubPathOf;
	public final EdgeClass ec_IsSequenceElementOf;
	public final EdgeClass ec_IsExponentiatedPathOf;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<Greql2Schema> theInstance = new WeakReference<Greql2Schema>(null);
	
	/**
	 * @return the singleton instance of Greql2Schema
	 */
	public static Greql2Schema instance() {
		Greql2Schema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (Greql2Schema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new Greql2Schema();
			theInstance = new WeakReference<Greql2Schema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a Greql2Schema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private Greql2Schema() {
		super("Greql2Schema", "de.uni_koblenz.jgralab.greql2.schema");

		{
			EnumDomain dom = createEnumDomain("QuantificationType");
			dom.addConst("FORALL");
			dom.addConst("EXISTS");
			dom.addConst("EXISTSONE");
		}

		{
			EnumDomain dom = createEnumDomain("IterationType");
			dom.addConst("STAR");
			dom.addConst("PLUS");
		}

		{
			RecordDomain dom = createRecordDomain("SourcePosition");
			dom.addComponent("length", getDomain("Integer"));
			dom.addComponent("offset", getDomain("Integer"));
		}

		createSetDomain(getDomain("String"));

		createListDomain(getDomain("SourcePosition"));

		{
			GraphClass gc = gc_Greql2 = createGraphClass("Greql2");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_Greql2Vertex = gc.createVertexClass("Greql2Vertex");
				vc.setAbstract(true);
			}

			{
				VertexClass vc = vc_Declaration = gc.createVertexClass("Declaration");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_Quantifier = gc.createVertexClass("Quantifier");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
				vc.addAttribute(createAttribute("type", getDomain("QuantificationType"), getAttributedElementClass("Quantifier"), null));
			}

			{
				VertexClass vc = vc_Greql2Expression = gc.createVertexClass("Greql2Expression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
				vc.addAttribute(createAttribute("costModel", getDomain("String"), getAttributedElementClass("Greql2Expression"), null));
				vc.addAttribute(createAttribute("importedTypes", getDomain("Set<String>"), getAttributedElementClass("Greql2Expression"), null));
				vc.addAttribute(createAttribute("optimizer", getDomain("String"), getAttributedElementClass("Greql2Expression"), null));
				vc.addAttribute(createAttribute("queryText", getDomain("String"), getAttributedElementClass("Greql2Expression"), null));
			}

			{
				VertexClass vc = vc_Definition = gc.createVertexClass("Definition");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_RecordElement = gc.createVertexClass("RecordElement");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_Expression = gc.createVertexClass("Expression");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_SimpleDeclaration = gc.createVertexClass("SimpleDeclaration");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_EdgeRestriction = gc.createVertexClass("EdgeRestriction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_Direction = gc.createVertexClass("Direction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Greql2Vertex);
				vc.addAttribute(createAttribute("dirValue", getDomain("String"), getAttributedElementClass("Direction"), null));
			}

			{
				VertexClass vc = vc_SubgraphDefinition = gc.createVertexClass("SubgraphDefinition");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Greql2Vertex);
			}

			{
				VertexClass vc = vc_SubgraphRestrictedExpression = gc.createVertexClass("SubgraphRestrictedExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_PathExpression = gc.createVertexClass("PathExpression");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_ElementSetExpression = gc.createVertexClass("ElementSetExpression");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_QuantifiedExpression = gc.createVertexClass("QuantifiedExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_SubgraphExpression = gc.createVertexClass("SubgraphExpression");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_Literal = gc.createVertexClass("Literal");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_Identifier = gc.createVertexClass("Identifier");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("Identifier"), null));
			}

			{
				VertexClass vc = vc_ConditionalExpression = gc.createVertexClass("ConditionalExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_Comprehension = gc.createVertexClass("Comprehension");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_ValueConstruction = gc.createVertexClass("ValueConstruction");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_PathDescription = gc.createVertexClass("PathDescription");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_FunctionApplication = gc.createVertexClass("FunctionApplication");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_DefinitionExpression = gc.createVertexClass("DefinitionExpression");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Expression);
			}

			{
				VertexClass vc = vc_VertexTypeSubgraph = gc.createVertexClass("VertexTypeSubgraph");
				vc.setAbstract(false);
				vc.addSuperClass(vc_SubgraphDefinition);
			}

			{
				VertexClass vc = vc_EdgeTypeSubgraph = gc.createVertexClass("EdgeTypeSubgraph");
				vc.setAbstract(false);
				vc.addSuperClass(vc_SubgraphDefinition);
			}

			{
				VertexClass vc = vc_ExpressionDefinedSubgraph = gc.createVertexClass("ExpressionDefinedSubgraph");
				vc.setAbstract(false);
				vc.addSuperClass(vc_SubgraphDefinition);
			}

			{
				VertexClass vc = vc_BackwardVertexSet = gc.createVertexClass("BackwardVertexSet");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathExpression);
			}

			{
				VertexClass vc = vc_ForwardVertexSet = gc.createVertexClass("ForwardVertexSet");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathExpression);
			}

			{
				VertexClass vc = vc_PathExistence = gc.createVertexClass("PathExistence");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathExpression);
			}

			{
				VertexClass vc = vc_VertexSetExpression = gc.createVertexClass("VertexSetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ElementSetExpression);
			}

			{
				VertexClass vc = vc_EdgeSetExpression = gc.createVertexClass("EdgeSetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ElementSetExpression);
			}

			{
				VertexClass vc = vc_LongLiteral = gc.createVertexClass("LongLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
				vc.addAttribute(createAttribute("longValue", getDomain("Long"), getAttributedElementClass("LongLiteral"), null));
			}

			{
				VertexClass vc = vc_DoubleLiteral = gc.createVertexClass("DoubleLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
				vc.addAttribute(createAttribute("doubleValue", getDomain("Double"), getAttributedElementClass("DoubleLiteral"), null));
			}

			{
				VertexClass vc = vc_StringLiteral = gc.createVertexClass("StringLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
				vc.addAttribute(createAttribute("stringValue", getDomain("String"), getAttributedElementClass("StringLiteral"), null));
			}

			{
				VertexClass vc = vc_UndefinedLiteral = gc.createVertexClass("UndefinedLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
			}

			{
				VertexClass vc = vc_IntLiteral = gc.createVertexClass("IntLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
				vc.addAttribute(createAttribute("intValue", getDomain("Integer"), getAttributedElementClass("IntLiteral"), null));
			}

			{
				VertexClass vc = vc_BoolLiteral = gc.createVertexClass("BoolLiteral");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Literal);
				vc.addAttribute(createAttribute("boolValue", getDomain("Boolean"), getAttributedElementClass("BoolLiteral"), null));
			}

			{
				VertexClass vc = vc_RecordId = gc.createVertexClass("RecordId");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Identifier);
			}

			{
				VertexClass vc = vc_FunctionId = gc.createVertexClass("FunctionId");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Identifier);
			}

			{
				VertexClass vc = vc_Variable = gc.createVertexClass("Variable");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Identifier);
			}

			{
				VertexClass vc = vc_TypeOrRoleId = gc.createVertexClass("TypeOrRoleId");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Identifier);
			}

			{
				VertexClass vc = vc_ComprehensionWithTableHeader = gc.createVertexClass("ComprehensionWithTableHeader");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Comprehension);
			}

			{
				VertexClass vc = vc_SetComprehension = gc.createVertexClass("SetComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Comprehension);
			}

			{
				VertexClass vc = vc_MapComprehension = gc.createVertexClass("MapComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Comprehension);
			}

			{
				VertexClass vc = vc_SetConstruction = gc.createVertexClass("SetConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ValueConstruction);
			}

			{
				VertexClass vc = vc_RecordConstruction = gc.createVertexClass("RecordConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ValueConstruction);
			}

			{
				VertexClass vc = vc_MapConstruction = gc.createVertexClass("MapConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ValueConstruction);
			}

			{
				VertexClass vc = vc_TupleConstruction = gc.createVertexClass("TupleConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ValueConstruction);
			}

			{
				VertexClass vc = vc_ListConstruction = gc.createVertexClass("ListConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ValueConstruction);
			}

			{
				VertexClass vc = vc_TransposedPathDescription = gc.createVertexClass("TransposedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_SequentialPathDescription = gc.createVertexClass("SequentialPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_ExponentiatedPathDescription = gc.createVertexClass("ExponentiatedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_PrimaryPathDescription = gc.createVertexClass("PrimaryPathDescription");
				vc.setAbstract(true);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_IteratedPathDescription = gc.createVertexClass("IteratedPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
				vc.addAttribute(createAttribute("times", getDomain("IterationType"), getAttributedElementClass("IteratedPathDescription"), null));
			}

			{
				VertexClass vc = vc_OptionalPathDescription = gc.createVertexClass("OptionalPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_AlternativePathDescription = gc.createVertexClass("AlternativePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_IntermediateVertexPathDescription = gc.createVertexClass("IntermediateVertexPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PathDescription);
			}

			{
				VertexClass vc = vc_WhereExpression = gc.createVertexClass("WhereExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_DefinitionExpression);
			}

			{
				VertexClass vc = vc_LetExpression = gc.createVertexClass("LetExpression");
				vc.setAbstract(false);
				vc.addSuperClass(vc_DefinitionExpression);
			}

			{
				VertexClass vc = vc_ThisLiteral = gc.createVertexClass("ThisLiteral");
				vc.setAbstract(true);
				vc.addSuperClass(vc_Literal);
				vc.addSuperClass(vc_Variable);
			}

			{
				VertexClass vc = vc_TypeId = gc.createVertexClass("TypeId");
				vc.setAbstract(false);
				vc.addSuperClass(vc_TypeOrRoleId);
				vc.addAttribute(createAttribute("excluded", getDomain("Boolean"), getAttributedElementClass("TypeId"), null));
				vc.addAttribute(createAttribute("type", getDomain("Boolean"), getAttributedElementClass("TypeId"), null));
			}

			{
				VertexClass vc = vc_RoleId = gc.createVertexClass("RoleId");
				vc.setAbstract(false);
				vc.addSuperClass(vc_TypeOrRoleId);
			}

			{
				VertexClass vc = vc_TableComprehension = gc.createVertexClass("TableComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ComprehensionWithTableHeader);
			}

			{
				VertexClass vc = vc_ListComprehension = gc.createVertexClass("ListComprehension");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ComprehensionWithTableHeader);
			}

			{
				VertexClass vc = vc_ListRangeConstruction = gc.createVertexClass("ListRangeConstruction");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ListConstruction);
			}

			{
				VertexClass vc = vc_AggregationPathDescription = gc.createVertexClass("AggregationPathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PrimaryPathDescription);
				vc.addAttribute(createAttribute("outAggregation", getDomain("Boolean"), getAttributedElementClass("AggregationPathDescription"), null));
			}

			{
				VertexClass vc = vc_SimplePathDescription = gc.createVertexClass("SimplePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PrimaryPathDescription);
			}

			{
				VertexClass vc = vc_EdgePathDescription = gc.createVertexClass("EdgePathDescription");
				vc.setAbstract(false);
				vc.addSuperClass(vc_PrimaryPathDescription);
			}

			{
				VertexClass vc = vc_ThisEdge = gc.createVertexClass("ThisEdge");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ThisLiteral);
			}

			{
				VertexClass vc = vc_ThisVertex = gc.createVertexClass("ThisVertex");
				vc.setAbstract(false);
				vc.addSuperClass(vc_ThisLiteral);
			}

			{
				EdgeClass ec = ec_Greql2Aggregation = gc.createEdgeClass("Greql2Aggregation",
					vc_Greql2Vertex, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Vertex, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(true);
				ec.addAttribute(createAttribute("sourcePositions", getDomain("List<SourcePosition>"), getAttributedElementClass("Greql2Aggregation"), null));
			}

			{
				EdgeClass ec = ec_IsBooleanPredicateOfEdgeRestriction = gc.createEdgeClass("IsBooleanPredicateOfEdgeRestriction",
					vc_Expression, 0, 1, "booleanPredicate", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_EdgeRestriction, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsValueExprOfComprehension = gc.createEdgeClass("IsValueExprOfComprehension",
					vc_Expression, 1, 1, "valueExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_MapComprehension, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsQuantifiedDeclOf = gc.createEdgeClass("IsQuantifiedDeclOf",
					vc_Declaration, 1, 1, "quantifiedDecl", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_QuantifiedExpression, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTargetExprOf = gc.createEdgeClass("IsTargetExprOf",
					vc_Expression, 0, 1, "targetExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsConstraintOf = gc.createEdgeClass("IsConstraintOf",
					vc_Expression, 0, 2147483647, "constraint", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Declaration, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsRowHeaderExprOf = gc.createEdgeClass("IsRowHeaderExprOf",
					vc_Expression, 0, 2147483647, "rowHeaderExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_TableComprehension, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsSubgraphDefiningExpression = gc.createEdgeClass("IsSubgraphDefiningExpression",
					vc_Expression, 0, 1, "definingExpression", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ExpressionDefinedSubgraph, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTypeExprOf = gc.createEdgeClass("IsTypeExprOf",
					vc_Expression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Vertex, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(true);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsExpressionOnSubgraph = gc.createEdgeClass("IsExpressionOnSubgraph",
					vc_Expression, 0, 1, "restrictedExpression", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SubgraphRestrictedExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsColumnHeaderExprOf = gc.createEdgeClass("IsColumnHeaderExprOf",
					vc_Expression, 0, 2147483647, "columnHeader", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_TableComprehension, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsPathOf = gc.createEdgeClass("IsPathOf",
					vc_Expression, 1, 1, "path", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsFalseExprOf = gc.createEdgeClass("IsFalseExprOf",
					vc_Expression, 1, 1, "falseExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ConditionalExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsValueExprOfConstruction = gc.createEdgeClass("IsValueExprOfConstruction",
					vc_Expression, 0, 2147483647, "valueExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_MapConstruction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsPartOf = gc.createEdgeClass("IsPartOf",
					vc_Expression, 0, 2147483647, "part", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ValueConstruction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsEdgeExprOf = gc.createEdgeClass("IsEdgeExprOf",
					vc_Expression, 1, 1, "edgeExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_EdgePathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsQueryExprOf = gc.createEdgeClass("IsQueryExprOf",
					vc_Expression, 1, 1, "queryExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Expression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsDirectionOf = gc.createEdgeClass("IsDirectionOf",
					vc_Direction, 1, 1, "direction", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PrimaryPathDescription, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsRoleIdOf = gc.createEdgeClass("IsRoleIdOf",
					vc_RoleId, 0, 2147483647, "roleId", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_EdgeRestriction, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsSubgraphDefinitionOf = gc.createEdgeClass("IsSubgraphDefinitionOf",
					vc_SubgraphDefinition, 0, 1, "subgraphDefinition", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SubgraphRestrictedExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsRecordExprOf = gc.createEdgeClass("IsRecordExprOf",
					vc_Expression, 1, 1, "recordExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_RecordElement, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsSimpleDeclOf = gc.createEdgeClass("IsSimpleDeclOf",
					vc_SimpleDeclaration, 1, 2147483647, "simpleDecl", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Declaration, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsCompDeclOf = gc.createEdgeClass("IsCompDeclOf",
					vc_Declaration, 1, 1, "compDecl", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Comprehension, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTypeRestrOfExpression = gc.createEdgeClass("IsTypeRestrOfExpression",
					vc_TypeId, 0, 2147483647, "typeRestr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Expression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsBoundVarOf = gc.createEdgeClass("IsBoundVarOf",
					vc_Variable, 0, 2147483647, "boundVar", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Expression, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsVarOf = gc.createEdgeClass("IsVarOf",
					vc_Variable, 1, 1, "var", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Definition, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsIntermediateVertexOf = gc.createEdgeClass("IsIntermediateVertexOf",
					vc_Expression, 1, 1, "intermediateVertex", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_IntermediateVertexPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsDeclaredVarOf = gc.createEdgeClass("IsDeclaredVarOf",
					vc_Variable, 1, 2147483647, "declaredVar", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SimpleDeclaration, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsKeyExprOfComprehension = gc.createEdgeClass("IsKeyExprOfComprehension",
					vc_Expression, 1, 1, "keyExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_MapComprehension, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsStartRestrOf = gc.createEdgeClass("IsStartRestrOf",
					vc_Expression, 0, 1, "startRestr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsStartExprOf = gc.createEdgeClass("IsStartExprOf",
					vc_Expression, 0, 1, "startExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsFunctionIdOf = gc.createEdgeClass("IsFunctionIdOf",
					vc_FunctionId, 1, 1, "functionId", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_FunctionApplication, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsDefinitionOf = gc.createEdgeClass("IsDefinitionOf",
					vc_Definition, 1, 2147483647, "definition", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_DefinitionExpression, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsIdOf = gc.createEdgeClass("IsIdOf",
					vc_Identifier, 0, 1, "identifier", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Expression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTableHeaderOf = gc.createEdgeClass("IsTableHeaderOf",
					vc_Expression, 0, 2147483647, "tableHeader", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ComprehensionWithTableHeader, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsKeyExprOfConstruction = gc.createEdgeClass("IsKeyExprOfConstruction",
					vc_Expression, 0, 2147483647, "keyExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_MapConstruction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTypeRestrOfSubgraph = gc.createEdgeClass("IsTypeRestrOfSubgraph",
					vc_TypeId, 0, 2147483647, "typeRestr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SubgraphDefinition, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsBoundExprOf = gc.createEdgeClass("IsBoundExprOf",
					vc_Expression, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Greql2Vertex, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(true);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsLastValueOf = gc.createEdgeClass("IsLastValueOf",
					vc_Expression, 1, 1, "lastValue", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ListRangeConstruction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsRecordIdOf = gc.createEdgeClass("IsRecordIdOf",
					vc_RecordId, 1, 1, "recordId", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_RecordElement, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsEdgeRestrOf = gc.createEdgeClass("IsEdgeRestrOf",
					vc_EdgeRestriction, 0, 2147483647, "edgeRestr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PrimaryPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsExponentOf = gc.createEdgeClass("IsExponentOf",
					vc_IntLiteral, 1, 1, "exponent", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ExponentiatedPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsGoalRestrOf = gc.createEdgeClass("IsGoalRestrOf",
					vc_Expression, 0, 1, "goalRestr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsExprOf = gc.createEdgeClass("IsExprOf",
					vc_Expression, 1, 1, "expr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Definition, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsFirstValueOf = gc.createEdgeClass("IsFirstValueOf",
					vc_Expression, 1, 1, "firstValue", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ListRangeConstruction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsQuantifierOf = gc.createEdgeClass("IsQuantifierOf",
					vc_Quantifier, 1, 1, "quantifier", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_QuantifiedExpression, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsRecordElementOf = gc.createEdgeClass("IsRecordElementOf",
					vc_RecordElement, 1, 2147483647, "recordElement", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_RecordConstruction, 1, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsPathDescriptionOf = gc.createEdgeClass("IsPathDescriptionOf",
					vc_PathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_PathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(true);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsCompResultDefOf = gc.createEdgeClass("IsCompResultDefOf",
					vc_Expression, 0, 1, "compResultDef", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_Comprehension, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTrueExprOf = gc.createEdgeClass("IsTrueExprOf",
					vc_Expression, 1, 1, "trueExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ConditionalExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsArgumentOf = gc.createEdgeClass("IsArgumentOf",
					vc_Expression, 0, 2147483647, "argument", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_FunctionApplication, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTypeIdOf = gc.createEdgeClass("IsTypeIdOf",
					vc_TypeId, 0, 2147483647, "typeId", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_EdgeRestriction, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsConditionOf = gc.createEdgeClass("IsConditionOf",
					vc_Expression, 1, 1, "condition", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ConditionalExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_Greql2Aggregation);
			}

			{
				EdgeClass ec = ec_IsTypeExprOfDeclaration = gc.createEdgeClass("IsTypeExprOfDeclaration",
					vc_Expression, 0, 1, "typeExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SimpleDeclaration, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsTypeExprOf);
			}

			{
				EdgeClass ec = ec_IsTypeExprOfFunction = gc.createEdgeClass("IsTypeExprOfFunction",
					vc_Expression, 0, 1, "typeExpr", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_FunctionApplication, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsTypeExprOf);
			}

			{
				EdgeClass ec = ec_IsBoundExprOfQuantifier = gc.createEdgeClass("IsBoundExprOfQuantifier",
					vc_Expression, 1, 1, "boundExprOfQuantifier", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_QuantifiedExpression, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsBoundExprOf);
			}

			{
				EdgeClass ec = ec_IsBoundExprOfDefinition = gc.createEdgeClass("IsBoundExprOfDefinition",
					vc_Expression, 1, 1, "boundExprOfDefinition", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_DefinitionExpression, 0, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsBoundExprOf);
			}

			{
				EdgeClass ec = ec_IsTransposedPathOf = gc.createEdgeClass("IsTransposedPathOf",
					vc_PathDescription, 1, 1, "transposedPath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_TransposedPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsOptionalPathOf = gc.createEdgeClass("IsOptionalPathOf",
					vc_PathDescription, 1, 1, "optionalPath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_OptionalPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsIteratedPathOf = gc.createEdgeClass("IsIteratedPathOf",
					vc_PathDescription, 1, 1, "iteratedPath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_IteratedPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsAlternativePathOf = gc.createEdgeClass("IsAlternativePathOf",
					vc_PathDescription, 2, 2147483647, "alternatePath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_AlternativePathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsSubPathOf = gc.createEdgeClass("IsSubPathOf",
					vc_PathDescription, 2, 2, "subPath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_IntermediateVertexPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsSequenceElementOf = gc.createEdgeClass("IsSequenceElementOf",
					vc_PathDescription, 2, 2147483647, "sequenceElement", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_SequentialPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}

			{
				EdgeClass ec = ec_IsExponentiatedPathOf = gc.createEdgeClass("IsExponentiatedPathOf",
					vc_PathDescription, 1, 1, "exponentiatedPath", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED,
					vc_ExponentiatedPathDescription, 0, 2147483647, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addSuperClass(ec_IsPathDescriptionOf);
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralab.greql2.schema.impl.std.Greql2FactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new Greql2 graph.
	*/
	public Greql2 createGreql2(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createGreql2(implType, null, 100, 100);
	}

	/**
	 * Creates a new Greql2 graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public Greql2 createGreql2(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_Greql2, id, vMax, eMax);
	}

	/**
	 * Creates a new Greql2 graph.
	*/
	public Greql2 createGreql2(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_Greql2, null, 100, 100);
	}

	/**
	 * Creates a new Greql2 graph.
	*/
	public Greql2 createGreql2(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_Greql2, id, vMax, eMax);
	}

	/**
	 * Creates a new Greql2 graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public Greql2 createGreql2(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createGreql2(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new Greql2 graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public Greql2 createGreql2(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public Greql2 loadGreql2(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadGreql2(filename, factory, null);
	}

	public Greql2 loadGreql2(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadGreql2(filename, factory, pf);
	}

	public Greql2 loadGreql2(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadGreql2(filename, factory, null);
	}

	
	public Greql2 loadGreql2(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadGreql2(filename, factory, pf);
	}

	public Greql2 loadGreql2(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public Greql2 loadGreql2(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
