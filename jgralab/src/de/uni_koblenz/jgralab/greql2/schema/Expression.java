/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Expression extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_Expression;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsKeyExprOfComprehension at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension getFirstIsKeyExprOfComprehensionIncidence();

	/**
	 * @return the first edge of class IsKeyExprOfComprehension at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension getFirstIsKeyExprOfComprehensionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBooleanPredicateOfEdgeRestriction at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction getFirstIsBooleanPredicateOfEdgeRestrictionIncidence();

	/**
	 * @return the first edge of class IsBooleanPredicateOfEdgeRestriction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction getFirstIsBooleanPredicateOfEdgeRestrictionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPathOf getFirstIsPathOfIncidence();

	/**
	 * @return the first edge of class IsPathOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPathOf getFirstIsPathOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPartOf getFirstIsPartOfIncidence();

	/**
	 * @return the first edge of class IsPartOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPartOf getFirstIsPartOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfIncidence();

	/**
	 * @return the first edge of class IsColumnHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf getFirstIsColumnHeaderExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationIncidence();

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf getFirstIsLastValueOfIncidence();

	/**
	 * @return the first edge of class IsLastValueOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf getFirstIsLastValueOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf getFirstIsStartExprOfIncidence();

	/**
	 * @return the first edge of class IsStartExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf getFirstIsStartExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf getFirstIsQueryExprOfIncidence();

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf getFirstIsQueryExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsValueExprOfConstruction at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction getFirstIsValueExprOfConstructionIncidence();

	/**
	 * @return the first edge of class IsValueExprOfConstruction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction getFirstIsValueExprOfConstructionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf getFirstIsBoundExprOfIncidence();

	/**
	 * @return the first edge of class IsBoundExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf getFirstIsBoundExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf getFirstIsFirstValueOfIncidence();

	/**
	 * @return the first edge of class IsFirstValueOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf getFirstIsFirstValueOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeRestrOfExpression at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression getFirstIsTypeRestrOfExpressionIncidence();

	/**
	 * @return the first edge of class IsTypeRestrOfExpression at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression getFirstIsTypeRestrOfExpressionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf getFirstIsConstraintOfIncidence();

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf getFirstIsConstraintOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf getFirstIsRowHeaderExprOfIncidence();

	/**
	 * @return the first edge of class IsRowHeaderExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf getFirstIsRowHeaderExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf getFirstIsFalseExprOfIncidence();

	/**
	 * @return the first edge of class IsFalseExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf getFirstIsFalseExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionIncidence();

	/**
	 * @return the first edge of class IsBoundExprOfDefinition at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition getFirstIsBoundExprOfDefinitionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf getFirstIsStartRestrOfIncidence();

	/**
	 * @return the first edge of class IsStartRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf getFirstIsStartRestrOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf getFirstIsTrueExprOfIncidence();

	/**
	 * @return the first edge of class IsTrueExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf getFirstIsTrueExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf getFirstIsTargetExprOfIncidence();

	/**
	 * @return the first edge of class IsTargetExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf getFirstIsTargetExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf getFirstIsTypeExprOfIncidence();

	/**
	 * @return the first edge of class IsTypeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf getFirstIsTypeExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsExpressionOnSubgraph at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph getFirstIsExpressionOnSubgraphIncidence();

	/**
	 * @return the first edge of class IsExpressionOnSubgraph at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph getFirstIsExpressionOnSubgraphIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf getFirstIsEdgeExprOfIncidence();

	/**
	 * @return the first edge of class IsEdgeExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf getFirstIsEdgeExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSubgraphDefiningExpression at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression getFirstIsSubgraphDefiningExpressionIncidence();

	/**
	 * @return the first edge of class IsSubgraphDefiningExpression at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression getFirstIsSubgraphDefiningExpressionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsValueExprOfComprehension at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension getFirstIsValueExprOfComprehensionIncidence();

	/**
	 * @return the first edge of class IsValueExprOfComprehension at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension getFirstIsValueExprOfComprehensionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf getFirstIsIntermediateVertexOfIncidence();

	/**
	 * @return the first edge of class IsIntermediateVertexOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf getFirstIsIntermediateVertexOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf getFirstIsArgumentOfIncidence();

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf getFirstIsArgumentOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConditionOf getFirstIsConditionOfIncidence();

	/**
	 * @return the first edge of class IsConditionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConditionOf getFirstIsConditionOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf getFirstIsTableHeaderOfIncidence();

	/**
	 * @return the first edge of class IsTableHeaderOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf getFirstIsTableHeaderOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf getFirstIsGoalRestrOfIncidence();

	/**
	 * @return the first edge of class IsGoalRestrOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf getFirstIsGoalRestrOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction getFirstIsTypeExprOfFunctionIncidence();

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction getFirstIsTypeExprOfFunctionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsKeyExprOfConstruction at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction getFirstIsKeyExprOfConstructionIncidence();

	/**
	 * @return the first edge of class IsKeyExprOfConstruction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction getFirstIsKeyExprOfConstructionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf getFirstIsCompResultDefOfIncidence();

	/**
	 * @return the first edge of class IsCompResultDefOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf getFirstIsCompResultDefOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExprOf getFirstIsExprOfIncidence();

	/**
	 * @return the first edge of class IsExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExprOf getFirstIsExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierIncidence();

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf getFirstIsRecordExprOfIncidence();

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf getFirstIsRecordExprOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>typeRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression add_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * removes all typeRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> remove_typeRestr();
		/**
		 * removes the given vertex as <code>typeRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'typeRestr'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> get_typeRestr();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsKeyExprOfComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension> getIsKeyExprOfComprehensionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsKeyExprOfComprehension.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension> getIsKeyExprOfComprehensionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBooleanPredicateOfEdgeRestriction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction> getIsBooleanPredicateOfEdgeRestrictionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBooleanPredicateOfEdgeRestriction.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction> getIsBooleanPredicateOfEdgeRestrictionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPathOf> getIsPathOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsPathOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPathOf> getIsPathOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsPartOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPartOf> getIsPartOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsPartOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPartOf> getIsPartOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf> getIsColumnHeaderExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsColumnHeaderExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf> getIsColumnHeaderExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsLastValueOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf> getIsLastValueOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsLastValueOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf> getIsLastValueOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsStartExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf> getIsStartExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsStartExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf> getIsStartExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQueryExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf> getIsQueryExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQueryExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf> getIsQueryExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsValueExprOfConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction> getIsValueExprOfConstructionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsValueExprOfConstruction.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction> getIsValueExprOfConstructionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf> getIsBoundExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf> getIsBoundExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFirstValueOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf> getIsFirstValueOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFirstValueOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf> getIsFirstValueOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeRestrOfExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression> getIsTypeRestrOfExpressionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeRestrOfExpression.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression> getIsTypeRestrOfExpressionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConstraintOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf> getIsConstraintOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConstraintOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf> getIsConstraintOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf> getIsRowHeaderExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRowHeaderExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf> getIsRowHeaderExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFalseExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf> getIsFalseExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFalseExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf> getIsFalseExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition> getIsBoundExprOfDefinitionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfDefinition.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition> getIsBoundExprOfDefinitionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsStartRestrOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf> getIsStartRestrOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsStartRestrOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf> getIsStartRestrOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTrueExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf> getIsTrueExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTrueExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf> getIsTrueExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTargetExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf> getIsTargetExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTargetExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf> getIsTargetExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf> getIsTypeExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf> getIsTypeExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsExpressionOnSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph> getIsExpressionOnSubgraphIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsExpressionOnSubgraph.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph> getIsExpressionOnSubgraphIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsEdgeExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf> getIsEdgeExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsEdgeExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf> getIsEdgeExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSubgraphDefiningExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression> getIsSubgraphDefiningExpressionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSubgraphDefiningExpression.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression> getIsSubgraphDefiningExpressionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsValueExprOfComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension> getIsValueExprOfComprehensionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsValueExprOfComprehension.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension> getIsValueExprOfComprehensionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf> getIsIntermediateVertexOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsIntermediateVertexOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf> getIsIntermediateVertexOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsArgumentOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf> getIsArgumentOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsArgumentOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf> getIsArgumentOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConditionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConditionOf> getIsConditionOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConditionOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConditionOf> getIsConditionOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTableHeaderOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf> getIsTableHeaderOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTableHeaderOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf> getIsTableHeaderOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsGoalRestrOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf> getIsGoalRestrOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsGoalRestrOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf> getIsGoalRestrOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction> getIsTypeExprOfFunctionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction> getIsTypeExprOfFunctionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsKeyExprOfConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction> getIsKeyExprOfConstructionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsKeyExprOfConstruction.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction> getIsKeyExprOfConstructionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsCompResultDefOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf> getIsCompResultDefOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsCompResultDefOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf> getIsCompResultDefOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExprOf> getIsExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExprOf> getIsExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf> getIsRecordExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf> getIsRecordExprOfIncidences(EdgeDirection direction);
}
