/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface FunctionApplication extends de.uni_koblenz.jgralab.greql2.schema.Expression {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_FunctionApplication;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.FunctionApplication vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.FunctionApplication getNextFunctionApplication();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction getFirstIsTypeExprOfFunctionIncidence();

	/**
	 * @return the first edge of class IsTypeExprOfFunction at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction getFirstIsTypeExprOfFunctionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsFunctionIdOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf getFirstIsFunctionIdOfIncidence();

	/**
	 * @return the first edge of class IsFunctionIdOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf getFirstIsFunctionIdOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf getFirstIsArgumentOfIncidence();

	/**
	 * @return the first edge of class IsArgumentOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf getFirstIsArgumentOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>typeRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression add_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * removes all typeRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> remove_typeRestr();
		/**
		 * removes the given vertex as <code>typeRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'typeRestr'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> get_typeRestr();
		/**
		 * adds the given vertex as <code>typeExpr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction add_typeExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all typeExpr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_typeExpr();
		/**
		 * removes the given vertex as <code>typeExpr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'typeExpr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_typeExpr();
		/**
		 * adds the given vertex as <code>argument</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf add_argument(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all argument adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_argument();
		/**
		 * removes the given vertex as <code>argument</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_argument(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'argument'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> get_argument();
		/**
		 * adds the given vertex as <code>functionId</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf add_functionId(de.uni_koblenz.jgralab.greql2.schema.FunctionId vertex);
		/**
		 * removes all functionId adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.FunctionId> remove_functionId();
		/**
		 * removes the given vertex as <code>functionId</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_functionId(de.uni_koblenz.jgralab.greql2.schema.FunctionId vertex);
		/**
		 * @return the vertex to this one with the rolename 'functionId' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.FunctionId get_functionId();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction> getIsTypeExprOfFunctionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfFunction.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction> getIsTypeExprOfFunctionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFunctionIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf> getIsFunctionIdOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsFunctionIdOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf> getIsFunctionIdOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsArgumentOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf> getIsArgumentOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsArgumentOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf> getIsArgumentOfIncidences(EdgeDirection direction);
}
