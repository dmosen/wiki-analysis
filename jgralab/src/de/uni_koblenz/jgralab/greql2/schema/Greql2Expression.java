/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Greql2Expression extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_Greql2Expression;

	public java.lang.String get_costModel();

	public void set_costModel(java.lang.String _costModel);

	public org.pcollections.PSet<java.lang.String> get_importedTypes();

	public void set_importedTypes(org.pcollections.PSet<java.lang.String> _importedTypes);

	public java.lang.String get_optimizer();

	public void set_optimizer(java.lang.String _optimizer);

	public java.lang.String get_queryText();

	public void set_queryText(java.lang.String _queryText);

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Expression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Expression getNextGreql2Expression();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIdOf getFirstIsIdOfIncidence();

	/**
	 * @return the first edge of class IsIdOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIdOf getFirstIsIdOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf getFirstIsQueryExprOfIncidence();

	/**
	 * @return the first edge of class IsQueryExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf getFirstIsQueryExprOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf getFirstIsBoundVarOfIncidence();

	/**
	 * @return the first edge of class IsBoundVarOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf getFirstIsBoundVarOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>boundVar</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf add_boundVar(de.uni_koblenz.jgralab.greql2.schema.Variable vertex);
		/**
		 * removes all boundVar adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Variable> remove_boundVar();
		/**
		 * removes the given vertex as <code>boundVar</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_boundVar(de.uni_koblenz.jgralab.greql2.schema.Variable vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'boundVar'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.Variable> get_boundVar();
		/**
		 * adds the given vertex as <code>queryExpr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf add_queryExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all queryExpr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_queryExpr();
		/**
		 * removes the given vertex as <code>queryExpr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_queryExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'queryExpr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_queryExpr();
		/**
		 * adds the given vertex as <code>identifier</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsIdOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsIdOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsIdOf add_identifier(de.uni_koblenz.jgralab.greql2.schema.Identifier vertex);
		/**
		 * removes all identifier adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsIdOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Identifier> remove_identifier();
		/**
		 * removes the given vertex as <code>identifier</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsIdOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_identifier(de.uni_koblenz.jgralab.greql2.schema.Identifier vertex);
		/**
		 * @return the vertex to this one with the rolename 'identifier' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsIdOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Identifier get_identifier();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIdOf> getIsIdOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsIdOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIdOf> getIsIdOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQueryExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf> getIsQueryExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQueryExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf> getIsQueryExprOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundVarOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf> getIsBoundVarOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundVarOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf> getIsBoundVarOfIncidences(EdgeDirection direction);
}
