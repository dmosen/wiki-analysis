/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface QuantifiedExpression extends de.uni_koblenz.jgralab.greql2.schema.Expression {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_QuantifiedExpression;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression getNextQuantifiedExpression();

	/**
	 * @return the first edge of class IsQuantifierOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf getFirstIsQuantifierOfIncidence();

	/**
	 * @return the first edge of class IsQuantifierOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf getFirstIsQuantifierOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfIncidence();

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierIncidence();

	/**
	 * @return the first edge of class IsBoundExprOfQuantifier at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifierIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>typeRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression add_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * removes all typeRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> remove_typeRestr();
		/**
		 * removes the given vertex as <code>typeRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'typeRestr'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> get_typeRestr();
		/**
		 * adds the given vertex as <code>boundExprOfQuantifier</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier add_boundExprOfQuantifier(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all boundExprOfQuantifier adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_boundExprOfQuantifier();
		/**
		 * removes the given vertex as <code>boundExprOfQuantifier</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_boundExprOfQuantifier(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'boundExprOfQuantifier' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_boundExprOfQuantifier();
		/**
		 * adds the given vertex as <code>quantifiedDecl</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf add_quantifiedDecl(de.uni_koblenz.jgralab.greql2.schema.Declaration vertex);
		/**
		 * removes all quantifiedDecl adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Declaration> remove_quantifiedDecl();
		/**
		 * removes the given vertex as <code>quantifiedDecl</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_quantifiedDecl(de.uni_koblenz.jgralab.greql2.schema.Declaration vertex);
		/**
		 * @return the vertex to this one with the rolename 'quantifiedDecl' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Declaration get_quantifiedDecl();
		/**
		 * adds the given vertex as <code>quantifier</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf add_quantifier(de.uni_koblenz.jgralab.greql2.schema.Quantifier vertex);
		/**
		 * removes all quantifier adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Quantifier> remove_quantifier();
		/**
		 * removes the given vertex as <code>quantifier</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_quantifier(de.uni_koblenz.jgralab.greql2.schema.Quantifier vertex);
		/**
		 * @return the vertex to this one with the rolename 'quantifier' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Quantifier get_quantifier();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifierOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf> getIsQuantifierOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifierOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf> getIsQuantifierOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf> getIsQuantifiedDeclOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf> getIsQuantifiedDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsBoundExprOfQuantifier.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierIncidences(EdgeDirection direction);
}
