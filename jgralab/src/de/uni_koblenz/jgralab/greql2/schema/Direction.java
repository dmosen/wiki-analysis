/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Direction extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_Direction;

	public java.lang.String get_dirValue();

	public void set_dirValue(java.lang.String _dirValue);

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Direction vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Direction getNextDirection();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf getFirstIsDirectionOfIncidence();

	/**
	 * @return the first edge of class IsDirectionOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf getFirstIsDirectionOfIncidence(EdgeDirection orientation);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsDirectionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf> getIsDirectionOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsDirectionOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf> getIsDirectionOfIncidences(EdgeDirection direction);
}
