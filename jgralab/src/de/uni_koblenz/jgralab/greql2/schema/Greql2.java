/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

public interface Greql2 extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().gc_Greql2;

	// ------------------------ Code for AggregationPathDescription ------------------------

	/**
	 * @return the first AggregationPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.AggregationPathDescription getFirstAggregationPathDescription();

	/**
	 * Creates a new AggregationPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.AggregationPathDescription createAggregationPathDescription();

	// ------------------------ Code for AlternativePathDescription ------------------------

	/**
	 * @return the first AlternativePathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription getFirstAlternativePathDescription();

	/**
	 * Creates a new AlternativePathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription createAlternativePathDescription();

	// ------------------------ Code for BackwardVertexSet ------------------------

	/**
	 * @return the first BackwardVertexSet vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.BackwardVertexSet getFirstBackwardVertexSet();

	/**
	 * Creates a new BackwardVertexSet vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.BackwardVertexSet createBackwardVertexSet();

	// ------------------------ Code for BoolLiteral ------------------------

	/**
	 * @return the first BoolLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.BoolLiteral getFirstBoolLiteral();

	/**
	 * Creates a new BoolLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.BoolLiteral createBoolLiteral();

	// ------------------------ Code for Comprehension ------------------------

	/**
	 * @return the first Comprehension vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Comprehension getFirstComprehension();

	// ------------------------ Code for ComprehensionWithTableHeader ------------------------

	/**
	 * @return the first ComprehensionWithTableHeader vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ComprehensionWithTableHeader getFirstComprehensionWithTableHeader();

	// ------------------------ Code for ConditionalExpression ------------------------

	/**
	 * @return the first ConditionalExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression getFirstConditionalExpression();

	/**
	 * Creates a new ConditionalExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression createConditionalExpression();

	// ------------------------ Code for Declaration ------------------------

	/**
	 * @return the first Declaration vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Declaration getFirstDeclaration();

	/**
	 * Creates a new Declaration vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Declaration createDeclaration();

	// ------------------------ Code for Definition ------------------------

	/**
	 * @return the first Definition vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Definition getFirstDefinition();

	/**
	 * Creates a new Definition vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Definition createDefinition();

	// ------------------------ Code for DefinitionExpression ------------------------

	/**
	 * @return the first DefinitionExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression getFirstDefinitionExpression();

	// ------------------------ Code for Direction ------------------------

	/**
	 * @return the first Direction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Direction getFirstDirection();

	/**
	 * Creates a new Direction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Direction createDirection();

	// ------------------------ Code for DoubleLiteral ------------------------

	/**
	 * @return the first DoubleLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.DoubleLiteral getFirstDoubleLiteral();

	/**
	 * Creates a new DoubleLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.DoubleLiteral createDoubleLiteral();

	// ------------------------ Code for EdgePathDescription ------------------------

	/**
	 * @return the first EdgePathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription getFirstEdgePathDescription();

	/**
	 * Creates a new EdgePathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription createEdgePathDescription();

	// ------------------------ Code for EdgeRestriction ------------------------

	/**
	 * @return the first EdgeRestriction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction getFirstEdgeRestriction();

	/**
	 * Creates a new EdgeRestriction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction createEdgeRestriction();

	// ------------------------ Code for EdgeSetExpression ------------------------

	/**
	 * @return the first EdgeSetExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.EdgeSetExpression getFirstEdgeSetExpression();

	/**
	 * Creates a new EdgeSetExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.EdgeSetExpression createEdgeSetExpression();

	// ------------------------ Code for EdgeTypeSubgraph ------------------------

	/**
	 * @return the first EdgeTypeSubgraph vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.EdgeTypeSubgraph getFirstEdgeTypeSubgraph();

	/**
	 * Creates a new EdgeTypeSubgraph vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.EdgeTypeSubgraph createEdgeTypeSubgraph();

	// ------------------------ Code for ElementSetExpression ------------------------

	/**
	 * @return the first ElementSetExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ElementSetExpression getFirstElementSetExpression();

	// ------------------------ Code for ExponentiatedPathDescription ------------------------

	/**
	 * @return the first ExponentiatedPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription getFirstExponentiatedPathDescription();

	/**
	 * Creates a new ExponentiatedPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription createExponentiatedPathDescription();

	// ------------------------ Code for Expression ------------------------

	/**
	 * @return the first Expression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Expression getFirstExpression();

	// ------------------------ Code for ExpressionDefinedSubgraph ------------------------

	/**
	 * @return the first ExpressionDefinedSubgraph vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ExpressionDefinedSubgraph getFirstExpressionDefinedSubgraph();

	/**
	 * Creates a new ExpressionDefinedSubgraph vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ExpressionDefinedSubgraph createExpressionDefinedSubgraph();

	// ------------------------ Code for ForwardVertexSet ------------------------

	/**
	 * @return the first ForwardVertexSet vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ForwardVertexSet getFirstForwardVertexSet();

	/**
	 * Creates a new ForwardVertexSet vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ForwardVertexSet createForwardVertexSet();

	// ------------------------ Code for FunctionApplication ------------------------

	/**
	 * @return the first FunctionApplication vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.FunctionApplication getFirstFunctionApplication();

	/**
	 * Creates a new FunctionApplication vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.FunctionApplication createFunctionApplication();

	// ------------------------ Code for FunctionId ------------------------

	/**
	 * @return the first FunctionId vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.FunctionId getFirstFunctionId();

	/**
	 * Creates a new FunctionId vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.FunctionId createFunctionId();

	// ------------------------ Code for Greql2Aggregation ------------------------

	/**
	 * @return the first Greql2Aggregation edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation getFirstGreql2Aggregation();

	// ------------------------ Code for Greql2Expression ------------------------

	/**
	 * @return the first Greql2Expression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Expression getFirstGreql2Expression();

	/**
	 * Creates a new Greql2Expression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Expression createGreql2Expression();

	// ------------------------ Code for Greql2Vertex ------------------------

	/**
	 * @return the first Greql2Vertex vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getFirstGreql2Vertex();

	// ------------------------ Code for Identifier ------------------------

	/**
	 * @return the first Identifier vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Identifier getFirstIdentifier();

	/**
	 * Creates a new Identifier vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Identifier createIdentifier();

	// ------------------------ Code for IntLiteral ------------------------

	/**
	 * @return the first IntLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IntLiteral getFirstIntLiteral();

	/**
	 * Creates a new IntLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IntLiteral createIntLiteral();

	// ------------------------ Code for IntermediateVertexPathDescription ------------------------

	/**
	 * @return the first IntermediateVertexPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription getFirstIntermediateVertexPathDescription();

	/**
	 * Creates a new IntermediateVertexPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription createIntermediateVertexPathDescription();

	// ------------------------ Code for IsAlternativePathOf ------------------------

	/**
	 * @return the first IsAlternativePathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsAlternativePathOf getFirstIsAlternativePathOf();

	/**
	 * Creates a new IsAlternativePathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsAlternativePathOf createIsAlternativePathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription omega);

	// ------------------------ Code for IsArgumentOf ------------------------

	/**
	 * @return the first IsArgumentOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf getFirstIsArgumentOf();

	/**
	 * Creates a new IsArgumentOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf createIsArgumentOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.FunctionApplication omega);

	// ------------------------ Code for IsBooleanPredicateOfEdgeRestriction ------------------------

	/**
	 * @return the first IsBooleanPredicateOfEdgeRestriction edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction getFirstIsBooleanPredicateOfEdgeRestriction();

	/**
	 * Creates a new IsBooleanPredicateOfEdgeRestriction edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction createIsBooleanPredicateOfEdgeRestriction(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction omega);

	// ------------------------ Code for IsBoundExprOf ------------------------

	/**
	 * @return the first IsBoundExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf getFirstIsBoundExprOf();

	// ------------------------ Code for IsBoundExprOfDefinition ------------------------

	/**
	 * @return the first IsBoundExprOfDefinition edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition getFirstIsBoundExprOfDefinition();

	/**
	 * Creates a new IsBoundExprOfDefinition edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition createIsBoundExprOfDefinition(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression omega);

	// ------------------------ Code for IsBoundExprOfQuantifier ------------------------

	/**
	 * @return the first IsBoundExprOfQuantifier edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier getFirstIsBoundExprOfQuantifier();

	/**
	 * Creates a new IsBoundExprOfQuantifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier createIsBoundExprOfQuantifier(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression omega);

	// ------------------------ Code for IsBoundVarOf ------------------------

	/**
	 * @return the first IsBoundVarOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf getFirstIsBoundVarOf();

	/**
	 * Creates a new IsBoundVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf createIsBoundVarOf(de.uni_koblenz.jgralab.greql2.schema.Variable alpha, de.uni_koblenz.jgralab.greql2.schema.Greql2Expression omega);

	// ------------------------ Code for IsColumnHeaderExprOf ------------------------

	/**
	 * @return the first IsColumnHeaderExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf getFirstIsColumnHeaderExprOf();

	/**
	 * Creates a new IsColumnHeaderExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf createIsColumnHeaderExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.TableComprehension omega);

	// ------------------------ Code for IsCompDeclOf ------------------------

	/**
	 * @return the first IsCompDeclOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf getFirstIsCompDeclOf();

	/**
	 * Creates a new IsCompDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf createIsCompDeclOf(de.uni_koblenz.jgralab.greql2.schema.Declaration alpha, de.uni_koblenz.jgralab.greql2.schema.Comprehension omega);

	// ------------------------ Code for IsCompResultDefOf ------------------------

	/**
	 * @return the first IsCompResultDefOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf getFirstIsCompResultDefOf();

	/**
	 * Creates a new IsCompResultDefOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf createIsCompResultDefOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.Comprehension omega);

	// ------------------------ Code for IsConditionOf ------------------------

	/**
	 * @return the first IsConditionOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConditionOf getFirstIsConditionOf();

	/**
	 * Creates a new IsConditionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsConditionOf createIsConditionOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression omega);

	// ------------------------ Code for IsConstraintOf ------------------------

	/**
	 * @return the first IsConstraintOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf getFirstIsConstraintOf();

	/**
	 * Creates a new IsConstraintOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf createIsConstraintOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.Declaration omega);

	// ------------------------ Code for IsDeclaredVarOf ------------------------

	/**
	 * @return the first IsDeclaredVarOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf getFirstIsDeclaredVarOf();

	/**
	 * Creates a new IsDeclaredVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf createIsDeclaredVarOf(de.uni_koblenz.jgralab.greql2.schema.Variable alpha, de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration omega);

	// ------------------------ Code for IsDefinitionOf ------------------------

	/**
	 * @return the first IsDefinitionOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDefinitionOf getFirstIsDefinitionOf();

	/**
	 * Creates a new IsDefinitionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsDefinitionOf createIsDefinitionOf(de.uni_koblenz.jgralab.greql2.schema.Definition alpha, de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression omega);

	// ------------------------ Code for IsDirectionOf ------------------------

	/**
	 * @return the first IsDirectionOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf getFirstIsDirectionOf();

	/**
	 * Creates a new IsDirectionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf createIsDirectionOf(de.uni_koblenz.jgralab.greql2.schema.Direction alpha, de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription omega);

	// ------------------------ Code for IsEdgeExprOf ------------------------

	/**
	 * @return the first IsEdgeExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf getFirstIsEdgeExprOf();

	/**
	 * Creates a new IsEdgeExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf createIsEdgeExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription omega);

	// ------------------------ Code for IsEdgeRestrOf ------------------------

	/**
	 * @return the first IsEdgeRestrOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf getFirstIsEdgeRestrOf();

	/**
	 * Creates a new IsEdgeRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf createIsEdgeRestrOf(de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction alpha, de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription omega);

	// ------------------------ Code for IsExponentOf ------------------------

	/**
	 * @return the first IsExponentOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExponentOf getFirstIsExponentOf();

	/**
	 * Creates a new IsExponentOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsExponentOf createIsExponentOf(de.uni_koblenz.jgralab.greql2.schema.IntLiteral alpha, de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription omega);

	// ------------------------ Code for IsExponentiatedPathOf ------------------------

	/**
	 * @return the first IsExponentiatedPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExponentiatedPathOf getFirstIsExponentiatedPathOf();

	/**
	 * Creates a new IsExponentiatedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsExponentiatedPathOf createIsExponentiatedPathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription omega);

	// ------------------------ Code for IsExprOf ------------------------

	/**
	 * @return the first IsExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExprOf getFirstIsExprOf();

	/**
	 * Creates a new IsExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsExprOf createIsExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.Definition omega);

	// ------------------------ Code for IsExpressionOnSubgraph ------------------------

	/**
	 * @return the first IsExpressionOnSubgraph edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph getFirstIsExpressionOnSubgraph();

	/**
	 * Creates a new IsExpressionOnSubgraph edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph createIsExpressionOnSubgraph(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.SubgraphRestrictedExpression omega);

	// ------------------------ Code for IsFalseExprOf ------------------------

	/**
	 * @return the first IsFalseExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf getFirstIsFalseExprOf();

	/**
	 * Creates a new IsFalseExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf createIsFalseExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression omega);

	// ------------------------ Code for IsFirstValueOf ------------------------

	/**
	 * @return the first IsFirstValueOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf getFirstIsFirstValueOf();

	/**
	 * Creates a new IsFirstValueOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf createIsFirstValueOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction omega);

	// ------------------------ Code for IsFunctionIdOf ------------------------

	/**
	 * @return the first IsFunctionIdOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf getFirstIsFunctionIdOf();

	/**
	 * Creates a new IsFunctionIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf createIsFunctionIdOf(de.uni_koblenz.jgralab.greql2.schema.FunctionId alpha, de.uni_koblenz.jgralab.greql2.schema.FunctionApplication omega);

	// ------------------------ Code for IsGoalRestrOf ------------------------

	/**
	 * @return the first IsGoalRestrOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf getFirstIsGoalRestrOf();

	/**
	 * Creates a new IsGoalRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf createIsGoalRestrOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.PathDescription omega);

	// ------------------------ Code for IsIdOf ------------------------

	/**
	 * @return the first IsIdOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIdOf getFirstIsIdOf();

	/**
	 * Creates a new IsIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsIdOf createIsIdOf(de.uni_koblenz.jgralab.greql2.schema.Identifier alpha, de.uni_koblenz.jgralab.greql2.schema.Greql2Expression omega);

	// ------------------------ Code for IsIntermediateVertexOf ------------------------

	/**
	 * @return the first IsIntermediateVertexOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf getFirstIsIntermediateVertexOf();

	/**
	 * Creates a new IsIntermediateVertexOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf createIsIntermediateVertexOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription omega);

	// ------------------------ Code for IsIteratedPathOf ------------------------

	/**
	 * @return the first IsIteratedPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsIteratedPathOf getFirstIsIteratedPathOf();

	/**
	 * Creates a new IsIteratedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsIteratedPathOf createIsIteratedPathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription omega);

	// ------------------------ Code for IsKeyExprOfComprehension ------------------------

	/**
	 * @return the first IsKeyExprOfComprehension edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension getFirstIsKeyExprOfComprehension();

	/**
	 * Creates a new IsKeyExprOfComprehension edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension createIsKeyExprOfComprehension(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.MapComprehension omega);

	// ------------------------ Code for IsKeyExprOfConstruction ------------------------

	/**
	 * @return the first IsKeyExprOfConstruction edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction getFirstIsKeyExprOfConstruction();

	/**
	 * Creates a new IsKeyExprOfConstruction edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction createIsKeyExprOfConstruction(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.MapConstruction omega);

	// ------------------------ Code for IsLastValueOf ------------------------

	/**
	 * @return the first IsLastValueOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf getFirstIsLastValueOf();

	/**
	 * Creates a new IsLastValueOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf createIsLastValueOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction omega);

	// ------------------------ Code for IsOptionalPathOf ------------------------

	/**
	 * @return the first IsOptionalPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsOptionalPathOf getFirstIsOptionalPathOf();

	/**
	 * Creates a new IsOptionalPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsOptionalPathOf createIsOptionalPathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription omega);

	// ------------------------ Code for IsPartOf ------------------------

	/**
	 * @return the first IsPartOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPartOf getFirstIsPartOf();

	/**
	 * Creates a new IsPartOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsPartOf createIsPartOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ValueConstruction omega);

	// ------------------------ Code for IsPathDescriptionOf ------------------------

	/**
	 * @return the first IsPathDescriptionOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPathDescriptionOf getFirstIsPathDescriptionOf();

	// ------------------------ Code for IsPathOf ------------------------

	/**
	 * @return the first IsPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsPathOf getFirstIsPathOf();

	/**
	 * Creates a new IsPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsPathOf createIsPathOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.PathExpression omega);

	// ------------------------ Code for IsQuantifiedDeclOf ------------------------

	/**
	 * @return the first IsQuantifiedDeclOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf getFirstIsQuantifiedDeclOf();

	/**
	 * Creates a new IsQuantifiedDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf createIsQuantifiedDeclOf(de.uni_koblenz.jgralab.greql2.schema.Declaration alpha, de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression omega);

	// ------------------------ Code for IsQuantifierOf ------------------------

	/**
	 * @return the first IsQuantifierOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf getFirstIsQuantifierOf();

	/**
	 * Creates a new IsQuantifierOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf createIsQuantifierOf(de.uni_koblenz.jgralab.greql2.schema.Quantifier alpha, de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression omega);

	// ------------------------ Code for IsQueryExprOf ------------------------

	/**
	 * @return the first IsQueryExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf getFirstIsQueryExprOf();

	/**
	 * Creates a new IsQueryExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf createIsQueryExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.Greql2Expression omega);

	// ------------------------ Code for IsRecordElementOf ------------------------

	/**
	 * @return the first IsRecordElementOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf getFirstIsRecordElementOf();

	/**
	 * Creates a new IsRecordElementOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf createIsRecordElementOf(de.uni_koblenz.jgralab.greql2.schema.RecordElement alpha, de.uni_koblenz.jgralab.greql2.schema.RecordConstruction omega);

	// ------------------------ Code for IsRecordExprOf ------------------------

	/**
	 * @return the first IsRecordExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf getFirstIsRecordExprOf();

	/**
	 * Creates a new IsRecordExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf createIsRecordExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.RecordElement omega);

	// ------------------------ Code for IsRecordIdOf ------------------------

	/**
	 * @return the first IsRecordIdOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf getFirstIsRecordIdOf();

	/**
	 * Creates a new IsRecordIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf createIsRecordIdOf(de.uni_koblenz.jgralab.greql2.schema.RecordId alpha, de.uni_koblenz.jgralab.greql2.schema.RecordElement omega);

	// ------------------------ Code for IsRoleIdOf ------------------------

	/**
	 * @return the first IsRoleIdOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRoleIdOf getFirstIsRoleIdOf();

	/**
	 * Creates a new IsRoleIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsRoleIdOf createIsRoleIdOf(de.uni_koblenz.jgralab.greql2.schema.RoleId alpha, de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction omega);

	// ------------------------ Code for IsRowHeaderExprOf ------------------------

	/**
	 * @return the first IsRowHeaderExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf getFirstIsRowHeaderExprOf();

	/**
	 * Creates a new IsRowHeaderExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf createIsRowHeaderExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.TableComprehension omega);

	// ------------------------ Code for IsSequenceElementOf ------------------------

	/**
	 * @return the first IsSequenceElementOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSequenceElementOf getFirstIsSequenceElementOf();

	/**
	 * Creates a new IsSequenceElementOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsSequenceElementOf createIsSequenceElementOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription omega);

	// ------------------------ Code for IsSimpleDeclOf ------------------------

	/**
	 * @return the first IsSimpleDeclOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf getFirstIsSimpleDeclOf();

	/**
	 * Creates a new IsSimpleDeclOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf createIsSimpleDeclOf(de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration alpha, de.uni_koblenz.jgralab.greql2.schema.Declaration omega);

	// ------------------------ Code for IsStartExprOf ------------------------

	/**
	 * @return the first IsStartExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf getFirstIsStartExprOf();

	/**
	 * Creates a new IsStartExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf createIsStartExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.PathExpression omega);

	// ------------------------ Code for IsStartRestrOf ------------------------

	/**
	 * @return the first IsStartRestrOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf getFirstIsStartRestrOf();

	/**
	 * Creates a new IsStartRestrOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf createIsStartRestrOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.PathDescription omega);

	// ------------------------ Code for IsSubPathOf ------------------------

	/**
	 * @return the first IsSubPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSubPathOf getFirstIsSubPathOf();

	/**
	 * Creates a new IsSubPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsSubPathOf createIsSubPathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription omega);

	// ------------------------ Code for IsSubgraphDefiningExpression ------------------------

	/**
	 * @return the first IsSubgraphDefiningExpression edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression getFirstIsSubgraphDefiningExpression();

	/**
	 * Creates a new IsSubgraphDefiningExpression edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression createIsSubgraphDefiningExpression(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ExpressionDefinedSubgraph omega);

	// ------------------------ Code for IsSubgraphDefinitionOf ------------------------

	/**
	 * @return the first IsSubgraphDefinitionOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefinitionOf getFirstIsSubgraphDefinitionOf();

	/**
	 * Creates a new IsSubgraphDefinitionOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefinitionOf createIsSubgraphDefinitionOf(de.uni_koblenz.jgralab.greql2.schema.SubgraphDefinition alpha, de.uni_koblenz.jgralab.greql2.schema.SubgraphRestrictedExpression omega);

	// ------------------------ Code for IsTableHeaderOf ------------------------

	/**
	 * @return the first IsTableHeaderOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf getFirstIsTableHeaderOf();

	/**
	 * Creates a new IsTableHeaderOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf createIsTableHeaderOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ComprehensionWithTableHeader omega);

	// ------------------------ Code for IsTargetExprOf ------------------------

	/**
	 * @return the first IsTargetExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf getFirstIsTargetExprOf();

	/**
	 * Creates a new IsTargetExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf createIsTargetExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.PathExpression omega);

	// ------------------------ Code for IsTransposedPathOf ------------------------

	/**
	 * @return the first IsTransposedPathOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTransposedPathOf getFirstIsTransposedPathOf();

	/**
	 * Creates a new IsTransposedPathOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTransposedPathOf createIsTransposedPathOf(de.uni_koblenz.jgralab.greql2.schema.PathDescription alpha, de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription omega);

	// ------------------------ Code for IsTrueExprOf ------------------------

	/**
	 * @return the first IsTrueExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf getFirstIsTrueExprOf();

	/**
	 * Creates a new IsTrueExprOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf createIsTrueExprOf(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression omega);

	// ------------------------ Code for IsTypeExprOf ------------------------

	/**
	 * @return the first IsTypeExprOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf getFirstIsTypeExprOf();

	// ------------------------ Code for IsTypeExprOfDeclaration ------------------------

	/**
	 * @return the first IsTypeExprOfDeclaration edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclaration();

	/**
	 * Creates a new IsTypeExprOfDeclaration edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration createIsTypeExprOfDeclaration(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration omega);

	// ------------------------ Code for IsTypeExprOfFunction ------------------------

	/**
	 * @return the first IsTypeExprOfFunction edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction getFirstIsTypeExprOfFunction();

	/**
	 * Creates a new IsTypeExprOfFunction edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction createIsTypeExprOfFunction(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.FunctionApplication omega);

	// ------------------------ Code for IsTypeIdOf ------------------------

	/**
	 * @return the first IsTypeIdOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeIdOf getFirstIsTypeIdOf();

	/**
	 * Creates a new IsTypeIdOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeIdOf createIsTypeIdOf(de.uni_koblenz.jgralab.greql2.schema.TypeId alpha, de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction omega);

	// ------------------------ Code for IsTypeRestrOfExpression ------------------------

	/**
	 * @return the first IsTypeRestrOfExpression edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression getFirstIsTypeRestrOfExpression();

	/**
	 * Creates a new IsTypeRestrOfExpression edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression createIsTypeRestrOfExpression(de.uni_koblenz.jgralab.greql2.schema.TypeId alpha, de.uni_koblenz.jgralab.greql2.schema.Expression omega);

	// ------------------------ Code for IsTypeRestrOfSubgraph ------------------------

	/**
	 * @return the first IsTypeRestrOfSubgraph edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfSubgraph getFirstIsTypeRestrOfSubgraph();

	/**
	 * Creates a new IsTypeRestrOfSubgraph edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfSubgraph createIsTypeRestrOfSubgraph(de.uni_koblenz.jgralab.greql2.schema.TypeId alpha, de.uni_koblenz.jgralab.greql2.schema.SubgraphDefinition omega);

	// ------------------------ Code for IsValueExprOfComprehension ------------------------

	/**
	 * @return the first IsValueExprOfComprehension edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension getFirstIsValueExprOfComprehension();

	/**
	 * Creates a new IsValueExprOfComprehension edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension createIsValueExprOfComprehension(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.MapComprehension omega);

	// ------------------------ Code for IsValueExprOfConstruction ------------------------

	/**
	 * @return the first IsValueExprOfConstruction edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction getFirstIsValueExprOfConstruction();

	/**
	 * Creates a new IsValueExprOfConstruction edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction createIsValueExprOfConstruction(de.uni_koblenz.jgralab.greql2.schema.Expression alpha, de.uni_koblenz.jgralab.greql2.schema.MapConstruction omega);

	// ------------------------ Code for IsVarOf ------------------------

	/**
	 * @return the first IsVarOf edge in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsVarOf getFirstIsVarOf();

	/**
	 * Creates a new IsVarOf edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IsVarOf createIsVarOf(de.uni_koblenz.jgralab.greql2.schema.Variable alpha, de.uni_koblenz.jgralab.greql2.schema.Definition omega);

	// ------------------------ Code for IteratedPathDescription ------------------------

	/**
	 * @return the first IteratedPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription getFirstIteratedPathDescription();

	/**
	 * Creates a new IteratedPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription createIteratedPathDescription();

	// ------------------------ Code for LetExpression ------------------------

	/**
	 * @return the first LetExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.LetExpression getFirstLetExpression();

	/**
	 * Creates a new LetExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.LetExpression createLetExpression();

	// ------------------------ Code for ListComprehension ------------------------

	/**
	 * @return the first ListComprehension vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ListComprehension getFirstListComprehension();

	/**
	 * Creates a new ListComprehension vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ListComprehension createListComprehension();

	// ------------------------ Code for ListConstruction ------------------------

	/**
	 * @return the first ListConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ListConstruction getFirstListConstruction();

	/**
	 * Creates a new ListConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ListConstruction createListConstruction();

	// ------------------------ Code for ListRangeConstruction ------------------------

	/**
	 * @return the first ListRangeConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction getFirstListRangeConstruction();

	/**
	 * Creates a new ListRangeConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction createListRangeConstruction();

	// ------------------------ Code for Literal ------------------------

	/**
	 * @return the first Literal vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Literal getFirstLiteral();

	/**
	 * Creates a new Literal vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Literal createLiteral();

	// ------------------------ Code for LongLiteral ------------------------

	/**
	 * @return the first LongLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.LongLiteral getFirstLongLiteral();

	/**
	 * Creates a new LongLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.LongLiteral createLongLiteral();

	// ------------------------ Code for MapComprehension ------------------------

	/**
	 * @return the first MapComprehension vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.MapComprehension getFirstMapComprehension();

	/**
	 * Creates a new MapComprehension vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.MapComprehension createMapComprehension();

	// ------------------------ Code for MapConstruction ------------------------

	/**
	 * @return the first MapConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.MapConstruction getFirstMapConstruction();

	/**
	 * Creates a new MapConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.MapConstruction createMapConstruction();

	// ------------------------ Code for OptionalPathDescription ------------------------

	/**
	 * @return the first OptionalPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription getFirstOptionalPathDescription();

	/**
	 * Creates a new OptionalPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription createOptionalPathDescription();

	// ------------------------ Code for PathDescription ------------------------

	/**
	 * @return the first PathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PathDescription getFirstPathDescription();

	// ------------------------ Code for PathExistence ------------------------

	/**
	 * @return the first PathExistence vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PathExistence getFirstPathExistence();

	/**
	 * Creates a new PathExistence vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.PathExistence createPathExistence();

	// ------------------------ Code for PathExpression ------------------------

	/**
	 * @return the first PathExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PathExpression getFirstPathExpression();

	// ------------------------ Code for PrimaryPathDescription ------------------------

	/**
	 * @return the first PrimaryPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription getFirstPrimaryPathDescription();

	// ------------------------ Code for QuantifiedExpression ------------------------

	/**
	 * @return the first QuantifiedExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression getFirstQuantifiedExpression();

	/**
	 * Creates a new QuantifiedExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression createQuantifiedExpression();

	// ------------------------ Code for Quantifier ------------------------

	/**
	 * @return the first Quantifier vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Quantifier getFirstQuantifier();

	/**
	 * Creates a new Quantifier vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Quantifier createQuantifier();

	// ------------------------ Code for RecordConstruction ------------------------

	/**
	 * @return the first RecordConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.RecordConstruction getFirstRecordConstruction();

	/**
	 * Creates a new RecordConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.RecordConstruction createRecordConstruction();

	// ------------------------ Code for RecordElement ------------------------

	/**
	 * @return the first RecordElement vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.RecordElement getFirstRecordElement();

	/**
	 * Creates a new RecordElement vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.RecordElement createRecordElement();

	// ------------------------ Code for RecordId ------------------------

	/**
	 * @return the first RecordId vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.RecordId getFirstRecordId();

	/**
	 * Creates a new RecordId vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.RecordId createRecordId();

	// ------------------------ Code for RoleId ------------------------

	/**
	 * @return the first RoleId vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.RoleId getFirstRoleId();

	/**
	 * Creates a new RoleId vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.RoleId createRoleId();

	// ------------------------ Code for SequentialPathDescription ------------------------

	/**
	 * @return the first SequentialPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription getFirstSequentialPathDescription();

	/**
	 * Creates a new SequentialPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription createSequentialPathDescription();

	// ------------------------ Code for SetComprehension ------------------------

	/**
	 * @return the first SetComprehension vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SetComprehension getFirstSetComprehension();

	/**
	 * Creates a new SetComprehension vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SetComprehension createSetComprehension();

	// ------------------------ Code for SetConstruction ------------------------

	/**
	 * @return the first SetConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SetConstruction getFirstSetConstruction();

	/**
	 * Creates a new SetConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SetConstruction createSetConstruction();

	// ------------------------ Code for SimpleDeclaration ------------------------

	/**
	 * @return the first SimpleDeclaration vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration getFirstSimpleDeclaration();

	/**
	 * Creates a new SimpleDeclaration vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration createSimpleDeclaration();

	// ------------------------ Code for SimplePathDescription ------------------------

	/**
	 * @return the first SimplePathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SimplePathDescription getFirstSimplePathDescription();

	/**
	 * Creates a new SimplePathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SimplePathDescription createSimplePathDescription();

	// ------------------------ Code for StringLiteral ------------------------

	/**
	 * @return the first StringLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.StringLiteral getFirstStringLiteral();

	/**
	 * Creates a new StringLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.StringLiteral createStringLiteral();

	// ------------------------ Code for SubgraphDefinition ------------------------

	/**
	 * @return the first SubgraphDefinition vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SubgraphDefinition getFirstSubgraphDefinition();

	// ------------------------ Code for SubgraphExpression ------------------------

	/**
	 * @return the first SubgraphExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SubgraphExpression getFirstSubgraphExpression();

	// ------------------------ Code for SubgraphRestrictedExpression ------------------------

	/**
	 * @return the first SubgraphRestrictedExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SubgraphRestrictedExpression getFirstSubgraphRestrictedExpression();

	/**
	 * Creates a new SubgraphRestrictedExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.SubgraphRestrictedExpression createSubgraphRestrictedExpression();

	// ------------------------ Code for TableComprehension ------------------------

	/**
	 * @return the first TableComprehension vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.TableComprehension getFirstTableComprehension();

	/**
	 * Creates a new TableComprehension vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.TableComprehension createTableComprehension();

	// ------------------------ Code for ThisEdge ------------------------

	/**
	 * @return the first ThisEdge vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ThisEdge getFirstThisEdge();

	/**
	 * Creates a new ThisEdge vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ThisEdge createThisEdge();

	// ------------------------ Code for ThisLiteral ------------------------

	/**
	 * @return the first ThisLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ThisLiteral getFirstThisLiteral();

	// ------------------------ Code for ThisVertex ------------------------

	/**
	 * @return the first ThisVertex vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ThisVertex getFirstThisVertex();

	/**
	 * Creates a new ThisVertex vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.ThisVertex createThisVertex();

	// ------------------------ Code for TransposedPathDescription ------------------------

	/**
	 * @return the first TransposedPathDescription vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription getFirstTransposedPathDescription();

	/**
	 * Creates a new TransposedPathDescription vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription createTransposedPathDescription();

	// ------------------------ Code for TupleConstruction ------------------------

	/**
	 * @return the first TupleConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.TupleConstruction getFirstTupleConstruction();

	/**
	 * Creates a new TupleConstruction vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.TupleConstruction createTupleConstruction();

	// ------------------------ Code for TypeId ------------------------

	/**
	 * @return the first TypeId vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.TypeId getFirstTypeId();

	/**
	 * Creates a new TypeId vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.TypeId createTypeId();

	// ------------------------ Code for TypeOrRoleId ------------------------

	/**
	 * @return the first TypeOrRoleId vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.TypeOrRoleId getFirstTypeOrRoleId();

	// ------------------------ Code for UndefinedLiteral ------------------------

	/**
	 * @return the first UndefinedLiteral vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.UndefinedLiteral getFirstUndefinedLiteral();

	/**
	 * Creates a new UndefinedLiteral vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.UndefinedLiteral createUndefinedLiteral();

	// ------------------------ Code for ValueConstruction ------------------------

	/**
	 * @return the first ValueConstruction vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.ValueConstruction getFirstValueConstruction();

	// ------------------------ Code for Variable ------------------------

	/**
	 * @return the first Variable vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Variable getFirstVariable();

	/**
	 * Creates a new Variable vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.Variable createVariable();

	// ------------------------ Code for VertexSetExpression ------------------------

	/**
	 * @return the first VertexSetExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.VertexSetExpression getFirstVertexSetExpression();

	/**
	 * Creates a new VertexSetExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.VertexSetExpression createVertexSetExpression();

	// ------------------------ Code for VertexTypeSubgraph ------------------------

	/**
	 * @return the first VertexTypeSubgraph vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.VertexTypeSubgraph getFirstVertexTypeSubgraph();

	/**
	 * Creates a new VertexTypeSubgraph vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.VertexTypeSubgraph createVertexTypeSubgraph();

	// ------------------------ Code for WhereExpression ------------------------

	/**
	 * @return the first WhereExpression vertex in this graph
	 */
	public de.uni_koblenz.jgralab.greql2.schema.WhereExpression getFirstWhereExpression();

	/**
	 * Creates a new WhereExpression vertex in this graph.
	 *
	*/
	public de.uni_koblenz.jgralab.greql2.schema.WhereExpression createWhereExpression();

	/**
	 * @return an Iterable for all edges of this graph that are of type IsVarOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsVarOf> getIsVarOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsKeyExprOfComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfComprehension> getIsKeyExprOfComprehensionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsCompDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf> getIsCompDeclOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsIteratedPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIteratedPathOf> getIsIteratedPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeIdOf> getIsTypeIdOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsBoundVarOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundVarOf> getIsBoundVarOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsPartOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPartOf> getIsPartOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsQueryExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQueryExprOf> getIsQueryExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsBoundExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOf> getIsBoundExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeRestrOfExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression> getIsTypeRestrOfExpressionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsFalseExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFalseExprOf> getIsFalseExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsRowHeaderExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRowHeaderExprOf> getIsRowHeaderExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsBoundExprOfDefinition or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfDefinition> getIsBoundExprOfDefinitionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsDirectionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf> getIsDirectionOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsStartRestrOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf> getIsStartRestrOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTrueExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTrueExprOf> getIsTrueExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTargetExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTargetExprOf> getIsTargetExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsDefinitionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDefinitionOf> getIsDefinitionOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsRecordElementOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf> getIsRecordElementOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOf> getIsTypeExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsAlternativePathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsAlternativePathOf> getIsAlternativePathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsSubgraphDefiningExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefiningExpression> getIsSubgraphDefiningExpressionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsValueExprOfComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfComprehension> getIsValueExprOfComprehensionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsIntermediateVertexOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIntermediateVertexOf> getIsIntermediateVertexOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsFunctionIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFunctionIdOf> getIsFunctionIdOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsArgumentOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsArgumentOf> getIsArgumentOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsConditionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConditionOf> getIsConditionOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsIdOf> getIsIdOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsGoalRestrOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf> getIsGoalRestrOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsPathDescriptionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPathDescriptionOf> getIsPathDescriptionOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsKeyExprOfConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsKeyExprOfConstruction> getIsKeyExprOfConstructionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsBoundExprOfQuantifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBoundExprOfQuantifier> getIsBoundExprOfQuantifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeRestrOfSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfSubgraph> getIsTypeRestrOfSubgraphEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsSubgraphDefinitionOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSubgraphDefinitionOf> getIsSubgraphDefinitionOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsBooleanPredicateOfEdgeRestriction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsBooleanPredicateOfEdgeRestriction> getIsBooleanPredicateOfEdgeRestrictionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsPathOf> getIsPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsQuantifiedDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf> getIsQuantifiedDeclOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsRoleIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRoleIdOf> getIsRoleIdOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsSimpleDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf> getIsSimpleDeclOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsExponentOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExponentOf> getIsExponentOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsColumnHeaderExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsColumnHeaderExprOf> getIsColumnHeaderExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeExprOfDeclaration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsEdgeRestrOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf> getIsEdgeRestrOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsStartExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsStartExprOf> getIsStartExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsLastValueOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsLastValueOf> getIsLastValueOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsDeclaredVarOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf> getIsDeclaredVarOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsValueExprOfConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsValueExprOfConstruction> getIsValueExprOfConstructionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsFirstValueOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsFirstValueOf> getIsFirstValueOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsConstraintOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf> getIsConstraintOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Greql2Aggregation or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Greql2Aggregation> getGreql2AggregationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsExpressionOnSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExpressionOnSubgraph> getIsExpressionOnSubgraphEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsEdgeExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsEdgeExprOf> getIsEdgeExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsRecordIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf> getIsRecordIdOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTransposedPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTransposedPathOf> getIsTransposedPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsSubPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSubPathOf> getIsSubPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsExponentiatedPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExponentiatedPathOf> getIsExponentiatedPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTableHeaderOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTableHeaderOf> getIsTableHeaderOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsQuantifierOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifierOf> getIsQuantifierOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsTypeExprOfFunction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfFunction> getIsTypeExprOfFunctionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsCompResultDefOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompResultDefOf> getIsCompResultDefOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsOptionalPathOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsOptionalPathOf> getIsOptionalPathOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsExprOf> getIsExprOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsSequenceElementOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSequenceElementOf> getIsSequenceElementOfEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IsRecordExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf> getIsRecordExprOfEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MapConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.MapConstruction> getMapConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SimplePathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SimplePathDescription> getSimplePathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type BoolLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.BoolLiteral> getBoolLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Identifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Identifier> getIdentifierVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Quantifier or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Quantifier> getQuantifierVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VertexTypeSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.VertexTypeSubgraph> getVertexTypeSubgraphVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ComprehensionWithTableHeader or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ComprehensionWithTableHeader> getComprehensionWithTableHeaderVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PathExistence or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.PathExistence> getPathExistenceVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ValueConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ValueConstruction> getValueConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Greql2Expression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Greql2Expression> getGreql2ExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type StringLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.StringLiteral> getStringLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type LongLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.LongLiteral> getLongLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type LetExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.LetExpression> getLetExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type WhereExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.WhereExpression> getWhereExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Variable or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Variable> getVariableVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type RoleId or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.RoleId> getRoleIdVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type QuantifiedExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.QuantifiedExpression> getQuantifiedExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Declaration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Declaration> getDeclarationVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ThisEdge or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ThisEdge> getThisEdgeVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SequentialPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SequentialPathDescription> getSequentialPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Comprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Comprehension> getComprehensionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EdgePathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.EdgePathDescription> getEdgePathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ListConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ListConstruction> getListConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ElementSetExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ElementSetExpression> getElementSetExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ListComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ListComprehension> getListComprehensionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type DoubleLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.DoubleLiteral> getDoubleLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SubgraphRestrictedExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SubgraphRestrictedExpression> getSubgraphRestrictedExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type RecordConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.RecordConstruction> getRecordConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TableComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.TableComprehension> getTableComprehensionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ExpressionDefinedSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ExpressionDefinedSubgraph> getExpressionDefinedSubgraphVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SetConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SetConstruction> getSetConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Definition or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Definition> getDefinitionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ListRangeConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ListRangeConstruction> getListRangeConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type RecordId or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.RecordId> getRecordIdVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ThisLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ThisLiteral> getThisLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PrimaryPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription> getPrimaryPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Greql2Vertex or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex> getGreql2VertexVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VertexSetExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.VertexSetExpression> getVertexSetExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EdgeSetExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.EdgeSetExpression> getEdgeSetExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.PathDescription> getPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IntermediateVertexPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IntermediateVertexPathDescription> getIntermediateVertexPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EdgeRestriction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction> getEdgeRestrictionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SetComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SetComprehension> getSetComprehensionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FunctionId or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.FunctionId> getFunctionIdVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SubgraphExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SubgraphExpression> getSubgraphExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IteratedPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IteratedPathDescription> getIteratedPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeId or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.TypeId> getTypeIdVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Direction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Direction> getDirectionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AlternativePathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.AlternativePathDescription> getAlternativePathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TransposedPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.TransposedPathDescription> getTransposedPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IntLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IntLiteral> getIntLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ThisVertex or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ThisVertex> getThisVertexVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ExponentiatedPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ExponentiatedPathDescription> getExponentiatedPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type RecordElement or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.RecordElement> getRecordElementVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ConditionalExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ConditionalExpression> getConditionalExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Expression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Expression> getExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type BackwardVertexSet or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.BackwardVertexSet> getBackwardVertexSetVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type OptionalPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.OptionalPathDescription> getOptionalPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PathExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.PathExpression> getPathExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EdgeTypeSubgraph or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.EdgeTypeSubgraph> getEdgeTypeSubgraphVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Literal or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.Literal> getLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type UndefinedLiteral or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.UndefinedLiteral> getUndefinedLiteralVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type DefinitionExpression or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.DefinitionExpression> getDefinitionExpressionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SubgraphDefinition or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SubgraphDefinition> getSubgraphDefinitionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FunctionApplication or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.FunctionApplication> getFunctionApplicationVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TupleConstruction or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.TupleConstruction> getTupleConstructionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeOrRoleId or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.TypeOrRoleId> getTypeOrRoleIdVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MapComprehension or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.MapComprehension> getMapComprehensionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AggregationPathDescription or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.AggregationPathDescription> getAggregationPathDescriptionVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ForwardVertexSet or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.ForwardVertexSet> getForwardVertexSetVertices();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SimpleDeclaration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration> getSimpleDeclarationVertices();
	
}
