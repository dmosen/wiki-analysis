/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Declaration extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_Declaration;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Declaration vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Declaration getNextDeclaration();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf getFirstIsCompDeclOfIncidence();

	/**
	 * @return the first edge of class IsCompDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf getFirstIsCompDeclOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfIncidence();

	/**
	 * @return the first edge of class IsQuantifiedDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf getFirstIsQuantifiedDeclOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf getFirstIsSimpleDeclOfIncidence();

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf getFirstIsSimpleDeclOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf getFirstIsConstraintOfIncidence();

	/**
	 * @return the first edge of class IsConstraintOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf getFirstIsConstraintOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>constraint</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf add_constraint(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all constraint adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_constraint();
		/**
		 * removes the given vertex as <code>constraint</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_constraint(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'constraint'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> get_constraint();
		/**
		 * adds the given vertex as <code>simpleDecl</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf add_simpleDecl(de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration vertex);
		/**
		 * removes all simpleDecl adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration> remove_simpleDecl();
		/**
		 * removes the given vertex as <code>simpleDecl</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_simpleDecl(de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'simpleDecl'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration> get_simpleDecl();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsCompDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf> getIsCompDeclOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsCompDeclOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsCompDeclOf> getIsCompDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf> getIsQuantifiedDeclOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsQuantifiedDeclOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsQuantifiedDeclOf> getIsQuantifiedDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf> getIsSimpleDeclOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf> getIsSimpleDeclOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConstraintOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf> getIsConstraintOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsConstraintOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsConstraintOf> getIsConstraintOfIncidences(EdgeDirection direction);
}
