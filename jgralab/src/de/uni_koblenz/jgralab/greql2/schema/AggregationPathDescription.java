/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

public interface AggregationPathDescription extends de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_AggregationPathDescription;

	public boolean is_outAggregation();

	public void set_outAggregation(boolean _outAggregation);

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.AggregationPathDescription vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.AggregationPathDescription getNextAggregationPathDescription();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.PathDescription vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PathDescription getNextPathDescription();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.PrimaryPathDescription getNextPrimaryPathDescription();
		/**
		 * adds the given vertex as <code>typeRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression add_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * removes all typeRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> remove_typeRestr();
		/**
		 * removes the given vertex as <code>typeRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeRestr(de.uni_koblenz.jgralab.greql2.schema.TypeId vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'typeRestr'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeRestrOfExpression</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.TypeId> get_typeRestr();
		/**
		 * adds the given vertex as <code>goalRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf add_goalRestr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all goalRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_goalRestr();
		/**
		 * removes the given vertex as <code>goalRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_goalRestr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'goalRestr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsGoalRestrOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_goalRestr();
		/**
		 * adds the given vertex as <code>startRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf add_startRestr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all startRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_startRestr();
		/**
		 * removes the given vertex as <code>startRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_startRestr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'startRestr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsStartRestrOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_startRestr();
		/**
		 * adds the given vertex as <code>direction</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf add_direction(de.uni_koblenz.jgralab.greql2.schema.Direction vertex);
		/**
		 * removes all direction adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Direction> remove_direction();
		/**
		 * removes the given vertex as <code>direction</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_direction(de.uni_koblenz.jgralab.greql2.schema.Direction vertex);
		/**
		 * @return the vertex to this one with the rolename 'direction' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsDirectionOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Direction get_direction();
		/**
		 * adds the given vertex as <code>edgeRestr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf add_edgeRestr(de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction vertex);
		/**
		 * removes all edgeRestr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction> remove_edgeRestr();
		/**
		 * removes the given vertex as <code>edgeRestr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_edgeRestr(de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'edgeRestr'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsEdgeRestrOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.EdgeRestriction> get_edgeRestr();
}
