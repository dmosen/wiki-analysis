/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface RecordElement extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_RecordElement;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.RecordElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.RecordElement getNextRecordElement();

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf getFirstIsRecordElementOfIncidence();

	/**
	 * @return the first edge of class IsRecordElementOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf getFirstIsRecordElementOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf getFirstIsRecordIdOfIncidence();

	/**
	 * @return the first edge of class IsRecordIdOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf getFirstIsRecordIdOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf getFirstIsRecordExprOfIncidence();

	/**
	 * @return the first edge of class IsRecordExprOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf getFirstIsRecordExprOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>recordExpr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf add_recordExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all recordExpr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_recordExpr();
		/**
		 * removes the given vertex as <code>recordExpr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_recordExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'recordExpr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_recordExpr();
		/**
		 * adds the given vertex as <code>recordId</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf add_recordId(de.uni_koblenz.jgralab.greql2.schema.RecordId vertex);
		/**
		 * removes all recordId adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.RecordId> remove_recordId();
		/**
		 * removes the given vertex as <code>recordId</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_recordId(de.uni_koblenz.jgralab.greql2.schema.RecordId vertex);
		/**
		 * @return the vertex to this one with the rolename 'recordId' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.RecordId get_recordId();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordElementOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf> getIsRecordElementOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordElementOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordElementOf> getIsRecordElementOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordIdOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf> getIsRecordIdOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordIdOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordIdOf> getIsRecordIdOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordExprOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf> getIsRecordExprOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsRecordExprOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsRecordExprOf> getIsRecordExprOfIncidences(EdgeDirection direction);
}
