/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.greql2.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface SimpleDeclaration extends de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.greql2.schema.Greql2Schema.instance().vc_SimpleDeclaration;

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.Greql2Vertex getNextGreql2Vertex();

	/**
	 * @return the next de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.greql2.schema.SimpleDeclaration getNextSimpleDeclaration();

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationIncidence();

	/**
	 * @return the first edge of class IsTypeExprOfDeclaration at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration getFirstIsTypeExprOfDeclarationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf getFirstIsDeclaredVarOfIncidence();

	/**
	 * @return the first edge of class IsDeclaredVarOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf getFirstIsDeclaredVarOfIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf getFirstIsSimpleDeclOfIncidence();

	/**
	 * @return the first edge of class IsSimpleDeclOf at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf getFirstIsSimpleDeclOfIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>typeExpr</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration add_typeExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * removes all typeExpr adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Expression> remove_typeExpr();
		/**
		 * removes the given vertex as <code>typeExpr</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_typeExpr(de.uni_koblenz.jgralab.greql2.schema.Expression vertex);
		/**
		 * @return the vertex to this one with the rolename 'typeExpr' 
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.jgralab.greql2.schema.Expression get_typeExpr();
		/**
		 * adds the given vertex as <code>declaredVar</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf add_declaredVar(de.uni_koblenz.jgralab.greql2.schema.Variable vertex);
		/**
		 * removes all declaredVar adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.greql2.schema.Variable> remove_declaredVar();
		/**
		 * removes the given vertex as <code>declaredVar</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_declaredVar(de.uni_koblenz.jgralab.greql2.schema.Variable vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'declaredVar'
		 *         (connected with a <code>de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.greql2.schema.Variable> get_declaredVar();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsTypeExprOfDeclaration.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsTypeExprOfDeclaration> getIsTypeExprOfDeclarationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf> getIsDeclaredVarOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsDeclaredVarOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsDeclaredVarOf> getIsDeclaredVarOfIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf> getIsSimpleDeclOfIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IsSimpleDeclOf.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.greql2.schema.IsSimpleDeclOf> getIsSimpleDeclOfIncidences(EdgeDirection direction);
}
