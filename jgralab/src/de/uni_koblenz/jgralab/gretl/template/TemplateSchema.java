/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.gretl.template;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import java.lang.ref.WeakReference;

/**
 * The schema TemplateSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class TemplateSchema extends SchemaImpl {
	public final GraphClass gc_TemplateGraph;
	public final VertexClass vc_CreateVertex;
	public final EdgeClass ec_CreateEdge;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<TemplateSchema> theInstance = new WeakReference<TemplateSchema>(null);
	
	/**
	 * @return the singleton instance of TemplateSchema
	 */
	public static TemplateSchema instance() {
		TemplateSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (TemplateSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new TemplateSchema();
			theInstance = new WeakReference<TemplateSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a TemplateSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private TemplateSchema() {
		super("TemplateSchema", "de.uni_koblenz.jgralab.gretl.template");

		createMapDomain(getDomain("String"), getDomain("String"));

		{
			GraphClass gc = gc_TemplateGraph = createGraphClass("TemplateGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_CreateVertex = gc.createVertexClass("CreateVertex");
				vc.setAbstract(false);
				vc.addAttribute(createAttribute("archetype", getDomain("String"), getAttributedElementClass("CreateVertex"), null));
				vc.addAttribute(createAttribute("attributes", getDomain("Map<String, String>"), getAttributedElementClass("CreateVertex"), null));
				vc.addAttribute(createAttribute("copyAttributeValues", getDomain("Boolean"), getAttributedElementClass("CreateVertex"), null));
				vc.addAttribute(createAttribute("typeName", getDomain("String"), getAttributedElementClass("CreateVertex"), null));
				vc.addAttribute(createAttribute("typeNameIsQuery", getDomain("Boolean"), getAttributedElementClass("CreateVertex"), null));
			}

			{
				EdgeClass ec = ec_CreateEdge = gc.createEdgeClass("CreateEdge",
					vc_CreateVertex, 0, 2147483647, "src", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_CreateVertex, 0, 2147483647, "dst", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
				ec.addAttribute(createAttribute("archetype", getDomain("String"), getAttributedElementClass("CreateEdge"), null));
				ec.addAttribute(createAttribute("attributes", getDomain("Map<String, String>"), getAttributedElementClass("CreateEdge"), null));
				ec.addAttribute(createAttribute("copyAttributeValues", getDomain("Boolean"), getAttributedElementClass("CreateEdge"), null));
				ec.addAttribute(createAttribute("typeName", getDomain("String"), getAttributedElementClass("CreateEdge"), null));
				ec.addAttribute(createAttribute("typeNameIsQuery", getDomain("Boolean"), getAttributedElementClass("CreateEdge"), null));
			}
		}

		finish();
	}

	@Override
	public de.uni_koblenz.jgralab.GraphFactory createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType implementationType) {
		switch(implementationType) {
			case GENERIC:
				return new de.uni_koblenz.jgralab.impl.generic.GenericGraphFactoryImpl(this);
			case STANDARD:
				return new de.uni_koblenz.jgralab.gretl.template.impl.std.TemplateGraphFactoryImpl();
		}
		throw new UnsupportedOperationException("No " + implementationType + " support compiled.");
	}

	/**
	 * Creates a new TemplateGraph graph.
	*/
	public TemplateGraph createTemplateGraph(de.uni_koblenz.jgralab.ImplementationType implType) {
		return createTemplateGraph(implType, null, 100, 100);
	}

	/**
	 * Creates a new TemplateGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public TemplateGraph createTemplateGraph(de.uni_koblenz.jgralab.ImplementationType implType, String id, int vMax, int eMax) {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return factory.createGraph(gc_TemplateGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new TemplateGraph graph.
	*/
	public TemplateGraph createTemplateGraph(de.uni_koblenz.jgralab.GraphFactory factory) {
		return factory.createGraph(gc_TemplateGraph, null, 100, 100);
	}

	/**
	 * Creates a new TemplateGraph graph.
	*/
	public TemplateGraph createTemplateGraph(de.uni_koblenz.jgralab.GraphFactory factory, String id, int vMax, int eMax) {
		return factory.createGraph(gc_TemplateGraph, id, vMax, eMax);
	}

	/**
	 * Creates a new TemplateGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public TemplateGraph createTemplateGraph(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		return createTemplateGraph(id, 100, 100, graphDatabase);
	}

	/**
	 * Creates a new TemplateGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public TemplateGraph createTemplateGraph(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No DATABASE support compiled.");
	}

	public TemplateGraph loadTemplateGraph(String filename) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadTemplateGraph(filename, factory, null);
	}

	public TemplateGraph loadTemplateGraph(String filename, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(de.uni_koblenz.jgralab.ImplementationType.STANDARD);
		return loadTemplateGraph(filename, factory, pf);
	}

	public TemplateGraph loadTemplateGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadTemplateGraph(filename, factory, null);
	}

	
	public TemplateGraph loadTemplateGraph(String filename, de.uni_koblenz.jgralab.ImplementationType implType, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		de.uni_koblenz.jgralab.GraphFactory factory = createDefaultGraphFactory(implType);
		return loadTemplateGraph(filename, factory, pf);
	}

	public TemplateGraph loadTemplateGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, null);
	}

	public TemplateGraph loadTemplateGraph(String filename, de.uni_koblenz.jgralab.GraphFactory factory, de.uni_koblenz.jgralab.ProgressFunction pf) throws GraphIOException {
		return GraphIO.loadGraphFromFile(filename, factory, pf);
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
