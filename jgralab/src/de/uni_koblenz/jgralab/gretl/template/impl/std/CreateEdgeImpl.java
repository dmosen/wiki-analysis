/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.gretl.template.impl.std;

import de.uni_koblenz.jgralab.impl.std.EdgeImpl;

import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;
import de.uni_koblenz.jgralab.Vertex;

import de.uni_koblenz.jgralab.gretl.template.impl.std.ReversedCreateEdgeImpl;

import de.uni_koblenz.jgralab.gretl.template.CreateVertex;

import java.io.IOException;
/**
 * FromVertexClass: CreateVertex
 * FromRoleName : src
 * ToVertexClass: CreateVertex
 * ToRoleName : dst
 */

public class CreateEdgeImpl extends EdgeImpl implements de.uni_koblenz.jgralab.gretl.template.CreateEdge, de.uni_koblenz.jgralab.Edge {

	protected java.lang.String _archetype;

	protected org.pcollections.PMap<java.lang.String, java.lang.String> _attributes;

	protected boolean _copyAttributeValues;

	protected java.lang.String _typeName;

	protected boolean _typeNameIsQuery;

	public CreateEdgeImpl(int id, de.uni_koblenz.jgralab.Graph g, Vertex alpha, Vertex omega) {
		super(id, g, alpha, omega);
		((de.uni_koblenz.jgralab.impl.InternalGraph) graph).addEdge(this, alpha, omega);
	}

	@Override
	public final de.uni_koblenz.jgralab.schema.EdgeClass getAttributedElementClass() {
		return de.uni_koblenz.jgralab.gretl.template.CreateEdge.EC;
	}

	@Override
	public final java.lang.Class<? extends de.uni_koblenz.jgralab.Edge> getSchemaClass() {
		return de.uni_koblenz.jgralab.gretl.template.CreateEdge.class;
	}

	@SuppressWarnings("unchecked")
	public <T> T getAttribute(String attributeName) {
		if (attributeName.equals("archetype")) return (T) get_archetype();
		if (attributeName.equals("attributes")) return (T) get_attributes();
		if (attributeName.equals("copyAttributeValues")) return (T) (java.lang.Boolean) is_copyAttributeValues();
		if (attributeName.equals("typeName")) return (T) get_typeName();
		if (attributeName.equals("typeNameIsQuery")) return (T) (java.lang.Boolean) is_typeNameIsQuery();
		throw new NoSuchAttributeException("CreateEdge doesn't contain an attribute " + attributeName);
	}

	@SuppressWarnings("unchecked")
	public <T> void setAttribute(String attributeName, T data) {
		if (attributeName.equals("archetype")) {
			set_archetype((java.lang.String) data);
			return;
		}
		if (attributeName.equals("attributes")) {
			set_attributes((org.pcollections.PMap<java.lang.String, java.lang.String>) data);
			return;
		}
		if (attributeName.equals("copyAttributeValues")) {
			set_copyAttributeValues((java.lang.Boolean) data);
			return;
		}
		if (attributeName.equals("typeName")) {
			set_typeName((java.lang.String) data);
			return;
		}
		if (attributeName.equals("typeNameIsQuery")) {
			set_typeNameIsQuery((java.lang.Boolean) data);
			return;
		}
		throw new NoSuchAttributeException("CreateEdge doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_archetype() {
		return _archetype;
	}

	public void set_archetype(java.lang.String _archetype) {
		ecaAttributeChanging("archetype", this._archetype, _archetype);
		Object oldValue = this._archetype;
		this._archetype = _archetype;
		graphModified();
	ecaAttributeChanged("archetype", oldValue, _archetype);
	}

	public org.pcollections.PMap<java.lang.String, java.lang.String> get_attributes() {
		return _attributes;
	}

	public void set_attributes(org.pcollections.PMap<java.lang.String, java.lang.String> _attributes) {
		ecaAttributeChanging("attributes", this._attributes, _attributes);
		Object oldValue = this._attributes;
		this._attributes = _attributes;
		graphModified();
	ecaAttributeChanged("attributes", oldValue, _attributes);
	}

	public boolean is_copyAttributeValues() {
		return _copyAttributeValues;
	}

	public void set_copyAttributeValues(boolean _copyAttributeValues) {
		ecaAttributeChanging("copyAttributeValues", this._copyAttributeValues, _copyAttributeValues);
		Object oldValue = this._copyAttributeValues;
		this._copyAttributeValues = _copyAttributeValues;
		graphModified();
	ecaAttributeChanged("copyAttributeValues", oldValue, _copyAttributeValues);
	}

	public java.lang.String get_typeName() {
		return _typeName;
	}

	public void set_typeName(java.lang.String _typeName) {
		ecaAttributeChanging("typeName", this._typeName, _typeName);
		Object oldValue = this._typeName;
		this._typeName = _typeName;
		graphModified();
	ecaAttributeChanged("typeName", oldValue, _typeName);
	}

	public boolean is_typeNameIsQuery() {
		return _typeNameIsQuery;
	}

	public void set_typeNameIsQuery(boolean _typeNameIsQuery) {
		ecaAttributeChanging("typeNameIsQuery", this._typeNameIsQuery, _typeNameIsQuery);
		Object oldValue = this._typeNameIsQuery;
		this._typeNameIsQuery = _typeNameIsQuery;
		graphModified();
	ecaAttributeChanged("typeNameIsQuery", oldValue, _typeNameIsQuery);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_archetype = io.matchUtfString();
		set_archetype(_archetype);
		
		if (io.isNextToken("{")) {
			org.pcollections.PMap<java.lang.String, java.lang.String> $_attributes = de.uni_koblenz.jgralab.JGraLab.map();
			io.match("{");
			while (!io.isNextToken("}")) {
				java.lang.String _attributesKey;
					java.lang.String _attributesValue;
				_attributesKey = io.matchUtfString();
				io.match("-");
				_attributesValue = io.matchUtfString();
				$_attributes = $_attributes.plus(_attributesKey, _attributesValue);
			}
			io.match("}");
			_attributes = $_attributes;
		} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
			io.match();
			_attributes = null;
		} else {
			_attributes = null;
		}
		set_attributes(_attributes);
		_copyAttributeValues = io.matchBoolean();
		set_copyAttributeValues(_copyAttributeValues);
		_typeName = io.matchUtfString();
		set_typeName(_typeName);
		_typeNameIsQuery = io.matchBoolean();
		set_typeNameIsQuery(_typeNameIsQuery);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("archetype")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_archetype = io.matchUtfString();
			set_archetype(_archetype);
			return;
		}
		if (attributeName.equals("attributes")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			
			if (io.isNextToken("{")) {
				org.pcollections.PMap<java.lang.String, java.lang.String> $_attributes = de.uni_koblenz.jgralab.JGraLab.map();
				io.match("{");
				while (!io.isNextToken("}")) {
					java.lang.String _attributesKey;
						java.lang.String _attributesValue;
					_attributesKey = io.matchUtfString();
					io.match("-");
					_attributesValue = io.matchUtfString();
					$_attributes = $_attributes.plus(_attributesKey, _attributesValue);
				}
				io.match("}");
				_attributes = $_attributes;
			} else if (io.isNextToken(GraphIO.NULL_LITERAL)) {
				io.match();
				_attributes = null;
			} else {
				_attributes = null;
			}
			set_attributes(_attributes);
			return;
		}
		if (attributeName.equals("copyAttributeValues")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_copyAttributeValues = io.matchBoolean();
			set_copyAttributeValues(_copyAttributeValues);
			return;
		}
		if (attributeName.equals("typeName")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_typeName = io.matchUtfString();
			set_typeName(_typeName);
			return;
		}
		if (attributeName.equals("typeNameIsQuery")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_typeNameIsQuery = io.matchBoolean();
			set_typeNameIsQuery(_typeNameIsQuery);
			return;
		}
		throw new NoSuchAttributeException("CreateEdge doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_archetype);
		if (_attributes != null) {
			io.writeSpace();
			io.write("{");
			io.noSpace();
			for (java.lang.String key: _attributes.keySet()) {
				java.lang.String value = _attributes.get(key);
				io.writeUtfString(key);
				io.write(" -");
				io.writeUtfString(value);
			}
			io.write("}");
			io.space();
		} else {
			io.writeIdentifier(GraphIO.NULL_LITERAL);
		}
		io.writeBoolean(_copyAttributeValues);
		io.writeUtfString(_typeName);
		io.writeBoolean(_typeNameIsQuery);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("archetype")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_archetype);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("attributes")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			if (_attributes != null) {
				io.writeSpace();
				io.write("{");
				io.noSpace();
				for (java.lang.String key: _attributes.keySet()) {
					java.lang.String value = _attributes.get(key);
					io.writeUtfString(key);
					io.write(" -");
					io.writeUtfString(value);
				}
				io.write("}");
				io.space();
			} else {
				io.writeIdentifier(GraphIO.NULL_LITERAL);
			}
			return io.getStringWriterResult();
		}
		if (attributeName.equals("copyAttributeValues")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(_copyAttributeValues);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("typeName")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_typeName);
			return io.getStringWriterResult();
		}
		if (attributeName.equals("typeNameIsQuery")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeBoolean(_typeNameIsQuery);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("CreateEdge doesn't contain an attribute " + attributeName);
	}

	public de.uni_koblenz.jgralab.gretl.template.CreateEdge getNextCreateEdgeInGraph() {
		return (de.uni_koblenz.jgralab.gretl.template.CreateEdge)getNextEdge(de.uni_koblenz.jgralab.gretl.template.CreateEdge.class);
	}

	public de.uni_koblenz.jgralab.gretl.template.CreateEdge getNextCreateEdgeIncidence() {
		return (de.uni_koblenz.jgralab.gretl.template.CreateEdge)getNextIncidence(de.uni_koblenz.jgralab.gretl.template.CreateEdge.class);
	}

	public de.uni_koblenz.jgralab.gretl.template.CreateEdge getNextCreateEdgeIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.jgralab.gretl.template.CreateEdge)getNextIncidence(de.uni_koblenz.jgralab.gretl.template.CreateEdge.class, orientation);
	}

	public de.uni_koblenz.jgralab.schema.AggregationKind getAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getAlphaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	@Override
	public de.uni_koblenz.jgralab.schema.AggregationKind getOmegaAggregationKind() {
		return de.uni_koblenz.jgralab.schema.AggregationKind.NONE;
	}

	protected de.uni_koblenz.jgralab.impl.ReversedEdgeBaseImpl createReversedEdge() {
		return new ReversedCreateEdgeImpl(this, graph);
	}
	public CreateVertex getAlpha() {
		return (CreateVertex) super.getAlpha();
	}
	public CreateVertex getOmega() {
		return (CreateVertex) super.getOmega();
	}
}
