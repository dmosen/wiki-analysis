/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.jgralab.gretl.template;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface CreateVertex extends de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_koblenz.jgralab.gretl.template.TemplateSchema.instance().vc_CreateVertex;

	public java.lang.String get_archetype();

	public void set_archetype(java.lang.String _archetype);

	public org.pcollections.PMap<java.lang.String, java.lang.String> get_attributes();

	public void set_attributes(org.pcollections.PMap<java.lang.String, java.lang.String> _attributes);

	public boolean is_copyAttributeValues();

	public void set_copyAttributeValues(boolean _copyAttributeValues);

	public java.lang.String get_typeName();

	public void set_typeName(java.lang.String _typeName);

	public boolean is_typeNameIsQuery();

	public void set_typeNameIsQuery(boolean _typeNameIsQuery);

	/**
	 * @return the next de.uni_koblenz.jgralab.gretl.template.CreateVertex vertex in the global vertex sequence
	 */
	public de.uni_koblenz.jgralab.gretl.template.CreateVertex getNextCreateVertex();

	/**
	 * @return the first edge of class CreateEdge at this vertex
	 */
	public de.uni_koblenz.jgralab.gretl.template.CreateEdge getFirstCreateEdgeIncidence();

	/**
	 * @return the first edge of class CreateEdge at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.jgralab.gretl.template.CreateEdge getFirstCreateEdgeIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>src</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.gretl.template.CreateEdge add_src(de.uni_koblenz.jgralab.gretl.template.CreateVertex vertex);
		/**
		 * removes all src adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.gretl.template.CreateVertex> remove_src();
		/**
		 * removes the given vertex as <code>src</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_src(de.uni_koblenz.jgralab.gretl.template.CreateVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'src'
		 *         (connected with a <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.gretl.template.CreateVertex> get_src();
		/**
		 * adds the given vertex as <code>dst</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.jgralab.gretl.template.CreateEdge add_dst(de.uni_koblenz.jgralab.gretl.template.CreateVertex vertex);
		/**
		 * removes all dst adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.jgralab.gretl.template.CreateVertex> remove_dst();
		/**
		 * removes the given vertex as <code>dst</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_dst(de.uni_koblenz.jgralab.gretl.template.CreateVertex vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'dst'
		 *         (connected with a <code>de.uni_koblenz.jgralab.gretl.template.CreateEdge</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.jgralab.gretl.template.CreateVertex> get_dst();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreateEdge or subtypes.
	 */
	public Iterable<de.uni_koblenz.jgralab.gretl.template.CreateEdge> getCreateEdgeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreateEdge.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.jgralab.gretl.template.CreateEdge> getCreateEdgeIncidences(EdgeDirection direction);
}
